(* autogenerated from github.com/mit-pdos/goose-nfsd/txn *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.mit_pdos.goose_nfsd.addr.
From Goose Require github_com.mit_pdos.goose_nfsd.buf.
From Goose Require github_com.mit_pdos.goose_nfsd.common.
From Goose Require github_com.mit_pdos.goose_nfsd.util.
From Goose Require github_com.mit_pdos.goose_nfsd.wal.

Definition TransId: ty := uint64T.

Module Txn.
  Definition S := struct.decl [
    "mu" :: lockRefT;
    "log" :: struct.ptrT wal.Walog.S;
    "nextId" :: TransId;
    "pos" :: wal.LogPosition
  ].
End Txn.

Definition MkTxn: val :=
  rec: "MkTxn" "d" :=
    let: "txn" := struct.new Txn.S [
      "mu" ::= lock.new #();
      "log" ::= wal.MkLog "d";
      "nextId" ::= #1;
      "pos" ::= #0
    ] in
    "txn".

(* Return a unique Id for a transaction *)
Definition Txn__GetTransId: val :=
  rec: "Txn__GetTransId" "txn" :=
    lock.acquire (struct.loadF Txn.S "mu" "txn");;
    let: "id" := struct.loadF Txn.S "nextId" "txn" in
    struct.storeF Txn.S "nextId" "txn" (struct.loadF Txn.S "nextId" "txn" + #1);;
    lock.release (struct.loadF Txn.S "mu" "txn");;
    "id".

(* Read a disk object into buf *)
Definition Txn__Load: val :=
  rec: "Txn__Load" "txn" "addr" "sz" :=
    let: "blk" := wal.Walog__Read (struct.loadF Txn.S "log" "txn") (struct.get addr.Addr.S "Blkno" "addr") in
    let: "b" := buf.MkBufLoad "addr" "sz" "blk" in
    "b".

(* Installs the txn's bufs into their blocks and returns the blocks.
   A buf may only partially update a disk block and several bufs may
   apply to the same disk block. Assume caller holds commit lock. *)
Definition Txn__installBufsMap: val :=
  rec: "Txn__installBufsMap" "txn" "bufs" :=
    let: "blks" := NewMap (slice.T byteT) in
    ForSlice (refT (struct.t buf.Buf.S)) <> "b" "bufs"
      (if: (struct.loadF buf.Buf.S "Sz" "b" = common.NBITBLOCK)
      then MapInsert "blks" (struct.get addr.Addr.S "Blkno" (struct.loadF buf.Buf.S "Addr" "b")) (struct.loadF buf.Buf.S "Data" "b")
      else
        let: "blk" := ref (zero_val (slice.T byteT)) in
        let: ("mapblk", "ok") := MapGet "blks" (struct.get addr.Addr.S "Blkno" (struct.loadF buf.Buf.S "Addr" "b")) in
        (if: "ok"
        then "blk" <-[slice.T byteT] "mapblk"
        else
          "blk" <-[slice.T byteT] wal.Walog__Read (struct.loadF Txn.S "log" "txn") (struct.get addr.Addr.S "Blkno" (struct.loadF buf.Buf.S "Addr" "b"));;
          MapInsert "blks" (struct.get addr.Addr.S "Blkno" (struct.loadF buf.Buf.S "Addr" "b")) (![slice.T byteT] "blk"));;
        buf.Buf__Install "b" (![slice.T byteT] "blk"));;
    "blks".

Definition Txn__installBufs: val :=
  rec: "Txn__installBufs" "txn" "bufs" :=
    let: "blks" := ref (zero_val (slice.T (struct.t wal.Update.S))) in
    let: "bufmap" := Txn__installBufsMap "txn" "bufs" in
    MapIter "bufmap" (Î»: "blkno" "data",
      "blks" <-[slice.T (struct.t wal.Update.S)] SliceAppend (struct.t wal.Update.S) (![slice.T (struct.t wal.Update.S)] "blks") (wal.MkBlockData "blkno" "data"));;
    ![slice.T (struct.t wal.Update.S)] "blks".

(* Acquires the commit log, installs the txn's buffers into their
   blocks, and appends the blocks to the in-memory log. *)
Definition Txn__doCommit: val :=
  rec: "Txn__doCommit" "txn" "bufs" :=
    lock.acquire (struct.loadF Txn.S "mu" "txn");;
    let: "blks" := Txn__installBufs "txn" "bufs" in
    util.DPrintf #3 (#(str"doCommit: %v bufs
    ")) #();;
    let: ("n", "ok") := wal.Walog__MemAppend (struct.loadF Txn.S "log" "txn") "blks" in
    struct.storeF Txn.S "pos" "txn" "n";;
    lock.release (struct.loadF Txn.S "mu" "txn");;
    ("n", "ok").

(* Commit dirty bufs of the transaction into the log, and perhaps wait. *)
Definition Txn__CommitWait: val :=
  rec: "Txn__CommitWait" "txn" "bufs" "wait" "id" :=
    let: "commit" := ref_to boolT #true in
    (if: slice.len "bufs" > #0
    then
      let: ("n", "ok") := Txn__doCommit "txn" "bufs" in
      (if: ~ "ok"
      then
        util.DPrintf #10 (#(str"memappend failed; log is too small
        ")) #();;
        "commit" <-[boolT] #false
      else
        (if: "wait"
        then wal.Walog__Flush (struct.loadF Txn.S "log" "txn") "n"
        else #()))
    else
      util.DPrintf #5 (#(str"commit read-only trans
      ")) #());;
    ![boolT] "commit".

(* NOTE: this is coarse-grained and unattached to the transaction ID *)
Definition Txn__Flush: val :=
  rec: "Txn__Flush" "txn" :=
    lock.acquire (struct.loadF Txn.S "mu" "txn");;
    let: "pos" := struct.loadF Txn.S "pos" "txn" in
    lock.release (struct.loadF Txn.S "mu" "txn");;
    wal.Walog__Flush (struct.loadF Txn.S "log" "txn") "pos";;
    #true.

Definition Txn__LogSz: val :=
  rec: "Txn__LogSz" "txn" :=
    wal.LOGSZ.

Definition Txn__Shutdown: val :=
  rec: "Txn__Shutdown" "txn" :=
    wal.Walog__Shutdown (struct.loadF Txn.S "log" "txn").
