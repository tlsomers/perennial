(* autogenerated from github.com/mit-pdos/goose-nfsd/kvs *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.mit_pdos.goose_nfsd.addr.
From Goose Require github_com.mit_pdos.goose_nfsd.buftxn.
From Goose Require github_com.mit_pdos.goose_nfsd.common.
From Goose Require github_com.mit_pdos.goose_nfsd.super.
From Goose Require github_com.mit_pdos.goose_nfsd.txn.

Definition DISKNAME : expr := #(str"goose_kvs.img").

Module KVS.
  Definition S := struct.decl [
    "sz" :: uint64T;
    "txn" :: struct.ptrT txn.Txn.S
  ].
End KVS.

Module KVPair.
  Definition S := struct.decl [
    "Key" :: uint64T;
    "Val" :: slice.T byteT
  ].
End KVPair.

Definition MkKVS: val :=
  rec: "MkKVS" "d" "sz" :=
    let: "super" := super.MkFsSuper "d" in
    let: "txn" := txn.MkTxn "super" in
    let: "kvs" := struct.new KVS.S [
      "sz" ::= "sz";
      "txn" ::= "txn"
    ] in
    "kvs".

Definition KVS__MultiPut: val :=
  rec: "KVS__MultiPut" "kvs" "pairs" :=
    let: "btxn" := buftxn.Begin (struct.loadF KVS.S "txn" "kvs") in
    ForSlice (struct.t KVPair.S) <> "p" "pairs"
      (if: (struct.get KVPair.S "Key" "p" â‰¥ struct.loadF KVS.S "sz" "kvs") || (struct.get KVPair.S "Key" "p" < common.LOGSIZE)
      then
        Panic "oops";;
        #()
      else #());;
      let: "akey" := addr.MkAddr (struct.get KVPair.S "Key" "p") #0 in
      buftxn.BufTxn__OverWrite "btxn" "akey" common.NBITBLOCK (struct.get KVPair.S "Val" "p");;
    let: "ok" := buftxn.BufTxn__CommitWait "btxn" #true in
    "ok".

Definition KVS__Get: val :=
  rec: "KVS__Get" "kvs" "key" :=
    (if: ("key" > struct.loadF KVS.S "sz" "kvs") || ("key" < common.LOGSIZE)
    then
      Panic "oops";;
      #()
    else #());;
    let: "btxn" := buftxn.Begin (struct.loadF KVS.S "txn" "kvs") in
    let: "akey" := addr.MkAddr "key" #0 in
    let: "data" := struct.loadF buf.Buf.S "Data" (buftxn.BufTxn__ReadBuf "btxn" "akey" common.NBITBLOCK) in
    let: "ok" := buftxn.BufTxn__CommitWait "btxn" #true in
    (struct.new KVPair.S [
       "Key" ::= "key";
       "Val" ::= "data"
     ], "ok").

Definition KVS__Delete: val :=
  rec: "KVS__Delete" "kvs" :=
    txn.Txn__Shutdown (struct.loadF KVS.S "txn" "kvs").
