(* autogenerated from github.com/mit-pdos/goose-nfsd/alloc *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.mit_pdos.goose_nfsd.util.

(* Allocator uses a bit map to allocate and free numbers. Bit 0
   corresponds to number 0, bit 1 to 1, and so on. *)
Module Alloc.
  Definition S := struct.decl [
    "mu" :: lockRefT;
    "next" :: uint64T;
    "bitmap" :: slice.T byteT
  ].
End Alloc.

(* MkAlloc initializes with a bitmap.

   0 bits correspond to free numbers and 1 bits correspond to in-use numbers. *)
Definition MkAlloc: val :=
  rec: "MkAlloc" "bitmap" :=
    let: "a" := struct.new Alloc.S [
      "mu" ::= lock.new #();
      "next" ::= #0;
      "bitmap" ::= "bitmap"
    ] in
    "a".

Definition Alloc__incNext: val :=
  rec: "Alloc__incNext" "a" :=
    struct.storeF Alloc.S "next" "a" (struct.loadF Alloc.S "next" "a" + #1);;
    (if: struct.loadF Alloc.S "next" "a" ≥ slice.len (struct.loadF Alloc.S "bitmap" "a") * #8
    then
      struct.storeF Alloc.S "next" "a" #0;;
      #()
    else #());;
    struct.loadF Alloc.S "next" "a".

(* Returns a free number in the bitmap *)
Definition Alloc__allocBit: val :=
  rec: "Alloc__allocBit" "a" :=
    let: "num" := ref (zero_val uint64T) in
    lock.acquire (struct.loadF Alloc.S "mu" "a");;
    "num" <-[uint64T] Alloc__incNext "a";;
    let: "start" := ![uint64T] "num" in
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "bit" := (![uint64T] "num") `rem` #8 in
      let: "byte" := (![uint64T] "num") `quot` #8 in
      util.DPrintf #10 (#(str"allocBit: s %d num %d
      ")) #();;
      (if: (SliceGet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" `and` #(U8 1) ≪ "bit") = #(U8 0)
      then
        SliceSet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" (SliceGet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" `or` #(U8 1) ≪ "bit");;
        Break
      else
        "num" <-[uint64T] Alloc__incNext "a";;
        (if: (![uint64T] "num" = "start")
        then
          "num" <-[uint64T] #0;;
          Break
        else Continue)));;
    lock.release (struct.loadF Alloc.S "mu" "a");;
    ![uint64T] "num".

Definition Alloc__freeBit: val :=
  rec: "Alloc__freeBit" "a" "bn" :=
    lock.acquire (struct.loadF Alloc.S "mu" "a");;
    let: "byte" := "bn" `quot` #8 in
    let: "bit" := "bn" `rem` #8 in
    SliceSet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" (SliceGet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" `and` ~ (#(U8 1) ≪ "bit"));;
    lock.release (struct.loadF Alloc.S "mu" "a").

Definition Alloc__MarkUsed: val :=
  rec: "Alloc__MarkUsed" "a" "bn" :=
    lock.acquire (struct.loadF Alloc.S "mu" "a");;
    let: "byte" := "bn" `quot` #8 in
    let: "bit" := "bn" `rem` #8 in
    SliceSet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" (SliceGet byteT (struct.loadF Alloc.S "bitmap" "a") "byte" `or` #(U8 1) ≪ "bit");;
    lock.release (struct.loadF Alloc.S "mu" "a").

Definition Alloc__AllocNum: val :=
  rec: "Alloc__AllocNum" "a" :=
    let: "num" := Alloc__allocBit "a" in
    "num".

Definition Alloc__FreeNum: val :=
  rec: "Alloc__FreeNum" "a" "num" :=
    (if: ("num" = #0)
    then
      Panic "FreeNum";;
      #()
    else #());;
    Alloc__freeBit "a" "num".

Definition popCnt: val :=
  rec: "popCnt" "b" :=
    let: "count" := ref (zero_val uint64T) in
    let: "x" := ref_to byteT "b" in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "i" < #8); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      "count" <-[uint64T] ![uint64T] "count" + to_u64 ("b" `and` #(U8 1));;
      "x" <-[byteT] ![byteT] "x" ≫ #1;;
      Continue);;
    ![uint64T] "count".

Definition Alloc__NumFree: val :=
  rec: "Alloc__NumFree" "a" :=
    lock.acquire (struct.loadF Alloc.S "mu" "a");;
    let: "count" := ref (zero_val uint64T) in
    ForSlice byteT <> "b" (struct.loadF Alloc.S "bitmap" "a")
      ("count" <-[uint64T] ![uint64T] "count" + popCnt "b");;
    lock.release (struct.loadF Alloc.S "mu" "a");;
    ![uint64T] "count".
