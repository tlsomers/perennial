(* autogenerated from github.com/mit-pdos/goose-nfsd/twophase *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.mit_pdos.goose_nfsd.addr.
From Goose Require github_com.mit_pdos.goose_nfsd.buftxn.
From Goose Require github_com.mit_pdos.goose_nfsd.common.
From Goose Require github_com.mit_pdos.goose_nfsd.lockmap.
From Goose Require github_com.mit_pdos.goose_nfsd.txn.
From Goose Require github_com.mit_pdos.goose_nfsd.util.

Module TwoPhase.
  Definition S := struct.decl [
    "buftxn" :: struct.ptrT buftxn.BufTxn.S;
    "locks" :: struct.ptrT lockmap.LockMap.S;
    "acquired" :: slice.T uint64T
  ].
End TwoPhase.

(* Start a local transaction with no writes from a global Txn manager. *)
Definition Begin: val :=
  rec: "Begin" "txn" "l" :=
    let: "trans" := struct.new TwoPhase.S [
      "buftxn" ::= buftxn.Begin "txn";
      "locks" ::= "l";
      "acquired" ::= NewSlice uint64T #0
    ] in
    util.DPrintf #1 (#(str"tp Begin: %v
    ")) #();;
    "trans".

Definition TwoPhase__acquireNoCheck: val :=
  rec: "TwoPhase__acquireNoCheck" "twophase" "addr" :=
    let: "flatAddr" := addr.Addr__Flatid "addr" in
    lockmap.LockMap__Acquire (struct.loadF TwoPhase.S "locks" "twophase") "flatAddr";;
    struct.storeF TwoPhase.S "acquired" "twophase" (SliceAppend uint64T (struct.loadF TwoPhase.S "acquired" "twophase") "flatAddr").

Definition TwoPhase__isAlreadyAcquired: val :=
  rec: "TwoPhase__isAlreadyAcquired" "twophase" "addr" :=
    let: "flatAddr" := addr.Addr__Flatid "addr" in
    let: "already_acquired" := ref_to boolT #false in
    ForSlice uint64T <> "acq" (struct.loadF TwoPhase.S "acquired" "twophase")
      (if: ("flatAddr" = "acq")
      then "already_acquired" <-[boolT] #true
      else #());;
    ![boolT] "already_acquired".

Definition TwoPhase__Acquire: val :=
  rec: "TwoPhase__Acquire" "twophase" "addr" :=
    let: "already_acquired" := TwoPhase__isAlreadyAcquired "twophase" "addr" in
    (if: ~ "already_acquired"
    then TwoPhase__acquireNoCheck "twophase" "addr"
    else #()).

Definition TwoPhase__Release: val :=
  rec: "TwoPhase__Release" "twophase" :=
    let: "last_index" := slice.len (struct.loadF TwoPhase.S "acquired" "twophase") - #1 in
    lockmap.LockMap__Release (struct.loadF TwoPhase.S "locks" "twophase") (SliceGet uint64T (struct.loadF TwoPhase.S "acquired" "twophase") "last_index");;
    struct.storeF TwoPhase.S "acquired" "twophase" (SliceTake (struct.loadF TwoPhase.S "acquired" "twophase") "last_index").

Definition TwoPhase__ReleaseAll: val :=
  rec: "TwoPhase__ReleaseAll" "twophase" :=
    Skip;;
    (for: (λ: <>, slice.len (struct.loadF TwoPhase.S "acquired" "twophase") ≠ #0); (λ: <>, Skip) := λ: <>,
      TwoPhase__Release "twophase";;
      Continue).

Definition TwoPhase__readBufNoAcquire: val :=
  rec: "TwoPhase__readBufNoAcquire" "twophase" "addr" "sz" :=
    let: "s" := util.CloneByteSlice (struct.loadF buf.Buf.S "Data" (buftxn.BufTxn__ReadBuf (struct.loadF TwoPhase.S "buftxn" "twophase") "addr" "sz")) in
    "s".

Definition TwoPhase__ReadBuf: val :=
  rec: "TwoPhase__ReadBuf" "twophase" "addr" "sz" :=
    TwoPhase__Acquire "twophase" "addr";;
    TwoPhase__readBufNoAcquire "twophase" "addr" "sz".

(* OverWrite writes an object to addr *)
Definition TwoPhase__OverWrite: val :=
  rec: "TwoPhase__OverWrite" "twophase" "addr" "sz" "data" :=
    TwoPhase__Acquire "twophase" "addr";;
    buftxn.BufTxn__OverWrite (struct.loadF TwoPhase.S "buftxn" "twophase") "addr" "sz" "data".

(* NDirty reports an upper bound on the size of this transaction when committed.

   The caller cannot rely on any particular properties of this function for
   safety. *)
Definition TwoPhase__NDirty: val :=
  rec: "TwoPhase__NDirty" "twophase" :=
    buftxn.BufTxn__NDirty (struct.loadF TwoPhase.S "buftxn" "twophase").

(* LogSz returns 511 *)
Definition TwoPhase__LogSz: val :=
  rec: "TwoPhase__LogSz" "twophase" :=
    buftxn.BufTxn__LogSz (struct.loadF TwoPhase.S "buftxn" "twophase").

(* LogSzBytes returns 511*4096 *)
Definition TwoPhase__LogSzBytes: val :=
  rec: "TwoPhase__LogSzBytes" "twophase" :=
    buftxn.BufTxn__LogSzBytes (struct.loadF TwoPhase.S "buftxn" "twophase").

Definition TwoPhase__CommitNoRelease: val :=
  rec: "TwoPhase__CommitNoRelease" "twophase" :=
    util.DPrintf #1 (#(str"tp Commit %p
    ")) #();;
    buftxn.BufTxn__CommitWait (struct.loadF TwoPhase.S "buftxn" "twophase") #true.

Definition TwoPhase__Commit: val :=
  rec: "TwoPhase__Commit" "twophase" :=
    let: "ok" := TwoPhase__CommitNoRelease "twophase" in
    TwoPhase__ReleaseAll "twophase";;
    "ok".
