(* autogenerated from github.com/mit-pdos/gokv/simplepb/apps/kvee *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.simplepb.apps.eesm.
From Goose Require github_com.mit_pdos.gokv.simplepb.apps.kv64.
From Goose Require github_com.mit_pdos.gokv.simplepb.simplelog.

From Perennial.goose_lang Require Import ffi.grove_prelude.

(* clerk.go *)

Definition Clerk := struct.decl [
  "cl" :: ptrT
].

Definition MakeClerk: val :=
  rec: "MakeClerk" "confHost" :=
    struct.new Clerk [
      "cl" ::= eesm.MakeClerk "confHost"
    ].

Definition Clerk__Put: val :=
  rec: "Clerk__Put" "ck" "key" "val" :=
    let: "putArgs" := struct.new kv64.PutArgs [
      "Key" ::= "key";
      "Val" ::= "val"
    ] in
    (* log.Print("Running PUT RW") *)
    eesm.Clerk__ApplyExactlyOnce (struct.loadF Clerk "cl" "ck") (kv64.EncodePutArgs "putArgs");;
    #().

Definition Clerk__Get: val :=
  rec: "Clerk__Get" "ck" "key" :=
    (* log.Print("Running GET RO") *)
    eesm.Clerk__ApplyReadonly (struct.loadF Clerk "cl" "ck") (kv64.EncodeGetArgs "key").

(* server.go *)

Definition Start: val :=
  rec: "Start" "host" "fname" "confHost" :=
    pb.Server__Serve (simplelog.MakePbServer (eesm.MakeEEKVStateMachine (kv64.MakeKVStateMachine #())) "fname" "confHost") "host";;
    #().
