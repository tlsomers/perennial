(* autogenerated from github.com/mit-pdos/gokv/simplepb/apps/eesm *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.map_marshal.
From Goose Require github_com.mit_pdos.gokv.simplepb.simplelog.
From Goose Require github_com.tchajed.marshal.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition EEStateMachine := struct.decl [
  "lastSeq" :: mapT uint64T;
  "lastReply" :: mapT (slice.T byteT);
  "nextCID" :: uint64T;
  "sm" :: ptrT
].

Definition EEStateMachine__applyVolatile: val :=
  rec: "EEStateMachine__applyVolatile" "s" "op" :=
    let: "ret" := ref (zero_val (slice.T byteT)) in
    (if: (SliceGet byteT "op" #0 = #(U8 1))
    then
      struct.storeF EEStateMachine "nextCID" "s" (struct.loadF EEStateMachine "nextCID" "s" + #1);;
      "ret" <-[slice.T byteT] NewSliceWithCap byteT #0 #8;;
      "ret" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "ret") (struct.loadF EEStateMachine "nextCID" "s")
    else
      (if: (SliceGet byteT "op" #0 = #(U8 0))
      then
        let: "n" := slice.len "op" in
        "ret" <-[slice.T byteT] struct.loadF simplelog.InMemoryStateMachine "ApplyVolatile" (struct.loadF EEStateMachine "sm" "s") (SliceSubslice byteT "op" #1 "n")
      else Panic ("unexpected ee op type")));;
    ![slice.T byteT] "ret".

Definition EEStateMachine__getState: val :=
  rec: "EEStateMachine__getState" "s" :=
    let: "appState" := struct.loadF simplelog.InMemoryStateMachine "GetState" (struct.loadF EEStateMachine "sm" "s") #() in
    let: "enc" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (#8 + #8 * MapLen (struct.loadF EEStateMachine "lastSeq" "s") + slice.len "appState")) in
    "enc" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "enc") (struct.loadF EEStateMachine "nextCID" "s");;
    "enc" <-[slice.T byteT] map_marshal.EncodeMapU64ToU64 (struct.loadF EEStateMachine "lastSeq" "s");;
    "enc" <-[slice.T byteT] map_marshal.EncodeMapU64ToBytes (struct.loadF EEStateMachine "lastReply" "s");;
    "enc" <-[slice.T byteT] marshal.WriteBytes (![slice.T byteT] "enc") "appState";;
    ![slice.T byteT] "enc".

Definition EEStateMachine__setState: val :=
  rec: "EEStateMachine__setState" "s" "state" :=
    let: "enc" := ref_to (slice.T byteT) "state" in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    struct.storeF EEStateMachine "nextCID" "s" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := map_marshal.DecodeMapU64ToU64 (![slice.T byteT] "enc") in
    struct.storeF EEStateMachine "lastSeq" "s" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := map_marshal.DecodeMapU64ToBytes (![slice.T byteT] "enc") in
    struct.storeF EEStateMachine "lastReply" "s" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    struct.loadF simplelog.InMemoryStateMachine "SetState" (struct.loadF EEStateMachine "sm" "s") (![slice.T byteT] "enc");;
    #().

Definition MakeEEKVStateMachine: val :=
  rec: "MakeEEKVStateMachine" "sm" :=
    let: "s" := struct.alloc EEStateMachine (zero_val (struct.t EEStateMachine)) in
    struct.new simplelog.InMemoryStateMachine [
      "ApplyVolatile" ::= EEStateMachine__applyVolatile "s";
      "GetState" ::= EEStateMachine__getState "s";
      "SetState" ::= EEStateMachine__setState "s"
    ].

Definition MakeRequest: val :=
  rec: "MakeRequest" "req" :=
    let: "enc" := ref_to (slice.T byteT) (NewSlice byteT (#1 + slice.len "req")) in
    "enc" <-[slice.T byteT] marshal.WriteBytes (![slice.T byteT] "enc") (NewSlice byteT #1);;
    "enc" <-[slice.T byteT] marshal.WriteBytes (![slice.T byteT] "enc") "req";;
    ![slice.T byteT] "enc".

Definition GetCIDRequest: val :=
  rec: "GetCIDRequest" <> :=
    let: "v" := NewSlice byteT #1 in
    SliceSet byteT "v" #0 (#(U8 1));;
    "v".
