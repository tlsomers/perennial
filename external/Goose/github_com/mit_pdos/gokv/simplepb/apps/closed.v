(* autogenerated from github.com/mit-pdos/gokv/simplepb/apps/closed *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.bank.
From Goose Require github_com.mit_pdos.gokv.lockservice.
From Goose Require github_com.mit_pdos.gokv.simplepb.apps.kv.
From Goose Require github_com.mit_pdos.gokv.simplepb.config2.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition dconfigHost : expr := #11.

Definition dconfigHostPaxos : expr := #12.

Definition dr1 : expr := #1.

Definition dr2 : expr := #2.

Definition lconfigHost : expr := #111.

Definition lconfigHostPaxos : expr := #112.

Definition lr1 : expr := #101.

Definition lr2 : expr := #102.

Definition mk_lconfig_hosts: val :=
  rec: "mk_lconfig_hosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    SliceAppend uint64T (![slice.T uint64T] "configHosts") lconfigHost.

Definition mk_dconfig_hosts: val :=
  rec: "mk_dconfig_hosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    SliceAppend uint64T (![slice.T uint64T] "configHosts") dconfigHost.

Definition mk_lconfig_paxosHosts: val :=
  rec: "mk_lconfig_paxosHosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    SliceAppend uint64T (![slice.T uint64T] "configHosts") lconfigHostPaxos.

Definition mk_dconfig_paxosHosts: val :=
  rec: "mk_dconfig_paxosHosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    SliceAppend uint64T (![slice.T uint64T] "configHosts") dconfigHostPaxos.

Definition lconfig_main: val :=
  rec: "lconfig_main" "fname" :=
    let: "servers" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    "servers" <-[slice.T uint64T] (SliceAppend uint64T (![slice.T uint64T] "servers") lr1);;
    "servers" <-[slice.T uint64T] (SliceAppend uint64T (![slice.T uint64T] "servers") lr2);;
    config2.StartServer "fname" lconfigHost lconfigHostPaxos (mk_lconfig_paxosHosts #()) (![slice.T uint64T] "servers");;
    #().

Definition dconfig_main: val :=
  rec: "dconfig_main" "fname" :=
    let: "servers" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    "servers" <-[slice.T uint64T] (SliceAppend uint64T (![slice.T uint64T] "servers") dr1);;
    "servers" <-[slice.T uint64T] (SliceAppend uint64T (![slice.T uint64T] "servers") dr2);;
    config2.StartServer "fname" dconfigHost dconfigHostPaxos (mk_dconfig_paxosHosts #()) (![slice.T uint64T] "servers");;
    #().

Definition kv_replica_main: val :=
  rec: "kv_replica_main" "fname" "me" "configHost" :=
    let: "x" := ref (zero_val uint64T) in
    "x" <-[uint64T] #1;;
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    "configHosts" <-[slice.T uint64T] (SliceAppend uint64T (![slice.T uint64T] "configHosts") "configHost");;
    kv.Start "fname" "me" (![slice.T uint64T] "configHosts");;
    #().

Definition makeBankClerk: val :=
  rec: "makeBankClerk" <> :=
    let: "kvck" := kv.MakeKv (mk_dconfig_hosts #()) in
    let: "lck" := lockservice.MakeLockClerk (kv.MakeKv (mk_lconfig_hosts #())) in
    bank.MakeBankClerk "lck" "kvck" #(str"init") #(str"a1") #(str"a2").

Definition bank_transferer_main: val :=
  rec: "bank_transferer_main" <> :=
    let: "bck" := makeBankClerk #() in
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      bank.BankClerk__SimpleTransfer "bck";;
      Continue);;
    #().

Definition bank_auditor_main: val :=
  rec: "bank_auditor_main" <> :=
    let: "bck" := makeBankClerk #() in
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      bank.BankClerk__SimpleAudit "bck";;
      Continue);;
    #().
