(* autogenerated from github.com/mit-pdos/gokv/simplepb/admin *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.simplepb.config.
From Goose Require github_com.mit_pdos.gokv.simplepb.e.
From Goose Require github_com.mit_pdos.gokv.simplepb.pb.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition EnterNewConfig: val :=
  rec: "EnterNewConfig" "configHost" "servers" :=
    let: "configCk" := config.MakeClerk "configHost" in
    let: ("epoch", "oldServers") := config.Clerk__GetEpochAndConfig "configCk" in
    let: "oldClerk" := pb.MakeClerk (SliceGet uint64T "oldServers" (Data.randomUint64 #()) `rem` (slice.len "oldServers")) in
    let: "reply" := pb.Clerk__GetState "oldClerk" (struct.new pb.GetStateArgs [
      "Epoch" ::= "epoch"
    ]) in
    (if: struct.loadF pb.GetStateReply "Err" "reply" â‰  e.None
    then struct.loadF pb.GetStateReply "Err" "reply"
    else
      let: "clerks" := NewSlice ptrT (slice.len "servers") in
      ForSlice ptrT "i" <> "clerks"
        (SliceSet ptrT "clerks" "i" (pb.MakeClerk (SliceGet uint64T "servers" "i")));;
      let: "wg" := struct.alloc sync.WaitGroup (zero_val (struct.t sync.WaitGroup)) in
      ForSlice ptrT <> "clerk" "clerks"
        (sync.WaitGroup__Add "wg" #1;;
        let: "clerk" := "clerk" in
        Fork (pb.Clerk__SetState "clerk" (struct.new pb.SetStateArgs [
                "Epoch" ::= "epoch";
                "State" ::= struct.loadF pb.GetStateReply "State" "reply"
              ])));;
      sync.WaitGroup__Wait "wg";;
      config.Clerk__WriteConfig "configCk" "epoch" "servers";;
      pb.Clerk__BecomePrimary (SliceGet ptrT "clerks" #0) (struct.new pb.BecomePrimaryArgs [
        "Epoch" ::= "epoch";
        "Replicas" ::= "servers"
      ]);;
      e.None).
