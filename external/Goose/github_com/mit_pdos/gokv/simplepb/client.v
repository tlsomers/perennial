(* autogenerated from github.com/mit-pdos/gokv/simplepb/client *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.simplepb.config.
From Goose Require github_com.mit_pdos.gokv.simplepb.e.
From Goose Require github_com.mit_pdos.gokv.simplepb.state.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition Clerk := struct.decl [
  "confCk" :: ptrT;
  "primaryCk" :: ptrT
].

Definition Make: val :=
  rec: "Make" "confHost" :=
    let: "ck" := struct.alloc Clerk (zero_val (struct.t Clerk)) in
    struct.storeF Clerk "confCk" "ck" (config.MakeClerk "confHost");;
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "config" := config.Clerk__GetConfig (struct.loadF Clerk "confCk" "ck") in
      (if: (slice.len "config" = #0)
      then Continue
      else
        struct.storeF Clerk "primaryCk" "ck" (state.MakeClerk (SliceGet uint64T "config" #0));;
        Break));;
    "ck".

Definition Clerk__FetchAndAppend: val :=
  rec: "Clerk__FetchAndAppend" "ck" "key" "val" :=
    let: "ret" := ref (zero_val (slice.T byteT)) in
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "err" := ref (zero_val uint64T) in
      let: ("0_ret", "1_ret") := state.Clerk__FetchAndAppend (struct.loadF Clerk "primaryCk" "ck") "key" "val" in
      "err" <-[uint64T] "0_ret";;
      "ret" <-[slice.T byteT] "1_ret";;
      (if: (![uint64T] "err" = e.None)
      then
        grove_ffi.Sleep #100000000;;
        Break
      else
        (* log.Println("Error: ", err) *)
        let: "config" := config.Clerk__GetConfig (struct.loadF Clerk "confCk" "ck") in
        struct.storeF Clerk "primaryCk" "ck" (state.MakeClerk (SliceGet uint64T "config" #0));;
        grove_ffi.Sleep #100000000;;
        Continue));;
    ![slice.T byteT] "ret".
