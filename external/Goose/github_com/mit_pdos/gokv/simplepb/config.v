(* autogenerated from github.com/mit-pdos/gokv/simplepb/config *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.gokv.simplepb.e.
From Goose Require github_com.mit_pdos.gokv.urpc.
From Goose Require github_com.tchajed.marshal.

From Perennial.goose_lang Require Import ffi.grove_prelude.

(* client.go *)

Definition Clerk := struct.decl [
  "cl" :: ptrT
].

Definition MakeClerk: val :=
  rec: "MakeClerk" "host" :=
    struct.new Clerk [
      "cl" ::= urpc.MakeClient "host"
    ].

Definition Clerk__GetEpochAndConfig: val :=
  rec: "Clerk__GetEpochAndConfig" "ck" :=
    Panic "";;
    #().

Definition Clerk__WriteConfig: val :=
  rec: "Clerk__WriteConfig" "ck" "epoch" "config" :=
    Panic "";;
    #().

(* marshal.go *)

Definition EncodeConfig: val :=
  rec: "EncodeConfig" "config" :=
    let: "enc" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (#8 * slice.len "config")) in
    "enc" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "enc") (slice.len "config");;
    ForSlice uint64T <> "h" "config"
      ("enc" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "enc") "h");;
    #().

Definition DecodeConfig: val :=
  rec: "DecodeConfig" "enc_config" :=
    let: "enc" := ref_to (slice.T byteT) "enc_config" in
    let: "configLen" := ref (zero_val uint64T) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "configLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: "config" := NewSlice uint64T (![uint64T] "configLen") in
    ForSlice uint64T "i" <> "config"
      (let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
      SliceSet uint64T "config" "i" "0_ret";;
      "enc" <-[slice.T byteT] "1_ret");;
    "config".

(* server.go *)

Definition Server := struct.decl [
  "mu" :: ptrT;
  "epoch" :: uint64T;
  "config" :: slice.T uint64T
].

Definition Server__GetEpochAndConfig: val :=
  rec: "Server__GetEpochAndConfig" "s" "args" "reply" :=
    #().

Definition Server__WriteConfig: val :=
  rec: "Server__WriteConfig" "s" "args" "reply" :=
    lock.acquire (struct.loadF Server "mu" "s");;
    let: ("epoch", "enc") := marshal.ReadInt "args" in
    (if: "epoch" < struct.loadF Server "epoch" "s"
    then
      lock.release (struct.loadF Server "mu" "s");;
      #()
    else
      struct.storeF Server "config" "s" (DecodeConfig "enc");;
      lock.release (struct.loadF Server "mu" "s");;
      #()).

Definition MakeServer: val :=
  rec: "MakeServer" <> :=
    let: "s" := struct.alloc Server (zero_val (struct.t Server)) in
    struct.storeF Server "mu" "s" (lock.new #());;
    "s".

Definition Server__Serve: val :=
  rec: "Server__Serve" "s" :=
    #().
