(* autogenerated from github.com/mit-pdos/gokv/asyncfile *)
From Perennial.goose_lang Require Import prelude.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition File := struct.decl [
  "mu" :: ptrT;
  "data" :: slice.T byteT;
  "filename" :: stringT;
  "index" :: uint64T;
  "indexCond" :: ptrT;
  "durableIndex" :: uint64T;
  "durableIndexCond" :: ptrT;
  "closeRequested" :: boolT;
  "closed" :: boolT;
  "closedCond" :: ptrT
].

Definition File__wait: val :=
  rec: "File__wait" "s" "index" :=
    lock.acquire (struct.loadF File "mu" "s");;
    Skip;;
    (for: (λ: <>, (struct.loadF File "durableIndex" "s") < "index"); (λ: <>, Skip) := λ: <>,
      lock.condWait (struct.loadF File "durableIndexCond" "s");;
      Continue);;
    lock.release (struct.loadF File "mu" "s");;
    #().

Definition File__AsyncWrite: val :=
  rec: "File__AsyncWrite" "s" "data" :=
    lock.acquire (struct.loadF File "mu" "s");;
    struct.storeF File "data" "s" "data";;
    struct.storeF File "index" "s" ((struct.loadF File "index" "s") + #1);;
    let: "index" := struct.loadF File "index" "s" in
    lock.release (struct.loadF File "mu" "s");;
    (λ: <>,
      File__wait "s" "index";;
      #()
      ).

Definition File__flushThread: val :=
  rec: "File__flushThread" "s" :=
    lock.acquire (struct.loadF File "mu" "s");;
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      (if: struct.loadF File "closeRequested" "s"
      then
        grove_ffi.FileWrite (struct.loadF File "filename" "s") (struct.loadF File "data" "s");;
        struct.storeF File "durableIndex" "s" (struct.loadF File "index" "s");;
        lock.condBroadcast (struct.loadF File "durableIndexCond" "s");;
        struct.storeF File "closed" "s" #true;;
        lock.release (struct.loadF File "mu" "s");;
        lock.condSignal (struct.loadF File "closedCond" "s");;
        Break
      else
        (if: (struct.loadF File "durableIndex" "s") ≥ (struct.loadF File "index" "s")
        then
          lock.condWait (struct.loadF File "indexCond" "s");;
          Continue
        else
          let: "index" := struct.loadF File "index" "s" in
          let: "data" := struct.loadF File "data" "s" in
          lock.release (struct.loadF File "mu" "s");;
          grove_ffi.FileWrite (struct.loadF File "filename" "s") "data";;
          lock.acquire (struct.loadF File "mu" "s");;
          struct.storeF File "durableIndex" "s" "index";;
          lock.condBroadcast (struct.loadF File "durableIndexCond" "s");;
          Continue)));;
    #().

Definition File__Close: val :=
  rec: "File__Close" "s" :=
    lock.acquire (struct.loadF File "mu" "s");;
    struct.storeF File "closeRequested" "s" #true;;
    lock.condSignal (struct.loadF File "indexCond" "s");;
    Skip;;
    (for: (λ: <>, (~ (struct.loadF File "closed" "s"))); (λ: <>, Skip) := λ: <>,
      lock.condWait (struct.loadF File "closedCond" "s");;
      Continue);;
    lock.release (struct.loadF File "mu" "s");;
    #().

(* returns the state, then the File object *)
Definition MakeFile: val :=
  rec: "MakeFile" "filename" :=
    let: "s" := struct.alloc File (zero_val (struct.t File)) in
    struct.storeF File "mu" "s" (lock.new #());;
    struct.storeF File "indexCond" "s" (lock.newCond (struct.loadF File "mu" "s"));;
    struct.storeF File "durableIndexCond" "s" (lock.newCond (struct.loadF File "mu" "s"));;
    struct.storeF File "closedCond" "s" (lock.newCond (struct.loadF File "mu" "s"));;
    struct.storeF File "filename" "s" "filename";;
    struct.storeF File "data" "s" (grove_ffi.FileRead "filename");;
    struct.storeF File "index" "s" #0;;
    struct.storeF File "durableIndex" "s" #0;;
    struct.storeF File "closed" "s" #false;;
    struct.storeF File "closeRequested" "s" #false;;
    Fork (File__flushThread "s");;
    (struct.loadF File "data" "s", "s").
