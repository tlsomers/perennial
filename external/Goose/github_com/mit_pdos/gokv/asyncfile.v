(* autogenerated from github.com/mit-pdos/gokv/asyncfile *)
From Perennial.goose_lang Require Import new.prelude.
From Goose Require github_com.goose_lang.std.
From Goose Require github_com.mit_pdos.gokv.grove_ffi.
From Goose Require sync.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition AsyncFile := struct.decl [
  "mu" :: ptrT;
  "data" :: slice.T byteT;
  "filename" :: stringT;
  "index" :: uint64T;
  "indexCond" :: ptrT;
  "durableIndex" :: uint64T;
  "durableIndexCond" :: ptrT;
  "closeRequested" :: boolT;
  "closed" :: boolT;
  "closedCond" :: ptrT
].

Definition AsyncFile__wait: val :=
  rec: "AsyncFile__wait" "s" "index" :=
    exception_do (let: "index" := ref_to uint64T "index" in
    let: "s" := ref_to ptrT "s" in
    do:  sync.Mutex__Lock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
    (for: (λ: <>, (struct.loadF AsyncFile "durableIndex" (![ptrT] "s")) < (![uint64T] "index")); (λ: <>, Skip) := λ: <>,
      do:  sync.Cond__Wait (struct.loadF AsyncFile "durableIndexCond" (![ptrT] "s"));;;
      do:  #())).

Definition AsyncFile__Write: val :=
  rec: "AsyncFile__Write" "s" "data" :=
    exception_do (let: "data" := ref_to (slice.T byteT) "data" in
    let: "s" := ref_to ptrT "s" in
    do:  sync.Mutex__Lock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
    let: "$a0" := ![slice.T byteT] "data" in
    do:  struct.storeF AsyncFile "data" (![ptrT] "s") "$a0";;;
    let: "$a0" := std.SumAssumeNoOverflow (struct.loadF AsyncFile "index" (![ptrT] "s")) #1 in
    do:  struct.storeF AsyncFile "index" (![ptrT] "s") "$a0";;;
    let: "index" := ref_zero uint64T in
    let: "$a0" := struct.loadF AsyncFile "index" (![ptrT] "s") in
    do:  "index" <-[uint64T] "$a0";;;
    do:  sync.Cond__Signal (struct.loadF AsyncFile "indexCond" (![ptrT] "s"));;;
    do:  sync.Mutex__Unlock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
    return: ((λ: <>,
       do:  AsyncFile__wait (![ptrT] "s") (![uint64T] "index");;;
       do:  #()
       ));;;
    do:  #()).

Definition AsyncFile__flushThread: val :=
  rec: "AsyncFile__flushThread" "s" :=
    exception_do (let: "s" := ref_to ptrT "s" in
    do:  sync.Mutex__Lock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      (if: struct.loadF AsyncFile "closeRequested" (![ptrT] "s")
      then
        do:  grove_ffi.FileWrite (struct.loadF AsyncFile "filename" (![ptrT] "s")) (struct.loadF AsyncFile "data" (![ptrT] "s"));;;
        let: "$a0" := struct.loadF AsyncFile "index" (![ptrT] "s") in
        do:  struct.storeF AsyncFile "durableIndex" (![ptrT] "s") "$a0";;;
        do:  sync.Cond__Broadcast (struct.loadF AsyncFile "durableIndexCond" (![ptrT] "s"));;;
        let: "$a0" := #true in
        do:  struct.storeF AsyncFile "closed" (![ptrT] "s") "$a0";;;
        do:  sync.Mutex__Unlock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
        do:  sync.Cond__Signal (struct.loadF AsyncFile "closedCond" (![ptrT] "s"));;;
        break: #();;;
        do:  #()
      else #());;;
      (if: (struct.loadF AsyncFile "durableIndex" (![ptrT] "s")) ≥ (struct.loadF AsyncFile "index" (![ptrT] "s"))
      then
        do:  sync.Cond__Wait (struct.loadF AsyncFile "indexCond" (![ptrT] "s"));;;
        continue: #();;;
        do:  #()
      else #());;;
      let: "index" := ref_zero uint64T in
      let: "$a0" := struct.loadF AsyncFile "index" (![ptrT] "s") in
      do:  "index" <-[uint64T] "$a0";;;
      let: "data" := ref_zero (slice.T byteT) in
      let: "$a0" := struct.loadF AsyncFile "data" (![ptrT] "s") in
      do:  "data" <-[slice.T byteT] "$a0";;;
      do:  sync.Mutex__Unlock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
      do:  grove_ffi.FileWrite (struct.loadF AsyncFile "filename" (![ptrT] "s")) (![slice.T byteT] "data");;;
      do:  sync.Mutex__Lock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
      let: "$a0" := ![uint64T] "index" in
      do:  struct.storeF AsyncFile "durableIndex" (![ptrT] "s") "$a0";;;
      do:  sync.Cond__Broadcast (struct.loadF AsyncFile "durableIndexCond" (![ptrT] "s"));;;
      do:  #())).

Definition AsyncFile__Close: val :=
  rec: "AsyncFile__Close" "s" :=
    exception_do (let: "s" := ref_to ptrT "s" in
    do:  sync.Mutex__Lock (struct.loadF AsyncFile "mu" (![ptrT] "s"));;;
    let: "$a0" := #true in
    do:  struct.storeF AsyncFile "closeRequested" (![ptrT] "s") "$a0";;;
    do:  sync.Cond__Signal (struct.loadF AsyncFile "indexCond" (![ptrT] "s"));;;
    (for: (λ: <>, (~ (struct.loadF AsyncFile "closed" (![ptrT] "s")))); (λ: <>, Skip) := λ: <>,
      do:  sync.Cond__Wait (struct.loadF AsyncFile "closedCond" (![ptrT] "s"));;;
      do:  #())).

(* returns the state, then the File object *)
Definition MakeAsyncFile: val :=
  rec: "MakeAsyncFile" "filename" :=
    exception_do (let: "filename" := ref_to stringT "filename" in
    let: "s" := ref_zero ptrT in
    let: "$a0" := struct.alloc AsyncFile (zero_val (struct.t AsyncFile)) in
    do:  "s" <-[ptrT] "$a0";;;
    let: "$a0" := struct.alloc sync.Mutex (zero_val (struct.t sync.Mutex)) in
    do:  struct.storeF AsyncFile "mu" (![ptrT] "s") "$a0";;;
    let: "$a0" := sync.NewCond (struct.loadF AsyncFile "mu" (![ptrT] "s")) in
    do:  struct.storeF AsyncFile "indexCond" (![ptrT] "s") "$a0";;;
    let: "$a0" := sync.NewCond (struct.loadF AsyncFile "mu" (![ptrT] "s")) in
    do:  struct.storeF AsyncFile "durableIndexCond" (![ptrT] "s") "$a0";;;
    let: "$a0" := sync.NewCond (struct.loadF AsyncFile "mu" (![ptrT] "s")) in
    do:  struct.storeF AsyncFile "closedCond" (![ptrT] "s") "$a0";;;
    let: "$a0" := ![stringT] "filename" in
    do:  struct.storeF AsyncFile "filename" (![ptrT] "s") "$a0";;;
    let: "$a0" := grove_ffi.FileRead (![stringT] "filename") in
    do:  struct.storeF AsyncFile "data" (![ptrT] "s") "$a0";;;
    let: "$a0" := #0 in
    do:  struct.storeF AsyncFile "index" (![ptrT] "s") "$a0";;;
    let: "$a0" := #0 in
    do:  struct.storeF AsyncFile "durableIndex" (![ptrT] "s") "$a0";;;
    let: "$a0" := #false in
    do:  struct.storeF AsyncFile "closed" (![ptrT] "s") "$a0";;;
    let: "$a0" := #false in
    do:  struct.storeF AsyncFile "closeRequested" (![ptrT] "s") "$a0";;;
    let: "data" := ref_zero (slice.T byteT) in
    let: "$a0" := struct.loadF AsyncFile "data" (![ptrT] "s") in
    do:  "data" <-[slice.T byteT] "$a0";;;
    do:  Fork (do:  AsyncFile__flushThread (![ptrT] "s");;;
          do:  #());;;
    return: (![slice.T byteT] "data", ![ptrT] "s");;;
    do:  #()).
