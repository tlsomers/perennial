(* autogenerated from github.com/mit-pdos/gokv/leasekv *)
From Perennial.goose_lang Require Import prelude.

From Perennial.goose_lang Require Import ffi.grove_prelude.

(* clerk.go *)

Definition Kv := struct.decl [
  "Put" :: (stringT -> stringT -> unitT)%ht;
  "Get" :: (stringT -> stringT)%ht;
  "ConditionalPut" :: (stringT -> stringT -> stringT -> stringT)%ht
].

Definition cacheValue := struct.decl [
  "v" :: stringT;
  "l" :: uint64T
].

Definition LeaseKv := struct.decl [
  "kv" :: ptrT;
  "cache" :: mapT (struct.t cacheValue)
].

Definition DecodeValue: val :=
  rec: "DecodeValue" "v" :=
    Panic "TODO";;
    #().

Definition EncodeValue: val :=
  rec: "EncodeValue" "c" :=
    Panic "TODO";;
    #().

Definition max: val :=
  rec: "max" "a" "b" :=
    (if: "a" > "b"
    then "a"
    else "b").

Definition LeaseKv__Get: val :=
  rec: "LeaseKv__Get" "k" "key" :=
    let: ("cv", "ok") := MapGet (struct.loadF LeaseKv "cache" "k") "key" in
    let: ("low", <>) := grove_ffi.GetTimeRange #() in
    (if: "ok" && ((struct.get cacheValue "l" "cv") < "low")
    then struct.get cacheValue "v" (Fst (MapGet (struct.loadF LeaseKv "cache" "k") "key"))
    else
      MapDelete (struct.loadF LeaseKv "cache" "k") "key";;
      struct.get cacheValue "v" (DecodeValue ((struct.loadF Kv "Get" (struct.loadF LeaseKv "kv" "k")) "key"))).

Definition LeaseKv__GetAndCache: val :=
  rec: "LeaseKv__GetAndCache" "k" "key" "cachetime" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "enc" := (struct.loadF Kv "Get" (struct.loadF LeaseKv "kv" "k")) "key" in
      let: "old" := DecodeValue "enc" in
      let: (<>, "latest") := grove_ffi.GetTimeRange #() in
      let: "newLeaseExpiration" := ref_to uint64T (max ("latest" + "cachetime") (struct.get cacheValue "l" "old")) in
      let: "resp" := (struct.loadF Kv "ConditionalPut" (struct.loadF LeaseKv "kv" "k")) "key" "enc" (EncodeValue (struct.mk cacheValue [
        "v" ::= struct.get cacheValue "v" "old";
        "l" ::= ![uint64T] "newLeaseExpiration"
      ])) in
      (if: "resp" = #(str"ok")
      then
        MapInsert (struct.loadF LeaseKv "cache" "k") "key" (struct.mk cacheValue [
          "v" ::= struct.get cacheValue "v" "old";
          "l" ::= ![uint64T] "newLeaseExpiration"
        ]);;
        Break
      else Continue));;
    struct.get cacheValue "v" (Fst (MapGet (struct.loadF LeaseKv "cache" "k") "key")).

Definition LeaseKv__Put: val :=
  rec: "LeaseKv__Put" "k" "key" "val" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "enc" := (struct.loadF Kv "Get" (struct.loadF LeaseKv "kv" "k")) "key" in
      let: "leaseExpiration" := struct.get cacheValue "l" (DecodeValue "enc") in
      let: ("earliest", <>) := grove_ffi.GetTimeRange #() in
      (if: "leaseExpiration" > "earliest"
      then Continue
      else
        let: "resp" := (struct.loadF Kv "ConditionalPut" (struct.loadF LeaseKv "kv" "k")) "key" "enc" (EncodeValue (struct.mk cacheValue [
          "v" ::= "val";
          "l" ::= #0
        ])) in
        (if: "resp" = #(str"ok")
        then Break
        else Continue)));;
    #().

(* server.go *)

Definition LeaseKvServer := struct.decl [
  "kvs" :: mapT stringT;
  "leases" :: mapT uint64T;
  "stagedKvs" :: mapT stringT
].

Definition LeaseKvServer__resolveStagedValue: val :=
  rec: "LeaseKvServer__resolveStagedValue" "s" "key" :=
    let: ("stagedVal", "isStaged") := MapGet (struct.loadF LeaseKvServer "stagedKvs" "s") "key" in
    (if: "isStaged"
    then
      let: ("earliest", "latest") := grove_ffi.GetTimeRange #() in
      (if: (Fst (MapGet (struct.loadF LeaseKvServer "leases" "s") "key")) ≥ "latest"
      then
        MapInsert (struct.loadF LeaseKvServer "kvs" "s") "key" "stagedVal";;
        MapDelete (struct.loadF LeaseKvServer "leases" "s") "key";;
        MapDelete (struct.loadF LeaseKvServer "stagedKvs" "s") "key";;
        #()
      else
        (if: (Fst (MapGet (struct.loadF LeaseKvServer "leases" "s") "key")) ≤ "earliest"
        then #()
        else
          Panic "TODO: wait";;
          #()))
    else #()).

Definition LeaseKvServer__Get: val :=
  rec: "LeaseKvServer__Get" "s" "key" :=
    LeaseKvServer__resolveStagedValue "s" "key";;
    Fst (MapGet (struct.loadF LeaseKvServer "kvs" "s") "key").

Definition LeaseKvServer__GetAndCache: val :=
  rec: "LeaseKvServer__GetAndCache" "s" "key" "cachetime" :=
    let: (<>, "latest") := grove_ffi.GetTimeRange #() in
    let: "newLeaseExpiration" := "latest" + "cachetime" in
    let: ("leaseExpiration", "ok") := MapGet (struct.loadF LeaseKvServer "leases" "s") "key" in
    (if: "ok" && ("newLeaseExpiration" < "leaseExpiration")
    then (Fst (MapGet (struct.loadF LeaseKvServer "kvs" "s") "key"), "leaseExpiration")
    else
      MapInsert (struct.loadF LeaseKvServer "leases" "s") "key" "newLeaseExpiration";;
      (Fst (MapGet (struct.loadF LeaseKvServer "kvs" "s") "key"), "newLeaseExpiration")).

Definition LeaseKvServer__Put: val :=
  rec: "LeaseKvServer__Put" "s" "key" "val" :=
    Panic "TODO";;
    #().
