(* autogenerated from github.com/mit-pdos/gokv/map_string_marshal *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition EncodeMapStringToBytes: val :=
  rec: "EncodeMapStringToBytes" "kvs" :=
    let: "enc" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (MapLen "kvs"));;
    MapIter "kvs" (λ: "k" "v",
      let: "kb" := StringToBytes "k" in
      "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "kb"));;
      "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "kb");;
      "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "v"));;
      "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "v"));;
    ![slice.T byteT] "enc".

Definition DecodeMapStringToBytes: val :=
  rec: "DecodeMapStringToBytes" "enc_in" :=
    let: "enc" := ref_to (slice.T byteT) "enc_in" in
    let: "kvs" := NewMap stringT (slice.T byteT) #() in
    let: ("numEntries", "enc") := marshal.ReadInt (![slice.T byteT] "enc") in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, (![uint64T] "i") < "numEntries"); (λ: <>, "i" <-[uint64T] ((![uint64T] "i") + #1)) := λ: <>,
      let: "keyLen" := ref (zero_val uint64T) in
      let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
      "keyLen" <-[uint64T] "0_ret";;
      "enc" <-[slice.T byteT] "1_ret";;
      let: "key" := NewSlice byteT (![uint64T] "keyLen") in
      SliceCopy byteT "key" (SliceTake (![slice.T byteT] "enc") (![uint64T] "keyLen"));;
      "enc" <-[slice.T byteT] (SliceSkip byteT (![slice.T byteT] "enc") (![uint64T] "keyLen"));;
      let: "valLen" := ref (zero_val uint64T) in
      let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
      "valLen" <-[uint64T] "0_ret";;
      "enc" <-[slice.T byteT] "1_ret";;
      let: "val" := NewSlice byteT (![uint64T] "valLen") in
      SliceCopy byteT "val" (SliceTake (![slice.T byteT] "enc") (![uint64T] "valLen"));;
      "enc" <-[slice.T byteT] (SliceSkip byteT (![slice.T byteT] "enc") (![uint64T] "valLen"));;
      MapInsert "kvs" (StringFromBytes "key") "val";;
      Continue);;
    "kvs".

Definition EncodeStringMap: val :=
  rec: "EncodeStringMap" "kvs" :=
    let: "enc" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (MapLen "kvs"));;
    MapIter "kvs" (λ: "k" "v",
      let: "kb" := StringToBytes "k" in
      "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "kb"));;
      "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "kb");;
      "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (StringLength "v"));;
      "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") (StringToBytes "v")));;
    ![slice.T byteT] "enc".

Definition DecodeStringMap: val :=
  rec: "DecodeStringMap" "enc_in" :=
    let: "enc" := ref_to (slice.T byteT) "enc_in" in
    let: "kvs" := NewMap stringT stringT #() in
    let: ("numEntries", "enc") := marshal.ReadInt (![slice.T byteT] "enc") in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, (![uint64T] "i") < "numEntries"); (λ: <>, "i" <-[uint64T] ((![uint64T] "i") + #1)) := λ: <>,
      let: "keyLen" := ref (zero_val uint64T) in
      let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
      "keyLen" <-[uint64T] "0_ret";;
      "enc" <-[slice.T byteT] "1_ret";;
      let: "key" := NewSlice byteT (![uint64T] "keyLen") in
      SliceCopy byteT "key" (SliceTake (![slice.T byteT] "enc") (![uint64T] "keyLen"));;
      "enc" <-[slice.T byteT] (SliceSkip byteT (![slice.T byteT] "enc") (![uint64T] "keyLen"));;
      let: "valLen" := ref (zero_val uint64T) in
      let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
      "valLen" <-[uint64T] "0_ret";;
      "enc" <-[slice.T byteT] "1_ret";;
      let: "val" := NewSlice byteT (![uint64T] "valLen") in
      SliceCopy byteT "val" (SliceTake (![slice.T byteT] "enc") (![uint64T] "valLen"));;
      "enc" <-[slice.T byteT] (SliceSkip byteT (![slice.T byteT] "enc") (![uint64T] "valLen"));;
      MapInsert "kvs" (StringFromBytes "key") (StringFromBytes "val");;
      Continue);;
    "kvs".

End code.
