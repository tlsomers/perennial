(* autogenerated from github.com/mit-pdos/gokv/minlease *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.goose_lang.std.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition RPC_GET : expr := #0.

Definition RPC_PUT : expr := #1.

Definition Server := struct.decl [
  "mu" :: ptrT;
  "val" :: uint64T;
  "leaseExpiration" :: uint64T
].

(* return true iff successful *)
Definition Server__TryLocalIncrement: val :=
  rec: "Server__TryLocalIncrement" "s" :=
    lock.acquire (struct.loadF Server "mu" "s");;
    let: (<>, "h") := grove_ffi.GetTimeRange #() in
    (if: "h" ≥ (struct.loadF Server "leaseExpiration" "s")
    then
      lock.release (struct.loadF Server "mu" "s");;
      #false
    else
      struct.storeF Server "val" "s" (std.SumAssumeNoOverflow (struct.loadF Server "val" "s") #1);;
      lock.release (struct.loadF Server "mu" "s");;
      #true).

Definition Server__Put: val :=
  rec: "Server__Put" "s" "val" :=
    lock.acquire (struct.loadF Server "mu" "s");;
    struct.storeF Server "val" "s" "val";;
    lock.release (struct.loadF Server "mu" "s");;
    #().

Definition Server__Get: val :=
  rec: "Server__Get" "s" :=
    lock.acquire (struct.loadF Server "mu" "s");;
    let: "v" := struct.loadF Server "val" "s" in
    lock.release (struct.loadF Server "mu" "s");;
    "v".

Definition StartServer: val :=
  rec: "StartServer" <> :=
    let: "s" := struct.alloc Server (zero_val (struct.t Server)) in
    struct.storeF Server "mu" "s" (lock.new #());;
    struct.storeF Server "val" "s" #0;;
    struct.storeF Server "leaseExpiration" "s" #10;;
    Fork (Skip;;
          (for: (λ: <>, Server__TryLocalIncrement "s"); (λ: <>, Skip) := λ: <>,
            Continue));;
    "s".

Definition client: val :=
  rec: "client" "s" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: ("l", <>) := grove_ffi.GetTimeRange #() in
      (if: "l" > (struct.loadF Server "leaseExpiration" "s")
      then Break
      else
        time.Sleep ((struct.loadF Server "leaseExpiration" "s") - "l");;
        Continue));;
    let: "v" := Server__Get "s" in
    let: "newv" := std.SumAssumeNoOverflow "v" #1 in
    Server__Put "s" "newv";;
    let: "v2" := Server__Get "s" in
    control.impl.Assert ("v2" = "newv");;
    #().

Definition main: val :=
  rec: "main" <> :=
    let: "s" := StartServer #() in
    client "s";;
    #().
