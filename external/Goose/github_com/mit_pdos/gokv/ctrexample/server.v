(* autogenerated from github.com/mit-pdos/gokv/ctrexample/server *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.grove_prelude.

From Goose Require github_com.mit_pdos.gokv.urpc.rpc.

Definition CtrServer := struct.decl [
  "mu" :: ptrT;
  "val" :: uint64T;
  "filename" :: stringT
].

(* requires lock to be held *)
Definition CtrServer__MakeDurable: val :=
  rec: "CtrServer__MakeDurable" "s" :=
    let: "a" := NewSlice byteT #8 in
    UInt64Put "a" (struct.loadF CtrServer "val" "s");;
    grove_ffi.Write (struct.loadF CtrServer "filename" "s") "a";;
    #().

Definition CtrServer__FetchAndIncrement: val :=
  rec: "CtrServer__FetchAndIncrement" "s" :=
    lock.acquire (struct.loadF CtrServer "mu" "s");;
    let: "ret" := struct.loadF CtrServer "val" "s" in
    struct.storeF CtrServer "val" "s" (struct.loadF CtrServer "val" "s" + #1);;
    CtrServer__MakeDurable "s";;
    lock.release (struct.loadF CtrServer "mu" "s");;
    "ret".

(* the boot/main() function for the server *)
Definition main: val :=
  rec: "main" <> :=
    let: "me" := #53021371269120 in
    let: "s" := struct.alloc CtrServer (zero_val (struct.t CtrServer)) in
    struct.storeF CtrServer "mu" "s" (lock.new #());;
    struct.storeF CtrServer "filename" "s" #(str"ctr");;
    let: "a" := grove_ffi.Read (struct.loadF CtrServer "filename" "s") in
    (if: (slice.len "a" = #0)
    then struct.storeF CtrServer "val" "s" #0
    else struct.storeF CtrServer "val" "s" (UInt64Get "a"));;
    let: "handlers" := NewMap ((slice.T byteT -> ptrT -> unitT)%ht) #() in
    MapInsert "handlers" #0 (Î»: "args" "reply",
      let: "v" := CtrServer__FetchAndIncrement "s" in
      "reply" <-[slice.T byteT] NewSlice byteT #8;;
      UInt64Put (![slice.T byteT] "reply") "v";;
      #()
      );;
    let: "rs" := rpc.MakeRPCServer "handlers" in
    rpc.RPCServer__Serve "rs" "me" #1;;
    #().
