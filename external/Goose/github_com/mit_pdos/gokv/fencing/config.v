(* autogenerated from github.com/mit-pdos/gokv/fencing/config *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.grove_prelude.

From Goose Require github_com.mit_pdos.gokv.urpc.rpc.
From Goose Require github_com.tchajed.marshal.

(* client.go *)

Definition RPC_SET : expr := #0.

Definition RPC_GET : expr := #1.

Definition Clerk := struct.decl [
  "cl" :: ptrT
].

Definition Clerk__Set: val :=
  rec: "Clerk__Set" "ck" "newFrontend" :=
    let: "enc" := marshal.NewEnc #8 in
    marshal.Enc__PutInt "enc" "newFrontend";;
    let: "reply_ptr" := ref (zero_val (slice.T byteT)) in
    let: "err" := rpc.RPCClient__Call (struct.loadF Clerk "cl" "ck") RPC_SET (marshal.Enc__Finish "enc") "reply_ptr" #100 in
    (if: "err" ≠ #0
    then Panic ("config: client failed to run RPC on config server")
    else #());;
    let: "dec" := marshal.NewDec (![slice.T byteT] "reply_ptr") in
    marshal.Dec__GetInt "dec".

Definition Clerk__Get: val :=
  rec: "Clerk__Get" "ck" :=
    let: "reply_ptr" := ref (zero_val (slice.T byteT)) in
    let: "err" := rpc.RPCClient__Call (struct.loadF Clerk "cl" "ck") RPC_SET (NewSlice byteT #0) "reply_ptr" #100 in
    (if: "err" ≠ #0
    then Panic ("config: client failed to run RPC on config server")
    else #());;
    let: "dec" := marshal.NewDec (![slice.T byteT] "reply_ptr") in
    marshal.Dec__GetInt "dec".

Definition MakeClerk: val :=
  rec: "MakeClerk" "host" :=
    let: "ck" := struct.alloc Clerk (zero_val (struct.t Clerk)) in
    struct.storeF Clerk "cl" "ck" (rpc.MakeRPCClient "host");;
    "ck".

(* server.go *)

Definition Server := struct.decl [
  "mu" :: ptrT;
  "data" :: uint64T;
  "currentEpoch" :: uint64T
].

Definition Server__Set: val :=
  rec: "Server__Set" "s" "newFrontend" :=
    lock.acquire (struct.loadF Server "mu" "s");;
    struct.storeF Server "data" "s" "newFrontend";;
    struct.storeF Server "currentEpoch" "s" (struct.loadF Server "currentEpoch" "s" + #1);;
    let: "ret" := struct.loadF Server "currentEpoch" "s" in
    lock.release (struct.loadF Server "mu" "s");;
    "ret".

(* XXX: don't need to send fencing token here, because client won't need it *)
Definition Server__Get: val :=
  rec: "Server__Get" "s" :=
    lock.acquire (struct.loadF Server "mu" "s");;
    let: "ret" := struct.loadF Server "data" "s" in
    lock.release (struct.loadF Server "mu" "s");;
    "ret".

Definition StartServer: val :=
  rec: "StartServer" "me" :=
    let: "s" := struct.alloc Server (zero_val (struct.t Server)) in
    struct.storeF Server "data" "s" #0;;
    struct.storeF Server "currentEpoch" "s" #0;;
    let: "handlers" := NewMap ((slice.T byteT -> ptrT -> unitT)%ht) #() in
    MapInsert "handlers" RPC_SET (λ: "args" "reply",
      let: "dec" := marshal.NewDec "args" in
      let: "enc" := marshal.NewEnc #8 in
      marshal.Enc__PutInt "enc" (Server__Set "s" (marshal.Dec__GetInt "dec"));;
      "reply" <-[slice.T byteT] marshal.Enc__Finish "enc";;
      #()
      );;
    MapInsert "handlers" RPC_GET (λ: "args" "reply",
      let: "enc" := marshal.NewEnc #8 in
      marshal.Enc__PutInt "enc" (Server__Get "s");;
      "reply" <-[slice.T byteT] marshal.Enc__Finish "enc";;
      #()
      );;
    let: "r" := rpc.MakeRPCServer "handlers" in
    rpc.RPCServer__Serve "r" "me" #1;;
    #().
