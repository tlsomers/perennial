(* autogenerated from github.com/mit-pdos/perennial-examples/dir *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.mit_pdos.perennial_examples.alloc.
From Goose Require github_com.mit_pdos.perennial_examples.inode.

Definition NumInodes : expr := #5.

Module Dir.
  Definition S := struct.decl [
    "d" :: disk.Disk;
    "allocator" :: struct.ptrT alloc.Allocator.S;
    "inodes" :: slice.T (struct.ptrT inode.Inode.S)
  ].
End Dir.

Definition openInodes: val :=
  rec: "openInodes" "d" :=
    let: "inodes" := ref (zero_val (slice.T (refT (struct.t inode.Inode.S)))) in
    let: "addr" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "addr" < NumInodes); (λ: <>, "addr" <-[uint64T] ![uint64T] "addr" + #1) := λ: <>,
      "inodes" <-[slice.T (refT (struct.t inode.Inode.S))] SliceAppend (refT (struct.t inode.Inode.S)) (![slice.T (refT (struct.t inode.Inode.S))] "inodes") (inode.Open "d" (![uint64T] "addr"));;
      Continue);;
    ![slice.T (refT (struct.t inode.Inode.S))] "inodes".

Definition deleteInodeBlocks: val :=
  rec: "deleteInodeBlocks" "numInodes" "free" :=
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "i" < "numInodes"); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      MapDelete "free" (![uint64T] "i");;
      Continue).

Definition OpenDir: val :=
  rec: "OpenDir" "d" "free" :=
    let: "inodes" := openInodes "d" in
    ForSlice (refT (struct.t inode.Inode.S)) <> "i" "inodes"
      (ForSlice uint64T <> "a" (inode.Inode__UsedBlocks "i")
        (MapDelete "free" "a"));;
    deleteInodeBlocks NumInodes "free";;
    let: "allocator" := alloc.New "free" in
    struct.new Dir.S [
      "d" ::= "d";
      "allocator" ::= "allocator";
      "inodes" ::= "inodes"
    ].

Definition Dir__Read: val :=
  rec: "Dir__Read" "d" "ino" "off" :=
    let: "i" := SliceGet (refT (struct.t inode.Inode.S)) (struct.loadF Dir.S "inodes" "d") "ino" in
    inode.Inode__Read "i" "off".

Definition Dir__Size: val :=
  rec: "Dir__Size" "d" "ino" :=
    let: "i" := SliceGet (refT (struct.t inode.Inode.S)) (struct.loadF Dir.S "inodes" "d") "ino" in
    inode.Inode__Size "i".

Definition Dir__Append: val :=
  rec: "Dir__Append" "d" "ino" "b" :=
    let: ("a", "ok") := alloc.Allocator__Reserve (struct.loadF Dir.S "allocator" "d") in
    (if: ~ "ok"
    then #false
    else
      disk.Write "a" "b";;
      let: "ok2" := inode.Inode__Append (SliceGet (refT (struct.t inode.Inode.S)) (struct.loadF Dir.S "inodes" "d") "ino") "a" in
      (if: "ok2" ≠ inode.AppendOk
      then #false
      else #true)).
