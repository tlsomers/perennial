(* autogenerated from github.com/mit-pdos/perennial-examples/dir *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

From Goose Require github_com.tchajed.marshal.

Module unit.
  Definition S := struct.decl [
  ].
End unit.

(* Allocator manages free disk blocks. It does not store its state durably, so
   the caller is responsible for returning its set of free disk blocks on
   recovery. *)
Module Allocator.
  Definition S := struct.decl [
    "m" :: lockRefT;
    "free" :: mapT (struct.t unit.S)
  ].
End Allocator.

Definition NewAllocator: val :=
  rec: "NewAllocator" "free" :=
    struct.new Allocator.S [
      "m" ::= lock.new #();
      "free" ::= "free"
    ].

Definition findKey: val :=
  rec: "findKey" "m" :=
    let: "found" := ref_to uint64T #0 in
    let: "ok" := ref_to boolT #false in
    MapIter "m" (位: "k" <>,
      (if: ~ (![boolT] "ok")
      then
        "found" <-[uint64T] "k";;
        "ok" <-[boolT] #true
      else #()));;
    (![uint64T] "found", ![boolT] "ok").

(* Reserve transfers ownership of a free block from the allocator to the caller *)
Definition Allocator__Reserve: val :=
  rec: "Allocator__Reserve" "a" :=
    lock.acquire (struct.loadF Allocator.S "m" "a");;
    let: ("k", "ok") := findKey (struct.loadF Allocator.S "free" "a") in
    MapDelete (struct.loadF Allocator.S "free" "a") "k";;
    lock.release (struct.loadF Allocator.S "m" "a");;
    ("k", "ok").

Module Inode.
  Definition S := struct.decl [
    "d" :: disk.Disk;
    "m" :: lockRefT;
    "addr" :: uint64T;
    "addrs" :: slice.T uint64T
  ].
End Inode.

Definition OpenInode: val :=
  rec: "OpenInode" "d" "addr" :=
    let: "b" := disk.Read "addr" in
    let: "dec" := marshal.NewDec "b" in
    let: "numAddrs" := marshal.Dec__GetInt "dec" in
    let: "addrs" := marshal.Dec__GetInts "dec" "numAddrs" in
    struct.mk Inode.S [
      "d" ::= "d";
      "m" ::= lock.new #();
      "addr" ::= "addr";
      "addrs" ::= "addrs"
    ].

Definition Inode__UsedBlocks: val :=
  rec: "Inode__UsedBlocks" "i" :=
    lock.acquire (struct.get Inode.S "m" "i");;
    let: "addrs" := struct.get Inode.S "addrs" "i" in
    lock.release (struct.get Inode.S "m" "i");;
    "addrs".

Definition Inode__Read: val :=
  rec: "Inode__Read" "i" "off" :=
    lock.acquire (struct.get Inode.S "m" "i");;
    let: "a" := SliceGet uint64T (struct.get Inode.S "addrs" "i") "off" in
    let: "b" := disk.Read "a" in
    lock.release (struct.get Inode.S "m" "i");;
    "b".

Definition Inode__Append: val :=
  rec: "Inode__Append" "i" "a" :=
    lock.acquire (struct.get Inode.S "m" "i");;
    struct.storeF Inode.S "addrs" "i" (SliceAppend uint64T (struct.get Inode.S "addrs" "i") "a");;
    let: "enc" := marshal.NewEnc disk.BlockSize in
    marshal.Enc__PutInt "enc" (slice.len (struct.get Inode.S "addrs" "i"));;
    marshal.Enc__PutInts "enc" (struct.get Inode.S "addrs" "i");;
    let: "hdr" := marshal.Enc__Finish "enc" in
    disk.Write (struct.get Inode.S "addr" "i") "hdr";;
    lock.release (struct.get Inode.S "m" "i").

Definition NumInodes : expr := #5.

Module Dir.
  Definition S := struct.decl [
    "d" :: disk.Disk;
    "allocator" :: struct.ptrT Allocator.S;
    "inodes" :: slice.T (struct.t Inode.S)
  ].
End Dir.

Definition OpenDir: val :=
  rec: "OpenDir" "d" "free" :=
    let: "inodes" := ref (zero_val (slice.T (struct.t Inode.S))) in
    let: "addr" := ref_to uint64T #0 in
    (for: (位: <>, ![uint64T] "addr" < NumInodes); (位: <>, "addr" <-[uint64T] ![uint64T] "addr" + #1) := 位: <>,
      "inodes" <-[slice.T (struct.t Inode.S)] SliceAppend (struct.t Inode.S) (![slice.T (struct.t Inode.S)] "inodes") (OpenInode "d" (![uint64T] "addr"));;
      Continue);;
    ForSlice (struct.t Inode.S) <> "i" (![slice.T (struct.t Inode.S)] "inodes")
      (ForSlice uint64T <> "a" (Inode__UsedBlocks "i")
        (MapDelete "free" "a"));;
    let: "allocator" := NewAllocator "free" in
    struct.new Dir.S [
      "d" ::= "d";
      "allocator" ::= "allocator";
      "inodes" ::= ![slice.T (struct.t Inode.S)] "inodes"
    ].

Definition Dir__Read: val :=
  rec: "Dir__Read" "d" "ino" "off" :=
    let: "i" := SliceGet (struct.t Inode.S) (struct.loadF Dir.S "inodes" "d") "ino" in
    Inode__Read "i" "off".

Definition Dir__Append: val :=
  rec: "Dir__Append" "d" "ino" "b" :=
    let: ("a", "ok") := Allocator__Reserve (struct.loadF Dir.S "allocator" "d") in
    (if: ~ "ok"
    then #false
    else
      disk.Write "a" "b";;
      Inode__Append (SliceGet (struct.t Inode.S) (struct.loadF Dir.S "inodes" "d") "ino") "a";;
      #true).
