(* autogenerated from github.com/mit-pdos/perennial-examples/alloc *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

Module unit.
  Definition S := struct.decl [
  ].
End unit.

Definition AddrSet: ty := mapT (struct.t unit.S).

(* Allocator manages free disk blocks. It does not store its state durably, so
   the caller is responsible for returning its set of free disk blocks on
   recovery. *)
Module Allocator.
  Definition S := struct.decl [
    "m" :: lockRefT;
    "free" :: mapT (struct.t unit.S)
  ].
End Allocator.

Definition freeRange: val :=
  rec: "freeRange" "start" "sz" :=
    let: "m" := NewMap (struct.t unit.S) in
    let: "end" := "start" + "sz" in
    let: "i" := ref_to uint64T "start" in
    (for: (λ: <>, ![uint64T] "i" < "end"); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      MapInsert "m" (![uint64T] "i") (struct.mk unit.S [
      ]);;
      Continue);;
    "m".

(* mapRemove deletes addresses in remove from m

   like m -= remove *)
Definition mapRemove: val :=
  rec: "mapRemove" "m" "remove" :=
    MapIter "remove" (λ: "k" <>,
      MapDelete "m" "k").

(* SetAdd adds addresses in add to m

   like m += add *)
Definition SetAdd: val :=
  rec: "SetAdd" "m" "add" :=
    ForSlice uint64T <> "k" "add"
      (MapInsert "m" "k" (struct.mk unit.S [
      ])).

Definition New: val :=
  rec: "New" "start" "sz" "used" :=
    let: "free" := freeRange "start" "sz" in
    mapRemove "free" "used";;
    struct.new Allocator.S [
      "m" ::= lock.new #();
      "free" ::= "free"
    ].

Definition findKey: val :=
  rec: "findKey" "m" :=
    let: "found" := ref_to uint64T #0 in
    let: "ok" := ref_to boolT #false in
    MapIter "m" (λ: "k" <>,
      (if: ~ (![boolT] "ok")
      then
        "found" <-[uint64T] "k";;
        "ok" <-[boolT] #true
      else #()));;
    (![uint64T] "found", ![boolT] "ok").

(* Reserve transfers ownership of a free block from the Allocator to the caller *)
Definition Allocator__Reserve: val :=
  rec: "Allocator__Reserve" "a" :=
    lock.acquire (struct.loadF Allocator.S "m" "a");;
    let: ("k", "ok") := findKey (struct.loadF Allocator.S "free" "a") in
    MapDelete (struct.loadF Allocator.S "free" "a") "k";;
    lock.release (struct.loadF Allocator.S "m" "a");;
    ("k", "ok").

Definition Allocator__Free: val :=
  rec: "Allocator__Free" "a" "addr" :=
    lock.acquire (struct.loadF Allocator.S "m" "a");;
    MapInsert (struct.loadF Allocator.S "free" "a") "addr" (struct.mk unit.S [
    ]);;
    lock.release (struct.loadF Allocator.S "m" "a").
