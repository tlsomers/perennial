(* autogenerated from github.com/mit-pdos/secure-chat/full *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

(* app.go *)

Definition aliceMsg : expr := #10.

Definition bobMsg : expr := #11.

(* msgT from encoding.go *)

Definition msgT := struct.decl [
  "body" :: uint64T
].

Definition contains: val :=
  rec: "contains" "sl" "m" :=
    let: "in" := ref (zero_val boolT) in
    ForSlice (struct.t msgT) <> "o" "sl"
      ((if: (struct.loadF msgT "body" "m") = (struct.get msgT "body" "o")
      then "in" <-[boolT] #true
      else #()));;
    ![boolT] "in".

(* Put from lib.go *)

Definition Put: val :=
  rec: "Put" "m" :=
    Panic "oops";;
    #().

Definition Get: val :=
  rec: "Get" <> :=
    Panic "oops";;
    #().

Definition alice: val :=
  rec: "alice" <> :=
    let: "a_msg" := struct.new msgT [
      "body" ::= aliceMsg
    ] in
    let: "b_msg" := struct.new msgT [
      "body" ::= bobMsg
    ] in
    Put "a_msg";;
    let: "g" := Get #() in
    (if: contains "g" "b_msg"
    then
      control.impl.Assert (contains "g" "a_msg");;
      #()
    else #()).

Definition bob: val :=
  rec: "bob" <> :=
    let: "a_msg" := struct.new msgT [
      "body" ::= aliceMsg
    ] in
    let: "b_msg" := struct.new msgT [
      "body" ::= bobMsg
    ] in
    let: "g" := Get #() in
    (if: contains "g" "a_msg"
    then
      Put "b_msg";;
      #()
    else #()).

(* encoding.go *)

Definition errorT: ty := boolT.

Definition ERRNONE : expr := #false.

Definition ERRSOME : expr := #true.

(* lib.go *)

End code.
