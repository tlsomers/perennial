(* autogenerated from github.com/mit-pdos/secure-chat/full *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

(* app.go *)

Definition aliceMsg : expr := #10.

Definition bobMsg : expr := #11.

(* Init from lib.go *)

Definition Init: val :=
  rec: "Init" <> :=
    Panic "oops";;
    #().

(* msgT from encoding.go *)

Definition msgT := struct.decl [
  "body" :: uint64T
].

(* Put from lib.go *)

Definition Put: val :=
  rec: "Put" "m" :=
    Panic "oops";;
    #().

Definition Get: val :=
  rec: "Get" <> :=
    Panic "oops";;
    #().

Definition alice: val :=
  rec: "alice" <> :=
    Init #();;
    let: "a_msg" := struct.new msgT [
      "body" ::= aliceMsg
    ] in
    let: "b_msg" := struct.new msgT [
      "body" ::= bobMsg
    ] in
    Put "a_msg";;
    let: "g" := Get #() in
    (if: #2 ≤ (slice.len "g")
    then
      control.impl.Assert ((struct.get msgT "body" (SliceGet (struct.t msgT) "g" #0)) = (struct.loadF msgT "body" "a_msg"));;
      control.impl.Assert ((struct.get msgT "body" (SliceGet (struct.t msgT) "g" #1)) = (struct.loadF msgT "body" "b_msg"));;
      control.impl.Assert ((slice.len "g") = #2);;
      let: "g2" := Get #() in
      control.impl.Assert ((struct.get msgT "body" (SliceGet (struct.t msgT) "g2" #0)) = (struct.loadF msgT "body" "a_msg"));;
      control.impl.Assert ((struct.get msgT "body" (SliceGet (struct.t msgT) "g2" #1)) = (struct.loadF msgT "body" "b_msg"));;
      control.impl.Assert ((slice.len "g2") = #2);;
      #()
    else #()).

Definition bob: val :=
  rec: "bob" <> :=
    Init #();;
    let: "a_msg" := struct.new msgT [
      "body" ::= aliceMsg
    ] in
    let: "b_msg" := struct.new msgT [
      "body" ::= bobMsg
    ] in
    let: "g" := Get #() in
    (if: #1 ≤ (slice.len "g")
    then
      control.impl.Assert ((struct.get msgT "body" (SliceGet (struct.t msgT) "g" #0)) = (struct.loadF msgT "body" "a_msg"));;
      Put "b_msg";;
      #()
    else #()).

(* encoding.go *)

Definition errorT: ty := boolT.

Definition ERRNONE : expr := #false.

Definition ERRSOME : expr := #true.

(* lib.go *)

End code.
