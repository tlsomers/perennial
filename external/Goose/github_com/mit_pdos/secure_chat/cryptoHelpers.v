(* autogenerated from github.com/mit-pdos/secure-chat/cryptoHelpers *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.secure_chat.cryptoShim.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition Hasher: ty := slice.T byteT.

(* Goose doesn't support non-struct types that well, so until that exists,
   use type aliases and non-method funcs. *)
Definition HasherWrite: val :=
  rec: "HasherWrite" "h" "data" :=
    ForSlice byteT <> "b" "data"
      ("h" <-[slice.T byteT] (SliceAppend byteT (![slice.T byteT] "h") "b"));;
    #().

Definition HasherWriteSl: val :=
  rec: "HasherWriteSl" "h" "data" :=
    ForSlice (slice.T byteT) <> "hash" "data"
      (HasherWrite "h" "hash");;
    #().

Definition HasherSum: val :=
  rec: "HasherSum" "h" "b" :=
    let: "b1" := ref_to (slice.T byteT) "b" in
    let: "hash" := cryptoShim.Hash "h" in
    ForSlice byteT <> "byt" "hash"
      ("b1" <-[slice.T byteT] (SliceAppend byteT (![slice.T byteT] "b1") "byt"));;
    ![slice.T byteT] "b1".

End code.
