(* autogenerated from github.com/mit-pdos/pav/advrpc *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.pav.marshalutil.
From Goose Require github_com.mit_pdos.pav.netffi.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition Server := struct.decl [
  "handlers" :: mapT ((slice.T byteT) -> ptrT -> unitT)%ht
].

Definition Server__handle: val :=
  rec: "Server__handle" "s" "conn" "rpcId" "data" :=
    let: ("f", "ok0") := MapGet (struct.loadF Server "handlers" "s") "rpcId" in
    (if: (~ "ok0")
    then #()
    else
      let: "resp" := ref (zero_val (slice.T byteT)) in
      "f" "data" "resp";;
      netffi.Conn__Send "conn" (![slice.T byteT] "resp");;
      #()).

Definition Server__read: val :=
  rec: "Server__read" "s" "conn" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: ("req", "err0") := netffi.Conn__Receive "conn" in
      (if: "err0"
      then Break
      else
        let: (("rpcId", "data"), "err1") := marshalutil.ReadInt "req" in
        (if: "err1"
        then Continue
        else
          Fork (Server__handle "s" "conn" "rpcId" "data");;
          Continue)));;
    #().

Definition Server__Serve: val :=
  rec: "Server__Serve" "s" "addr" :=
    let: "l" := netffi.Listen "addr" in
    Fork (Skip;;
          (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
            let: "conn" := netffi.Listener__Accept "l" in
            Fork (Server__read "s" "conn");;
            Continue));;
    #().

Definition NewServer: val :=
  rec: "NewServer" "handlers" :=
    struct.new Server [
      "handlers" ::= "handlers"
    ].

(* Client is meant for exclusive use. *)
Definition Client := struct.decl [
  "conn" :: ptrT
].

Definition Dial: val :=
  rec: "Dial" "addr" :=
    let: "c" := netffi.Dial "addr" in
    struct.new Client [
      "conn" ::= "c"
    ].

(* Call does an rpc, and returns error on fail. *)
Definition Client__Call: val :=
  rec: "Client__Call" "c" "rpcId" "args" "reply" :=
    let: "req0" := NewSliceWithCap byteT #0 (#8 + (slice.len "args")) in
    let: "req1" := marshal.WriteInt "req0" "rpcId" in
    let: "req2" := marshal.WriteBytes "req1" "args" in
    (if: netffi.Conn__Send (struct.loadF Client "conn" "c") "req2"
    then #true
    else
      let: ("resp", "err0") := netffi.Conn__Receive (struct.loadF Client "conn" "c") in
      (if: "err0"
      then #true
      else
        "reply" <-[slice.T byteT] "resp";;
        #false)).

End code.
