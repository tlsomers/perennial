(* autogenerated from github.com/mit-pdos/go-mvcc/txn *)
From Perennial.goose_lang Require Import prelude.
Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

From Goose Require github_com.mit_pdos.go_mvcc.common.
From Goose Require github_com.mit_pdos.go_mvcc.config.
From Goose Require github_com.mit_pdos.go_mvcc.gc.
From Goose Require github_com.mit_pdos.go_mvcc.index.
From Goose Require github_com.mit_pdos.go_mvcc.tuple.

Definition DBVal := struct.decl [
  "tomb" :: boolT;
  "val" :: uint64T
].

(* *
    * We need `key` as to match in the local write set *)
Definition WrEnt := struct.decl [
  "key" :: uint64T;
  "val" :: struct.t DBVal;
  "tuple" :: ptrT
].

(* *
    * `wset` as a `map[uint64]WrEnt` has the issue of allocating and deallocating
    * many `WrEnt`. *)
Definition Txn := struct.decl [
  "tid" :: uint64T;
  "wset" :: slice.T (struct.t WrEnt);
  "sid" :: uint64T;
  "idx" :: ptrT;
  "txnMgr" :: ptrT
].

Definition TxnSite := struct.decl [
  "latch" :: ptrT;
  "tidLast" :: uint64T;
  "tidsActive" :: slice.T uint64T;
  "padding" :: arrayT uint64T
].

Definition TxnMgr := struct.decl [
  "latch" :: ptrT;
  "sidCur" :: uint64T;
  "sites" :: slice.T ptrT;
  "idx" :: ptrT;
  "gc" :: ptrT
].

Definition MkTxnMgr: val :=
  rec: "MkTxnMgr" <> :=
    let: "txnMgr" := struct.alloc TxnMgr (zero_val (struct.t TxnMgr)) in
    struct.storeF TxnMgr "latch" "txnMgr" (lock.new #());;
    struct.storeF TxnMgr "sites" "txnMgr" (NewSlice ptrT config.N_TXN_SITES);;
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "i" < config.N_TXN_SITES); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      let: "site" := struct.alloc TxnSite (zero_val (struct.t TxnSite)) in
      struct.storeF TxnSite "latch" "site" (lock.new #());;
      struct.storeF TxnSite "tidsActive" "site" (NewSlice uint64T #0);;
      SliceSet ptrT (struct.loadF TxnMgr "sites" "txnMgr") (![uint64T] "i") "site";;
      Continue);;
    struct.storeF TxnMgr "idx" "txnMgr" (index.MkIndex #());;
    struct.storeF TxnMgr "gc" "txnMgr" (gc.MkGC (struct.loadF TxnMgr "idx" "txnMgr"));;
    "txnMgr".

Definition TxnMgr__New: val :=
  rec: "TxnMgr__New" "txnMgr" :=
    lock.acquire (struct.loadF TxnMgr "latch" "txnMgr");;
    let: "txn" := struct.alloc Txn (zero_val (struct.t Txn)) in
    struct.storeF Txn "wset" "txn" (NewSlice (struct.t WrEnt) #0);;
    let: "sid" := struct.loadF TxnMgr "sidCur" "txnMgr" in
    struct.storeF Txn "sid" "txn" "sid";;
    struct.storeF Txn "idx" "txn" (struct.loadF TxnMgr "idx" "txnMgr");;
    struct.storeF Txn "txnMgr" "txn" "txnMgr";;
    struct.storeF TxnMgr "sidCur" "txnMgr" ("sid" + #1);;
    (if: struct.loadF TxnMgr "sidCur" "txnMgr" ≥ config.N_TXN_SITES
    then struct.storeF TxnMgr "sidCur" "txnMgr" #0
    else #());;
    lock.release (struct.loadF TxnMgr "latch" "txnMgr");;
    "txn".

Definition genTID: val :=
  rec: "genTID" "sid" :=
    let: "tid" := ref (zero_val uint64T) in
    "tid" <-[uint64T] tsc.GetTSC #();;
    "tid" <-[uint64T] (![uint64T] "tid" `and` ~ (config.N_TXN_SITES - #1)) + "sid";;
    ![uint64T] "tid".

Definition getSID: val :=
  rec: "getSID" "tid" :=
    let: "sid" := ("tid" `and` config.N_TXN_SITES - #1) in
    "sid".

Definition TxnMgr__activate: val :=
  rec: "TxnMgr__activate" "txnMgr" "sid" :=
    let: "site" := SliceGet ptrT (struct.loadF TxnMgr "sites" "txnMgr") "sid" in
    lock.acquire (struct.loadF TxnSite "latch" "site");;
    let: "tid" := ref (zero_val uint64T) in
    "tid" <-[uint64T] genTID "sid";;
    Skip;;
    (for: (λ: <>, ![uint64T] "tid" ≤ struct.loadF TxnSite "tidLast" "site"); (λ: <>, Skip) := λ: <>,
      "tid" <-[uint64T] genTID "sid";;
      Continue);;
    struct.storeF TxnSite "tidLast" "site" (![uint64T] "tid");;
    struct.storeF TxnSite "tidsActive" "site" (SliceAppend uint64T (struct.loadF TxnSite "tidsActive" "site") (![uint64T] "tid"));;
    lock.release (struct.loadF TxnSite "latch" "site");;
    ![uint64T] "tid".

Definition findTID: val :=
  rec: "findTID" "tid" "tids" :=
    let: "idx" := ref_to uint64T #0 in
    ForSlice uint64T "i" "x" "tids"
      (if: ("tid" = "x")
      then "idx" <-[uint64T] "i"
      else #());;
    ![uint64T] "idx".

(* *
    * Precondition:
    * 1. `xs` not empty.
    * 2. `i < len(xs)` *)
Definition swapWithEnd: val :=
  rec: "swapWithEnd" "xs" "i" :=
    let: "tmp" := SliceGet uint64T "xs" (slice.len "xs" - #1) in
    SliceSet uint64T "xs" (slice.len "xs" - #1) (SliceGet uint64T "xs" "i");;
    SliceSet uint64T "xs" "i" "tmp";;
    #().

(* *
    * This function is called by `Txn` at commit/abort time.
    * Precondition:
    * 1. The set of active transactions contains `tid`. *)
Definition TxnMgr__deactivate: val :=
  rec: "TxnMgr__deactivate" "txnMgr" "tid" :=
    let: "sid" := getSID "tid" in
    let: "site" := SliceGet ptrT (struct.loadF TxnMgr "sites" "txnMgr") "sid" in
    lock.acquire (struct.loadF TxnSite "latch" "site");;
    let: "idx" := findTID "tid" (struct.loadF TxnSite "tidsActive" "site") in
    swapWithEnd (struct.loadF TxnSite "tidsActive" "site") "idx";;
    struct.storeF TxnSite "tidsActive" "site" (SliceTake (struct.loadF TxnSite "tidsActive" "site") (slice.len (struct.loadF TxnSite "tidsActive" "site") - #1));;
    lock.release (struct.loadF TxnSite "latch" "site");;
    #().

Definition TxnMgr__getMinActiveTIDSite: val :=
  rec: "TxnMgr__getMinActiveTIDSite" "txnMgr" "sid" :=
    let: "site" := SliceGet ptrT (struct.loadF TxnMgr "sites" "txnMgr") "sid" in
    lock.acquire (struct.loadF TxnSite "latch" "site");;
    let: "min" := ref_to uint64T config.TID_SENTINEL in
    ForSlice uint64T <> "tid" (struct.loadF TxnSite "tidsActive" "site")
      (if: "tid" < ![uint64T] "min"
      then "min" <-[uint64T] "tid"
      else #());;
    lock.release (struct.loadF TxnSite "latch" "site");;
    ![uint64T] "min".

(* *
    * This function returns the minimal TID of the active txns. If there is no
    * active txns, it returns `config.TID_SENTINEL`. *)
Definition TxnMgr__getMinActiveTID: val :=
  rec: "TxnMgr__getMinActiveTID" "txnMgr" :=
    let: "min" := ref_to uint64T config.TID_SENTINEL in
    let: "sid" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "sid" < config.N_TXN_SITES); (λ: <>, "sid" <-[uint64T] ![uint64T] "sid" + #1) := λ: <>,
      let: "tid" := TxnMgr__getMinActiveTIDSite "txnMgr" (![uint64T] "sid") in
      (if: "tid" < ![uint64T] "min"
      then
        "min" <-[uint64T] "tid";;
        Continue
      else Continue));;
    ![uint64T] "min".

(* *
    * Probably only used for testing and profiling. *)
Definition TxnMgr__getNumActiveTxns: val :=
  rec: "TxnMgr__getNumActiveTxns" "txnMgr" :=
    let: "n" := ref_to uint64T #0 in
    let: "sid" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "sid" < config.N_TXN_SITES); (λ: <>, "sid" <-[uint64T] ![uint64T] "sid" + #1) := λ: <>,
      let: "site" := SliceGet ptrT (struct.loadF TxnMgr "sites" "txnMgr") (![uint64T] "sid") in
      lock.acquire (struct.loadF TxnSite "latch" "site");;
      "n" <-[uint64T] ![uint64T] "n" + slice.len (struct.loadF TxnSite "tidsActive" "site");;
      lock.release (struct.loadF TxnSite "latch" "site");;
      Continue);;
    ![uint64T] "n".

Definition TxnMgr__runGC: val :=
  rec: "TxnMgr__runGC" "txnMgr" :=
    let: "tidMin" := TxnMgr__getMinActiveTID "txnMgr" in
    (if: "tidMin" < config.TID_SENTINEL
    then
      gc.GC__Start (struct.loadF TxnMgr "gc" "txnMgr") "tidMin";;
      #()
    else #()).

Definition TxnMgr__StartGC: val :=
  rec: "TxnMgr__StartGC" "txnMgr" :=
    Fork (Skip;;
          (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
            TxnMgr__runGC "txnMgr";;
            Continue));;
    #().

Definition matchLocalWrites: val :=
  rec: "matchLocalWrites" "key" "wset" :=
    let: "pos" := ref_to uint64T #0 in
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      (if: ![uint64T] "pos" ≥ slice.len "wset"
      then Break
      else
        (if: ("key" = struct.get WrEnt "key" (SliceGet (struct.t WrEnt) "wset" (![uint64T] "pos")))
        then Break
        else
          "pos" <-[uint64T] ![uint64T] "pos" + #1;;
          Continue)));;
    let: "found" := ![uint64T] "pos" < slice.len "wset" in
    (![uint64T] "pos", "found").

Definition Txn__Put: val :=
  rec: "Txn__Put" "txn" "key" "val" :=
    let: ("pos", "found") := matchLocalWrites "key" (struct.loadF Txn "wset" "txn") in
    (if: "found"
    then
      let: "went" := SliceRef (struct.t WrEnt) (struct.loadF Txn "wset" "txn") "pos" in
      struct.storeF WrEnt "val" "went" (struct.mk DBVal [
        "tomb" ::= #false;
        "val" ::= "val"
      ]);;
      #true
    else
      let: "idx" := struct.loadF Txn "idx" "txn" in
      let: "tuple" := index.Index__GetTuple "idx" "key" in
      let: "ret" := tuple.Tuple__Own "tuple" (struct.loadF Txn "tid" "txn") in
      (if: "ret" ≠ common.RET_SUCCESS
      then #false
      else
        let: "dbval" := struct.mk DBVal [
          "tomb" ::= #false;
          "val" ::= "val"
        ] in
        struct.storeF Txn "wset" "txn" (SliceAppend (struct.t WrEnt) (struct.loadF Txn "wset" "txn") (struct.mk WrEnt [
          "key" ::= "key";
          "val" ::= "dbval";
          "tuple" ::= "tuple"
        ]));;
        #true)).

Definition Txn__Get: val :=
  rec: "Txn__Get" "txn" "key" :=
    let: ("pos", "found") := matchLocalWrites "key" (struct.loadF Txn "wset" "txn") in
    (if: "found"
    then
      let: "dbval" := struct.get WrEnt "val" (SliceGet (struct.t WrEnt) (struct.loadF Txn "wset" "txn") "pos") in
      (struct.get DBVal "val" "dbval", ~ (struct.get DBVal "tomb" "dbval"))
    else
      let: "idx" := struct.loadF Txn "idx" "txn" in
      let: "tuple" := index.Index__GetTuple "idx" "key" in
      let: ("val", "ret") := tuple.Tuple__ReadVersion "tuple" (struct.loadF Txn "tid" "txn") in
      ("val", ("ret" = common.RET_SUCCESS))).

Definition Txn__Begin: val :=
  rec: "Txn__Begin" "txn" :=
    let: "tid" := TxnMgr__activate (struct.loadF Txn "txnMgr" "txn") (struct.loadF Txn "sid" "txn") in
    struct.storeF Txn "tid" "txn" "tid";;
    struct.storeF Txn "wset" "txn" (SliceTake (struct.loadF Txn "wset" "txn") #0);;
    #().

Definition Txn__Commit: val :=
  rec: "Txn__Commit" "txn" :=
    ForSlice (struct.t WrEnt) <> "wrent" (struct.loadF Txn "wset" "txn")
      (let: "dbval" := struct.get WrEnt "val" "wrent" in
      let: "tuple" := struct.get WrEnt "tuple" "wrent" in
      tuple.Tuple__AppendVersion "tuple" (struct.loadF Txn "tid" "txn") (struct.get DBVal "val" "dbval"));;
    TxnMgr__deactivate (struct.loadF Txn "txnMgr" "txn") (struct.loadF Txn "tid" "txn");;
    #().

Definition Txn__Abort: val :=
  rec: "Txn__Abort" "txn" :=
    ForSlice (struct.t WrEnt) <> "wrent" (struct.loadF Txn "wset" "txn")
      (let: "tuple" := struct.get WrEnt "tuple" "wrent" in
      tuple.Tuple__Free "tuple" (struct.loadF Txn "tid" "txn"));;
    TxnMgr__deactivate (struct.loadF Txn "txnMgr" "txn") (struct.loadF Txn "tid" "txn");;
    #().

End code.
