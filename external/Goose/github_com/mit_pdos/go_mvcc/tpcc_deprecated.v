(* autogenerated from github.com/mit-pdos/go-mvcc/tpcc-deprecated *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mit_pdos.go_mvcc.txn.
From Goose Require github_com.tchajed.marshal.

From Perennial.goose_lang Require Import ffi.grove_prelude.

(* atxn.go *)

(* *
    * Axiomatized transaction interface.
    * This file will be removed once we adapt our implementation and proof to this
    * interface. *)
Definition Txn := struct.decl [
].

Definition TxnMgr := struct.decl [
].

Definition MkTxnMgr: val :=
  rec: "MkTxnMgr" <> :=
    let: "txnMgr" := struct.alloc TxnMgr (zero_val (struct.t TxnMgr)) in
    "txnMgr".

Definition TxnMgr__New: val :=
  rec: "TxnMgr__New" "txnMgr" :=
    let: "txn" := struct.alloc Txn (zero_val (struct.t Txn)) in
    "txn".

Definition Txn__Read: val :=
  rec: "Txn__Read" "txn" "mapid" "key" :=
    (slice.nil, #true).

Definition Txn__Write: val :=
  rec: "Txn__Write" "txn" "mapid" "key" "val" :=
    #().

Definition Txn__Delete: val :=
  rec: "Txn__Delete" "txn" "mapid" "key" :=
    #true.

Definition Txn__DoTxn: val :=
  rec: "Txn__DoTxn" "txn" "body" :=
    #true.

(* def.go *)

(*  Customer table. *)
Definition Customer := struct.decl [
  "C_ID" :: uint64T;
  "C_W_ID" :: uint64T;
  "C_LAST" :: slice.T byteT
].

Definition MAPID_CUSTOMER_TBL : expr := #0.

Definition MAPID_CUSTOMER_IDX_CID : expr := #1.

Definition MAPID_CUSTOMER_IDX_LAST : expr := #2.

(* tbl-customer.go *)

Definition readCustomer: val :=
  rec: "readCustomer" "txn" "tplid" :=
    let: "k" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 #8) in
    "k" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "k") "tplid";;
    let: ("v", <>) := Txn__Read "txn" MAPID_CUSTOMER_TBL (![slice.T byteT] "k") in
    let: ("cid", "v1") := marshal.ReadInt "v" in
    let: ("cwid", "clast") := marshal.ReadInt "v1" in
    struct.mk Customer [
      "C_ID" ::= "cid";
      "C_W_ID" ::= "cwid";
      "C_LAST" ::= "clast"
    ].

Definition findCustomerByCID: val :=
  rec: "findCustomerByCID" "txn" "cid" "cwid" :=
    let: "k" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 #16) in
    "k" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "k") "cid";;
    "k" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "k") "cwid";;
    let: ("v", "ok") := Txn__Read "txn" MAPID_CUSTOMER_IDX_CID (![slice.T byteT] "k") in
    (if: ~ "ok"
    then (#0, #false)
    else
      let: ("tplid", <>) := marshal.ReadInt "v" in
      ("tplid", #true)).

Definition findCustomersByLast: val :=
  rec: "findCustomersByLast" "txn" "clast" "cwid" :=
    let: "k" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 #16) in
    "k" <-[slice.T byteT] marshal.WriteBytes (![slice.T byteT] "k") "clast";;
    "k" <-[slice.T byteT] marshal.WriteInt (![slice.T byteT] "k") "cwid";;
    let: (<>, "ok") := Txn__Read "txn" MAPID_CUSTOMER_IDX_LAST (![slice.T byteT] "k") in
    let: "tplids" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    (if: ~ "ok"
    then ![slice.T uint64T] "tplids"
    else ![slice.T uint64T] "tplids").

Definition SelectCustomerByCID: val :=
  rec: "SelectCustomerByCID" "txn" "cid" "cwid" "cref" :=
    let: ("tplid", "found") := findCustomerByCID "txn" "cid" "cwid" in
    (if: ~ "found"
    then #false
    else
      let: "customer" := readCustomer "txn" "tplid" in
      struct.storeF Customer "C_ID" "cref" (struct.get Customer "C_ID" "customer");;
      struct.storeF Customer "C_W_ID" "cref" (struct.get Customer "C_W_ID" "customer");;
      struct.storeF Customer "C_LAST" "cref" (struct.get Customer "C_LAST" "customer");;
      #true).

Definition SelectCustomersByLast: val :=
  rec: "SelectCustomersByLast" "txn" "clast" "cwid" "csref" :=
    let: "tplids" := findCustomersByLast "txn" "clast" "cwid" in
    let: "customers" := ref_to (slice.T (struct.t Customer)) (NewSliceWithCap (struct.t Customer) #0 (slice.len "tplids")) in
    ForSlice uint64T <> "tplid" "tplids"
      (let: "c" := readCustomer "txn" "tplid" in
      "customers" <-[slice.T (struct.t Customer)] SliceAppend (struct.t Customer) (![slice.T (struct.t Customer)] "customers") "c");;
    "csref" <-[slice.T (struct.t Customer)] ![slice.T (struct.t Customer)] "customers";;
    #true.

(* *
    * Note that functions below are not the interface of this file. *)
Definition TxnSelectCustomerByCID: val :=
  rec: "TxnSelectCustomerByCID" "t" "cid" "cwid" :=
    let: "c" := ref (zero_val (struct.t Customer)) in
    let: "body" := (λ: "txn",
      SelectCustomerByCID "txn" "cid" "cwid" "c"
      ) in
    Txn__DoTxn "t" "body";;
    ![struct.t Customer] "c".

(* txn-payment.go *)

Definition payment: val :=
  rec: "payment" "txn" :=
    #true.

Definition TxnPayment: val :=
  rec: "TxnPayment" "t" :=
    let: "body" := (λ: "txn",
      payment "txn"
      ) in
    let: "ok" := txn.Txn__DoTxn "t" "body" in
    "ok".
