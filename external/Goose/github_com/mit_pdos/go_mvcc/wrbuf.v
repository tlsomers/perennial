(* autogenerated from github.com/mit-pdos/go-mvcc/wrbuf *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition WrEnt := struct.decl [
  "key" :: uint64T;
  "val" :: uint64T;
  "wr" :: boolT
].

Definition WrEnt__Key: val :=
  rec: "WrEnt__Key" "ent" :=
    struct.get WrEnt "key" "ent".

Definition WrEnt__Destruct: val :=
  rec: "WrEnt__Destruct" "ent" :=
    (struct.get WrEnt "key" "ent", struct.get WrEnt "val" "ent", struct.get WrEnt "wr" "ent").

Definition search: val :=
  rec: "search" "ents" "key" :=
    let: "pos" := ref_to uint64T #0 in
    Skip;;
    (for: (λ: <>, (![uint64T] "pos" < slice.len "ents") && ("key" ≠ struct.get WrEnt "key" (SliceGet (struct.t WrEnt) "ents" (![uint64T] "pos")))); (λ: <>, Skip) := λ: <>,
      "pos" <-[uint64T] ![uint64T] "pos" + #1;;
      Continue);;
    let: "found" := ![uint64T] "pos" < slice.len "ents" in
    (![uint64T] "pos", "found").

Definition WrBuf := struct.decl [
  "ents" :: slice.T (struct.t WrEnt)
].

Definition MkWrBuf: val :=
  rec: "MkWrBuf" <> :=
    let: "wrbuf" := struct.alloc WrBuf (zero_val (struct.t WrBuf)) in
    struct.storeF WrBuf "ents" "wrbuf" (NewSliceWithCap (struct.t WrEnt) #0 #16);;
    "wrbuf".

Definition WrBuf__Lookup: val :=
  rec: "WrBuf__Lookup" "wrbuf" "key" :=
    let: ("pos", "found") := search (struct.loadF WrBuf "ents" "wrbuf") "key" in
    (if: "found"
    then
      let: "ent" := SliceGet (struct.t WrEnt) (struct.loadF WrBuf "ents" "wrbuf") "pos" in
      (struct.get WrEnt "val" "ent", struct.get WrEnt "wr" "ent", #true)
    else (#0, #false, #false)).

Definition WrBuf__Put: val :=
  rec: "WrBuf__Put" "wrbuf" "key" "val" :=
    let: ("pos", "found") := search (struct.loadF WrBuf "ents" "wrbuf") "key" in
    (if: "found"
    then
      let: "ent" := SliceRef (struct.t WrEnt) (struct.loadF WrBuf "ents" "wrbuf") "pos" in
      struct.storeF WrEnt "val" "ent" "val";;
      struct.storeF WrEnt "wr" "ent" #true;;
      #()
    else
      let: "ent" := struct.mk WrEnt [
        "key" ::= "key";
        "val" ::= "val";
        "wr" ::= #true
      ] in
      struct.storeF WrBuf "ents" "wrbuf" (SliceAppend (struct.t WrEnt) (struct.loadF WrBuf "ents" "wrbuf") "ent");;
      #()).

Definition WrBuf__Delete: val :=
  rec: "WrBuf__Delete" "wrbuf" "key" :=
    let: ("pos", "found") := search (struct.loadF WrBuf "ents" "wrbuf") "key" in
    (if: "found"
    then
      let: "ent" := SliceRef (struct.t WrEnt) (struct.loadF WrBuf "ents" "wrbuf") "pos" in
      struct.storeF WrEnt "wr" "ent" #false;;
      #()
    else
      let: "ent" := struct.mk WrEnt [
        "key" ::= "key";
        "wr" ::= #false
      ] in
      struct.storeF WrBuf "ents" "wrbuf" (SliceAppend (struct.t WrEnt) (struct.loadF WrBuf "ents" "wrbuf") "ent");;
      #()).

Definition WrBuf__IntoEnts: val :=
  rec: "WrBuf__IntoEnts" "wrbuf" :=
    struct.loadF WrBuf "ents" "wrbuf".

Definition WrBuf__Clear: val :=
  rec: "WrBuf__Clear" "wrbuf" :=
    struct.storeF WrBuf "ents" "wrbuf" (SliceTake (struct.loadF WrBuf "ents" "wrbuf") #0);;
    #().

End code.
