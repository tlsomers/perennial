(* autogenerated from go.etcd.io/raft/v3/raftpb *)
From New.golang Require Import defn.

From New.code_axioms Require Export raftpb.

Section code.
Context `{ffi_syntax}.

Definition EntryType : go_type := int32T.

Definition MessageType : go_type := int32T.

Definition MsgHup : expr := #(W32 0).

Definition ConfChangeTransition : go_type := int32T.

Definition ConfChangeType : go_type := int32T.

Definition Entry : go_type := structT [
  "Term" :: uint64T;
  "Index" :: uint64T;
  "Type" :: EntryType;
  "Data" :: sliceT
].

Definition ConfState : go_type := structT [
  "Voters" :: sliceT;
  "Learners" :: sliceT;
  "VotersOutgoing" :: sliceT;
  "LearnersNext" :: sliceT;
  "AutoLeave" :: boolT
].

Definition SnapshotMetadata : go_type := structT [
  "ConfState" :: ConfState;
  "Index" :: uint64T;
  "Term" :: uint64T
].

Definition Snapshot : go_type := structT [
  "Data" :: sliceT;
  "Metadata" :: SnapshotMetadata
].

Definition Message : go_type := structT [
  "Type" :: MessageType;
  "To" :: uint64T;
  "From" :: uint64T;
  "Term" :: uint64T;
  "LogTerm" :: uint64T;
  "Index" :: uint64T;
  "Entries" :: sliceT;
  "Commit" :: uint64T;
  "Vote" :: uint64T;
  "Snapshot" :: ptrT;
  "Reject" :: boolT;
  "RejectHint" :: uint64T;
  "Context" :: sliceT;
  "Responses" :: sliceT
].

Definition HardState : go_type := structT [
  "Term" :: uint64T;
  "Vote" :: uint64T;
  "Commit" :: uint64T
].

Definition ConfChange : go_type := structT [
  "Type" :: ConfChangeType;
  "NodeID" :: uint64T;
  "Context" :: sliceT;
  "ID" :: uint64T
].

Definition ConfChangeSingle : go_type := structT [
  "Type" :: ConfChangeType;
  "NodeID" :: uint64T
].

Definition ConfChangeV2 : go_type := structT [
  "Transition" :: ConfChangeTransition;
  "Changes" :: sliceT;
  "Context" :: sliceT
].

End code.
