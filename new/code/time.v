(* autogenerated from time *)
From New.golang Require Import defn.

Module time.
Section code.
Context `{ffi_syntax}.


Definition ParseError : go_type := structT [
  "Layout" :: stringT;
  "Value" :: stringT;
  "LayoutElem" :: stringT;
  "ValueElem" :: stringT;
  "Message" :: stringT
].

Definition Time : go_type := structT [
  "wall" :: uint64T;
  "ext" :: int64T;
  "loc" :: ptrT
].

Definition Timer : go_type := structT [
  "C" :: chanT Time;
  "initTimer" :: boolT
].

Definition Ticker : go_type := structT [
  "C" :: chanT Time;
  "initTicker" :: boolT
].

Definition Month : go_type := intT.

Definition Weekday : go_type := intT.

Definition Duration : go_type := int64T.

Definition zone : go_type := structT [
  "name" :: stringT;
  "offset" :: intT;
  "isDST" :: boolT
].

Definition zoneTrans : go_type := structT [
  "when" :: int64T;
  "index" :: uint8T;
  "isstd" :: boolT;
  "isutc" :: boolT
].

Definition Location : go_type := structT [
  "name" :: stringT;
  "zone" :: sliceT;
  "tx" :: sliceT;
  "extend" :: stringT;
  "cacheStart" :: int64T;
  "cacheEnd" :: int64T;
  "cacheZone" :: ptrT
].

Definition ruleKind : go_type := intT.

Definition rule : go_type := structT [
  "kind" :: ruleKind;
  "day" :: intT;
  "week" :: intT;
  "mon" :: intT;
  "time" :: intT
].

Definition fileSizeError : go_type := stringT.

Definition dataIO : go_type := structT [
  "p" :: sliceT;
  "error" :: boolT
].

Definition pkg_name' : go_string := "time".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("ParseError"%go, []); ("ParseError'ptr"%go, [("Error"%go, ParseError__Error)]); ("Timer"%go, []); ("Timer'ptr"%go, [("Reset"%go, Timer__Reset); ("Stop"%go, Timer__Stop)]); ("Ticker"%go, []); ("Ticker'ptr"%go, [("Reset"%go, Ticker__Reset); ("Stop"%go, Ticker__Stop)]); ("Time"%go, [("Add"%go, Time__Add); ("AddDate"%go, Time__AddDate); ("After"%go, Time__After); ("AppendFormat"%go, Time__AppendFormat); ("Before"%go, Time__Before); ("Clock"%go, Time__Clock); ("Compare"%go, Time__Compare); ("Date"%go, Time__Date); ("Day"%go, Time__Day); ("Equal"%go, Time__Equal); ("Format"%go, Time__Format); ("GoString"%go, Time__GoString); ("GobEncode"%go, Time__GobEncode); ("Hour"%go, Time__Hour); ("ISOWeek"%go, Time__ISOWeek); ("In"%go, Time__In); ("IsDST"%go, Time__IsDST); ("IsZero"%go, Time__IsZero); ("Local"%go, Time__Local); ("Location"%go, Time__Location); ("MarshalBinary"%go, Time__MarshalBinary); ("MarshalJSON"%go, Time__MarshalJSON); ("MarshalText"%go, Time__MarshalText); ("Minute"%go, Time__Minute); ("Month"%go, Time__Month); ("Nanosecond"%go, Time__Nanosecond); ("Round"%go, Time__Round); ("Second"%go, Time__Second); ("String"%go, Time__String); ("Sub"%go, Time__Sub); ("Truncate"%go, Time__Truncate); ("UTC"%go, Time__UTC); ("Unix"%go, Time__Unix); ("UnixMicro"%go, Time__UnixMicro); ("UnixMilli"%go, Time__UnixMilli); ("UnixNano"%go, Time__UnixNano); ("Weekday"%go, Time__Weekday); ("Year"%go, Time__Year); ("YearDay"%go, Time__YearDay); ("Zone"%go, Time__Zone); ("ZoneBounds"%go, Time__ZoneBounds); ("abs"%go, Time__abs); ("appendFormat"%go, Time__appendFormat); ("appendFormatRFC3339"%go, Time__appendFormatRFC3339); ("appendStrictRFC3339"%go, Time__appendStrictRFC3339); ("date"%go, Time__date); ("locabs"%go, Time__locabs)]); ("Time'ptr"%go, [("Add"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Add" (![Time] "$recvAddr")
                 )%V); ("AddDate"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"AddDate" (![Time] "$recvAddr")
                 )%V); ("After"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"After" (![Time] "$recvAddr")
                 )%V); ("AppendFormat"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"AppendFormat" (![Time] "$recvAddr")
                 )%V); ("Before"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Before" (![Time] "$recvAddr")
                 )%V); ("Clock"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Clock" (![Time] "$recvAddr")
                 )%V); ("Compare"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Compare" (![Time] "$recvAddr")
                 )%V); ("Date"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Date" (![Time] "$recvAddr")
                 )%V); ("Day"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Day" (![Time] "$recvAddr")
                 )%V); ("Equal"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Equal" (![Time] "$recvAddr")
                 )%V); ("Format"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Format" (![Time] "$recvAddr")
                 )%V); ("GoString"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"GoString" (![Time] "$recvAddr")
                 )%V); ("GobDecode"%go, Time__GobDecode); ("GobEncode"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"GobEncode" (![Time] "$recvAddr")
                 )%V); ("Hour"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Hour" (![Time] "$recvAddr")
                 )%V); ("ISOWeek"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"ISOWeek" (![Time] "$recvAddr")
                 )%V); ("In"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"In" (![Time] "$recvAddr")
                 )%V); ("IsDST"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"IsDST" (![Time] "$recvAddr")
                 )%V); ("IsZero"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"IsZero" (![Time] "$recvAddr")
                 )%V); ("Local"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Local" (![Time] "$recvAddr")
                 )%V); ("Location"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Location" (![Time] "$recvAddr")
                 )%V); ("MarshalBinary"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"MarshalBinary" (![Time] "$recvAddr")
                 )%V); ("MarshalJSON"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"MarshalJSON" (![Time] "$recvAddr")
                 )%V); ("MarshalText"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"MarshalText" (![Time] "$recvAddr")
                 )%V); ("Minute"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Minute" (![Time] "$recvAddr")
                 )%V); ("Month"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Month" (![Time] "$recvAddr")
                 )%V); ("Nanosecond"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Nanosecond" (![Time] "$recvAddr")
                 )%V); ("Round"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Round" (![Time] "$recvAddr")
                 )%V); ("Second"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Second" (![Time] "$recvAddr")
                 )%V); ("String"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"String" (![Time] "$recvAddr")
                 )%V); ("Sub"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Sub" (![Time] "$recvAddr")
                 )%V); ("Truncate"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Truncate" (![Time] "$recvAddr")
                 )%V); ("UTC"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"UTC" (![Time] "$recvAddr")
                 )%V); ("Unix"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Unix" (![Time] "$recvAddr")
                 )%V); ("UnixMicro"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"UnixMicro" (![Time] "$recvAddr")
                 )%V); ("UnixMilli"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"UnixMilli" (![Time] "$recvAddr")
                 )%V); ("UnixNano"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"UnixNano" (![Time] "$recvAddr")
                 )%V); ("UnmarshalBinary"%go, Time__UnmarshalBinary); ("UnmarshalJSON"%go, Time__UnmarshalJSON); ("UnmarshalText"%go, Time__UnmarshalText); ("Weekday"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Weekday" (![Time] "$recvAddr")
                 )%V); ("Year"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Year" (![Time] "$recvAddr")
                 )%V); ("YearDay"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"YearDay" (![Time] "$recvAddr")
                 )%V); ("Zone"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"Zone" (![Time] "$recvAddr")
                 )%V); ("ZoneBounds"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"ZoneBounds" (![Time] "$recvAddr")
                 )%V); ("abs"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"abs" (![Time] "$recvAddr")
                 )%V); ("addSec"%go, Time__addSec); ("appendFormat"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"appendFormat" (![Time] "$recvAddr")
                 )%V); ("appendFormatRFC3339"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"appendFormatRFC3339" (![Time] "$recvAddr")
                 )%V); ("appendStrictRFC3339"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"appendStrictRFC3339" (![Time] "$recvAddr")
                 )%V); ("date"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"date" (![Time] "$recvAddr")
                 )%V); ("locabs"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Time" #"locabs" (![Time] "$recvAddr")
                 )%V); ("mono"%go, Time__mono); ("nsec"%go, Time__nsec); ("sec"%go, Time__sec); ("setLoc"%go, Time__setLoc); ("setMono"%go, Time__setMono); ("stripMono"%go, Time__stripMono); ("unixSec"%go, Time__unixSec)]); ("Month"%go, [("String"%go, Month__String)]); ("Month'ptr"%go, [("String"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Month" #"String" (![Month] "$recvAddr")
                 )%V)]); ("Weekday"%go, [("String"%go, Weekday__String)]); ("Weekday'ptr"%go, [("String"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Weekday" #"String" (![Weekday] "$recvAddr")
                 )%V)]); ("Duration"%go, [("Abs"%go, Duration__Abs); ("Hours"%go, Duration__Hours); ("Microseconds"%go, Duration__Microseconds); ("Milliseconds"%go, Duration__Milliseconds); ("Minutes"%go, Duration__Minutes); ("Nanoseconds"%go, Duration__Nanoseconds); ("Round"%go, Duration__Round); ("Seconds"%go, Duration__Seconds); ("String"%go, Duration__String); ("Truncate"%go, Duration__Truncate); ("format"%go, Duration__format)]); ("Duration'ptr"%go, [("Abs"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Abs" (![Duration] "$recvAddr")
                 )%V); ("Hours"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Hours" (![Duration] "$recvAddr")
                 )%V); ("Microseconds"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Microseconds" (![Duration] "$recvAddr")
                 )%V); ("Milliseconds"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Milliseconds" (![Duration] "$recvAddr")
                 )%V); ("Minutes"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Minutes" (![Duration] "$recvAddr")
                 )%V); ("Nanoseconds"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Nanoseconds" (![Duration] "$recvAddr")
                 )%V); ("Round"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Round" (![Duration] "$recvAddr")
                 )%V); ("Seconds"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Seconds" (![Duration] "$recvAddr")
                 )%V); ("String"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"String" (![Duration] "$recvAddr")
                 )%V); ("Truncate"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"Truncate" (![Duration] "$recvAddr")
                 )%V); ("format"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"Duration" #"format" (![Duration] "$recvAddr")
                 )%V)]); ("Location"%go, []); ("Location'ptr"%go, [("String"%go, Location__String); ("firstZoneUsed"%go, Location__firstZoneUsed); ("get"%go, Location__get); ("lookup"%go, Location__lookup); ("lookupFirstZone"%go, Location__lookupFirstZone); ("lookupName"%go, Location__lookupName)]); ("zone"%go, []); ("zone'ptr"%go, []); ("zoneTrans"%go, []); ("zoneTrans'ptr"%go, []); ("ruleKind"%go, []); ("ruleKind'ptr"%go, []); ("rule"%go, []); ("rule'ptr"%go, []); ("fileSizeError"%go, [("Error"%go, fileSizeError__Error)]); ("fileSizeError'ptr"%go, [("Error"%go, (λ: "$recvAddr",
                 method_call #pkg_name' #"fileSizeError" #"Error" (![fileSizeError] "$recvAddr")
                 )%V)]); ("dataIO"%go, []); ("dataIO'ptr"%go, [("big4"%go, dataIO__big4); ("big8"%go, dataIO__big8); ("byte"%go, dataIO__byte); ("read"%go, dataIO__read); ("rest"%go, dataIO__rest)])].

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' vars' functions' msets' (λ: <>,
      exception_do (let: "$r0" := ((let: "$ar0" := #(W64 stdZeroMonth) in
      let: "$ar1" := #(W64 stdZeroDay) in
      let: "$ar2" := #(W64 stdZeroHour12) in
      let: "$ar3" := #(W64 stdZeroMinute) in
      let: "$ar4" := #(W64 stdZeroSecond) in
      let: "$ar5" := #(W64 stdYear) in
      array.literal ["$ar0"; "$ar1"; "$ar2"; "$ar3"; "$ar4"; "$ar5"])) in
      do:  ((globals.get #pkg_name' #"std0x"%go) <-[arrayT 6 intT] "$r0");;;
      let: "$r0" := ((let: "$sl0" := #"Sunday"%go in
      let: "$sl1" := #"Monday"%go in
      let: "$sl2" := #"Tuesday"%go in
      let: "$sl3" := #"Wednesday"%go in
      let: "$sl4" := #"Thursday"%go in
      let: "$sl5" := #"Friday"%go in
      let: "$sl6" := #"Saturday"%go in
      slice.literal stringT ["$sl0"; "$sl1"; "$sl2"; "$sl3"; "$sl4"; "$sl5"; "$sl6"])) in
      do:  ((globals.get #pkg_name' #"longDayNames"%go) <-[sliceT] "$r0");;;
      let: "$r0" := ((let: "$sl0" := #"Sun"%go in
      let: "$sl1" := #"Mon"%go in
      let: "$sl2" := #"Tue"%go in
      let: "$sl3" := #"Wed"%go in
      let: "$sl4" := #"Thu"%go in
      let: "$sl5" := #"Fri"%go in
      let: "$sl6" := #"Sat"%go in
      slice.literal stringT ["$sl0"; "$sl1"; "$sl2"; "$sl3"; "$sl4"; "$sl5"; "$sl6"])) in
      do:  ((globals.get #pkg_name' #"shortDayNames"%go) <-[sliceT] "$r0");;;
      let: "$r0" := ((let: "$sl0" := #"Jan"%go in
      let: "$sl1" := #"Feb"%go in
      let: "$sl2" := #"Mar"%go in
      let: "$sl3" := #"Apr"%go in
      let: "$sl4" := #"May"%go in
      let: "$sl5" := #"Jun"%go in
      let: "$sl6" := #"Jul"%go in
      let: "$sl7" := #"Aug"%go in
      let: "$sl8" := #"Sep"%go in
      let: "$sl9" := #"Oct"%go in
      let: "$sl10" := #"Nov"%go in
      let: "$sl11" := #"Dec"%go in
      slice.literal stringT ["$sl0"; "$sl1"; "$sl2"; "$sl3"; "$sl4"; "$sl5"; "$sl6"; "$sl7"; "$sl8"; "$sl9"; "$sl10"; "$sl11"])) in
      do:  ((globals.get #pkg_name' #"shortMonthNames"%go) <-[sliceT] "$r0");;;
      let: "$r0" := ((let: "$sl0" := #"January"%go in
      let: "$sl1" := #"February"%go in
      let: "$sl2" := #"March"%go in
      let: "$sl3" := #"April"%go in
      let: "$sl4" := #"May"%go in
      let: "$sl5" := #"June"%go in
      let: "$sl6" := #"July"%go in
      let: "$sl7" := #"August"%go in
      let: "$sl8" := #"September"%go in
      let: "$sl9" := #"October"%go in
      let: "$sl10" := #"November"%go in
      let: "$sl11" := #"December"%go in
      slice.literal stringT ["$sl0"; "$sl1"; "$sl2"; "$sl3"; "$sl4"; "$sl5"; "$sl6"; "$sl7"; "$sl8"; "$sl9"; "$sl10"; "$sl11"])) in
      do:  ((globals.get #pkg_name' #"longMonthNames"%go) <-[sliceT] "$r0");;;
      let: "$r0" := (let: "$a0" := #"time: invalid number"%go in
      (func_call #errors.pkg_name' #"New"%go) "$a0") in
      do:  ((globals.get #pkg_name' #"errAtoi"%go) <-[error] "$r0");;;
      let: "$r0" := (let: "$a0" := #"bad value for field"%go in
      (func_call #errors.pkg_name' #"New"%go) "$a0") in
      do:  ((globals.get #pkg_name' #"errBad"%go) <-[error] "$r0");;;
      let: "$r0" := (let: "$a0" := #"time: bad [0-9]*"%go in
      (func_call #errors.pkg_name' #"New"%go) "$a0") in
      do:  ((globals.get #pkg_name' #"errLeadingInt"%go) <-[error] "$r0");;;
      let: "$r0" := ((let: "$v0" := Nanosecond in
      let: "$k0" := #"ns"%go in
      let: "$v1" := Microsecond in
      let: "$k1" := #"us"%go in
      let: "$v2" := Microsecond in
      let: "$k2" := #"µs"%go in
      let: "$v3" := Microsecond in
      let: "$k3" := #"μs"%go in
      let: "$v4" := Millisecond in
      let: "$k4" := #"ms"%go in
      let: "$v5" := Second in
      let: "$k5" := #"s"%go in
      let: "$v6" := Minute in
      let: "$k6" := #"m"%go in
      let: "$v7" := Hour in
      let: "$k7" := #"h"%go in
      map.literal uint64T [("$k0", "$v0"); ("$k1", "$v1"); ("$k2", "$v2"); ("$k3", "$v3"); ("$k4", "$v4"); ("$k5", "$v5"); ("$k6", "$v6"); ("$k7", "$v7")])) in
      do:  ((globals.get #pkg_name' #"unitMap"%go) <-[mapT stringT uint64T] "$r0");;;
      let: "$r0" := (let: "$a0" := #"asynctimerchan"%go in
      (func_call #godebug.pkg_name' #"New"%go) "$a0") in
      do:  ((globals.get #pkg_name' #"asynctimerchan"%go) <-[ptrT] "$r0");;;
      let: "$r0" := ((let: "$ar0" := #(W32 0) in
      let: "$ar1" := #(W32 31) in
      let: "$ar2" := #(W32 (31 + 28)) in
      let: "$ar3" := #(W32 ((31 + 28) + 31)) in
      let: "$ar4" := #(W32 (((31 + 28) + 31) + 30)) in
      let: "$ar5" := #(W32 ((((31 + 28) + 31) + 30) + 31)) in
      let: "$ar6" := #(W32 (((((31 + 28) + 31) + 30) + 31) + 30)) in
      let: "$ar7" := #(W32 ((((((31 + 28) + 31) + 30) + 31) + 30) + 31)) in
      let: "$ar8" := #(W32 (((((((31 + 28) + 31) + 30) + 31) + 30) + 31) + 31)) in
      let: "$ar9" := #(W32 ((((((((31 + 28) + 31) + 30) + 31) + 30) + 31) + 31) + 30)) in
      let: "$ar10" := #(W32 (((((((((31 + 28) + 31) + 30) + 31) + 30) + 31) + 31) + 30) + 31)) in
      let: "$ar11" := #(W32 ((((((((((31 + 28) + 31) + 30) + 31) + 30) + 31) + 31) + 30) + 31) + 30)) in
      let: "$ar12" := #(W32 (((((((((((31 + 28) + 31) + 30) + 31) + 30) + 31) + 31) + 30) + 31) + 30) + 31)) in
      array.literal ["$ar0"; "$ar1"; "$ar2"; "$ar3"; "$ar4"; "$ar5"; "$ar6"; "$ar7"; "$ar8"; "$ar9"; "$ar10"; "$ar11"; "$ar12"])) in
      do:  ((globals.get #pkg_name' #"daysBefore"%go) <-[arrayT 13 int32T] "$r0");;;
      let: "$r0" := (((func_call #pkg_name' #"runtimeNano"%go) #()) - #(W64 1)) in
      do:  ((globals.get #pkg_name' #"startNano"%go) <-[int64T] "$r0");;;
      let: "$r0" := (let: "$name" := #"UTC"%go in
      struct.make Location [{
        "name" ::= "$name";
        "zone" ::= zero_val sliceT;
        "tx" ::= zero_val sliceT;
        "extend" ::= zero_val stringT;
        "cacheStart" ::= zero_val int64T;
        "cacheEnd" ::= zero_val int64T;
        "cacheZone" ::= zero_val ptrT
      }]) in
      do:  ((globals.get #pkg_name' #"utcLoc"%go) <-[Location] "$r0");;;
      let: "$r0" := (globals.get #pkg_name' #"utcLoc"%go) in
      do:  ((globals.get #pkg_name' #"UTC"%go) <-[ptrT] "$r0");;;
      let: "$r0" := (globals.get #pkg_name' #"localLoc"%go) in
      do:  ((globals.get #pkg_name' #"Local"%go) <-[ptrT] "$r0");;;
      let: "$r0" := (let: "$a0" := #"time: invalid location name"%go in
      (func_call #errors.pkg_name' #"New"%go) "$a0") in
      do:  ((globals.get #pkg_name' #"errLocation"%go) <-[error] "$r0");;;
      let: "$r0" := (let: "$a0" := #"malformed time zone information"%go in
      (func_call #errors.pkg_name' #"New"%go) "$a0") in
      do:  ((globals.get #pkg_name' #"errBadData"%go) <-[error] "$r0");;;
      let: "$r0" := ((let: "$sl0" := #"/usr/share/zoneinfo/"%go in
      let: "$sl1" := #"/usr/share/lib/zoneinfo/"%go in
      let: "$sl2" := #"/usr/lib/locale/TZ/"%go in
      let: "$sl3" := #"/etc/zoneinfo"%go in
      slice.literal stringT ["$sl0"; "$sl1"; "$sl2"; "$sl3"])) in
      do:  ((globals.get #pkg_name' #"platformZoneSources"%go) <-[sliceT] "$r0"))
      ).

End code.
End time.
