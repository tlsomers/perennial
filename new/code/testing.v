(* autogenerated from testing *)
From New.golang Require Import defn.

Module testing.
Section code.
Context `{ffi_syntax}.


Axiom matchBenchmarks'init : val.

Axiom benchmarkLock'init : val.

Axiom memStats'init : val.

Axiom labelsOnce'init : val.

Axiom hideStdoutForTesting'init : val.

Axiom cover'init : val.

Axiom matchFuzz'init : val.

Axiom _'init : val.

Axiom supportedTypes'init : val.

Axiom matchMutex'init : val.

Axiom cover2'init : val.

Axiom initRan'init : val.

Axiom short'init : val.

Axiom testBinary'init : val.

Axiom errNilPanicOrGoexit'init : val.

Axiom errMain'init : val.

Axiom testingTesting'init : val.

Axiom realStderr'init : val.

Definition pkg_name' : go_string := "testing".

Definition vars' : list (go_string * go_type) := [("matchBenchmarks"%go, ptrT); ("benchmarkLock"%go, sync.Mutex); ("memStats"%go, runtime.MemStats); ("labelsOnce"%go, sync.Once); ("hideStdoutForTesting"%go, boolT); ("cover"%go, Cover); ("matchFuzz"%go, ptrT); ("_"%go, TB); ("supportedTypes"%go, mapT reflect.Type boolT); ("matchMutex"%go, sync.Mutex); ("cover2"%go, structT [
               "mode" :: stringT;
               "tearDown" :: funcT;
               "snapshotcov" :: funcT
             ]); ("initRan"%go, boolT); ("short"%go, ptrT); ("testBinary"%go, stringT); ("_"%go, TB); ("_"%go, TB); ("errNilPanicOrGoexit"%go, error); ("errMain"%go, error); ("testingTesting"%go, boolT); ("realStderr"%go, ptrT)].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [].

End code.
End testing.
