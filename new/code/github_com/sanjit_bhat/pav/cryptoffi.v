(* autogenerated from github.com/sanjit-bhat/pav/cryptoffi *)
From New.golang Require Import defn.

Definition cryptoffi : go_string := "github.com/sanjit-bhat/pav/cryptoffi".

Module cryptoffi.
Section code.
Context `{ffi_syntax}.


Definition HashLen : expr := #(W64 32).

Axiom Hasher : go_type.

Axiom NewHasher : val.

Axiom Hasher__Write : val.

Axiom Hasher__Sum : val.

Axiom SigPrivateKey : go_type.

Axiom SigPublicKey : go_type.

Axiom SigGenerateKey : val.

Axiom SigPrivateKey__Sign : val.

Axiom SigPublicKey__Verify : val.

Axiom VrfPrivateKey : go_type.

Axiom VrfPublicKey : go_type.

Axiom VrfGenerateKey : val.

Axiom VrfPrivateKey__Prove : val.

Axiom VrfPrivateKey__Evaluate : val.

Axiom VrfPublicKey__Verify : val.

Axiom VrfPrivateKey__PublicKey : val.

Axiom VrfPublicKeyEncode : val.

Axiom VrfPublicKeyDecode : val.

Axiom RandBytes : val.

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("NewHasher"%go, NewHasher); ("SigGenerateKey"%go, SigGenerateKey); ("VrfGenerateKey"%go, VrfGenerateKey); ("VrfPublicKeyEncode"%go, VrfPublicKeyEncode); ("VrfPublicKeyDecode"%go, VrfPublicKeyDecode); ("RandBytes"%go, RandBytes)].

Definition msets' : list (go_string * (list (go_string * val))) := [("Hasher"%go, []); ("Hasher'ptr"%go, [("Sum"%go, Hasher__Sum); ("Write"%go, Hasher__Write)]); ("SigPrivateKey"%go, []); ("SigPrivateKey'ptr"%go, [("Sign"%go, SigPrivateKey__Sign)]); ("SigPublicKey"%go, [("Verify"%go, SigPublicKey__Verify)]); ("SigPublicKey'ptr"%go, [("Verify"%go, (λ: "$recvAddr",
                 method_call #cryptoffi.cryptoffi #"SigPublicKey" #"Verify" (![#SigPublicKey] "$recvAddr")
                 )%V)]); ("VrfPrivateKey"%go, []); ("VrfPrivateKey'ptr"%go, [("Evaluate"%go, VrfPrivateKey__Evaluate); ("Prove"%go, VrfPrivateKey__Prove); ("PublicKey"%go, VrfPrivateKey__PublicKey)]); ("VrfPublicKey"%go, []); ("VrfPublicKey'ptr"%go, [("Verify"%go, VrfPublicKey__Verify)])].

#[global] Instance info' : PkgInfo cryptoffi.cryptoffi :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Axiom _'init : val.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init cryptoffi.cryptoffi (λ: <>,
      exception_do (do:  #())
      ).

End code.
End cryptoffi.
