(* autogenerated from github.com/mit-pdos/gokv/bank *)
From New.golang Require Import defn.

Module bank.
Section code.
Context `{ffi_syntax}.


Definition BAL_TOTAL : expr := #(W64 1000).

Definition BankClerk : go_type := structT [
  "lck" :: ptrT;
  "kvck" :: kv.Kv;
  "accts" :: sliceT
].

Axiom acquire_two_good : val.

Axiom acquire_two : val.

Axiom release_two : val.

Axiom encodeInt : val.

Axiom decodeInt : val.

Axiom BankClerk__transfer_internal : val.

Axiom BankClerk__SimpleTransfer : val.

Axiom BankClerk__get_total : val.

Axiom BankClerk__SimpleAudit : val.

Axiom MakeBankClerkSlice : val.

Axiom MakeBankClerk : val.

Definition pkg_name' : go_string := "github.com/mit-pdos/gokv/bank".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("acquire_two_good"%go, acquire_two_good); ("acquire_two"%go, acquire_two); ("release_two"%go, release_two); ("encodeInt"%go, encodeInt); ("decodeInt"%go, decodeInt); ("MakeBankClerkSlice"%go, MakeBankClerkSlice); ("MakeBankClerk"%go, MakeBankClerk)].

Definition msets' : list (go_string * (list (go_string * val))) := [("BankClerk"%go, []); ("BankClerk'ptr"%go, [("SimpleAudit"%go, BankClerk__SimpleAudit); ("SimpleTransfer"%go, BankClerk__SimpleTransfer); ("get_total"%go, BankClerk__get_total); ("transfer_internal"%go, BankClerk__transfer_internal)])].

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' vars' functions' msets' (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End bank.
