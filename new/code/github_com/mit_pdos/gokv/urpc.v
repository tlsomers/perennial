(* autogenerated from github.com/mit-pdos/gokv/urpc *)
From New.golang Require Import defn.

From New Require Import grove_prelude.
Module urpc.
Section code.


Definition Server : go_type := structT [
  "handlers" :: mapT uint64T funcT
].

Axiom Server__rpcHandle : val.

Axiom MakeServer : val.

Axiom Server__readThread : val.

Axiom Server__Serve : val.

Definition callbackStateWaiting : expr := #(W64 0).

Definition callbackStateDone : expr := #(W64 1).

Definition callbackStateAborted : expr := #(W64 2).

Definition Callback : go_type := structT [
  "reply" :: ptrT;
  "state" :: ptrT;
  "cond" :: ptrT
].

Definition Client : go_type := structT [
  "mu" :: ptrT;
  "conn" :: grove_ffi.Connection;
  "seq" :: uint64T;
  "pending" :: mapT uint64T ptrT
].

Axiom Client__replyThread : val.

Axiom TryMakeClient : val.

Axiom MakeClient : val.

Definition Error : go_type := uint64T.

Definition ErrNone : expr := #(W64 0).

Definition ErrTimeout : expr := #(W64 1).

Definition ErrDisconnect : expr := #(W64 2).

Axiom Client__CallStart : val.

Axiom Client__CallComplete : val.

Axiom Client__Call : val.

Definition pkg_name' : go_string := "github.com/mit-pdos/gokv/urpc".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("MakeServer"%go, MakeServer); ("TryMakeClient"%go, TryMakeClient); ("MakeClient"%go, MakeClient)].

Definition msets' : list (go_string * (list (go_string * val))) := [("Server"%go, []); ("Server'ptr"%go, [("Serve"%go, Server__Serve); ("readThread"%go, Server__readThread); ("rpcHandle"%go, Server__rpcHandle)]); ("Callback"%go, []); ("Callback'ptr"%go, []); ("Client"%go, []); ("Client'ptr"%go, [("Call"%go, Client__Call); ("CallComplete"%go, Client__CallComplete); ("CallStart"%go, Client__CallStart); ("replyThread"%go, Client__replyThread)])].

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' vars' functions' msets' (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End urpc.
