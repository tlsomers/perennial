(* autogenerated from github.com/mit-pdos/gokv/globals_test *)
From New.golang Require Import defn.

Section code.
Context `{ffi_syntax}.

(* go: globals.go:3:6 *)
Definition foo' : val :=
  rec: "foo'" <> :=
    exception_do (return: (#(W64 10))).

Definition pkg_name' : go_string := "github.com/mit-pdos/gokv/globals_test".

Definition foo : (go_string * go_string) := (pkg_name', "foo"%go).

Definition GlobalX : (go_string * go_string) := (pkg_name', "GlobalX"%go).

Definition globalY : (go_string * go_string) := (pkg_name', "globalY"%go).

Definition globalA : (go_string * go_string) := (pkg_name', "globalA"%go).

Definition globalB : (go_string * go_string) := (pkg_name', "globalB"%go).

(* go: globals.go:12:6 *)
Definition other' : val :=
  rec: "other'" <> :=
    exception_do (let: "$r0" := #"ok"%go in
    do:  ((globals.get globalY #()) <-[stringT] "$r0")).

Definition other : (go_string * go_string) := (pkg_name', "other"%go).

(* go: globals.go:16:6 *)
Definition bar' : val :=
  rec: "bar'" <> :=
    exception_do (do:  ((func_call other #()) #());;;
    (if: ((![uint64T] (globals.get GlobalX #())) ≠ #(W64 10)) || ((![stringT] (globals.get globalY #())) ≠ #"ok"%go)
    then
      do:  (let: "$a0" := (interface.make string' #"bad"%go) in
      Panic "$a0")
    else do:  #())).

Definition bar : (go_string * go_string) := (pkg_name', "bar"%go).

(* go: globals.go:31:6 *)
Definition main' : val :=
  rec: "main'" <> :=
    exception_do (do:  ((func_call bar #()) #())).

Definition main : (go_string * go_string) := (pkg_name', "main"%go).

Definition define' : val :=
  rec: "define'" <> :=
    exception_do (do:  (globals.put globalB (ref_ty stringT (zero_val stringT)));;;
    do:  (globals.put globalA (ref_ty stringT (zero_val stringT)));;;
    do:  (globals.put globalY (ref_ty stringT (zero_val stringT)));;;
    do:  (globals.put GlobalX (ref_ty uint64T (zero_val uint64T)))).

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' (λ: <>,
      exception_do (do:  (define' #());;;
      let: "$r0" := ((func_call foo #()) #()) in
      do:  ((globals.get GlobalX #()) <-[uint64T] "$r0");;;
      let: "$r0" := #"a"%go in
      do:  ((globals.get globalA #()) <-[stringT] "$r0");;;
      let: "$r0" := #"b"%go in
      do:  ((globals.get globalB #()) <-[stringT] "$r0");;;
      do:  ((λ: <>,
        exception_do (let: "$r0" := ((![uint64T] (globals.get GlobalX #())) + #(W64 0)) in
        do:  ((globals.get GlobalX #()) <-[uint64T] "$r0"))
        ) #());;;
      do:  ((λ: <>,
        exception_do (let: "$r0" := #""%go in
        do:  ((globals.get globalY #()) <-[stringT] "$r0"))
        ) #()))
      ).

End code.
