(* autogenerated from github.com/mit-pdos/gokv/asyncfile *)
From New.golang Require Import defn.

From New Require Import grove_prelude.
Module asyncfile.
Section code.


Definition AsyncFile : go_type := structT [
  "mu" :: ptrT;
  "data" :: sliceT;
  "filename" :: stringT;
  "index" :: uint64T;
  "indexCond" :: ptrT;
  "durableIndex" :: uint64T;
  "durableIndexCond" :: ptrT;
  "closeRequested" :: boolT;
  "closed" :: boolT;
  "closedCond" :: ptrT
].

Axiom AsyncFile__Write : val.

Axiom AsyncFile__wait : val.

Axiom AsyncFile__flushThread : val.

Axiom AsyncFile__Close : val.

Axiom MakeAsyncFile : val.

Definition pkg_name' : go_string := "github.com/mit-pdos/gokv/asyncfile".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("MakeAsyncFile"%go, MakeAsyncFile)].

Definition msets' : list (go_string * (list (go_string * val))) := [("AsyncFile"%go, []); ("AsyncFile'ptr"%go, [("Close"%go, AsyncFile__Close); ("Write"%go, AsyncFile__Write); ("flushThread"%go, AsyncFile__flushThread); ("wait"%go, AsyncFile__wait)])].

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' vars' functions' msets' (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End asyncfile.
