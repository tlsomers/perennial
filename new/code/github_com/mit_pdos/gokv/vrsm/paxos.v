(* autogenerated from github.com/mit-pdos/gokv/vrsm/paxos *)
From New.golang Require Import defn.

From New Require Import grove_prelude.
Module paxos.
Section code.


Definition RPC_APPLY_AS_FOLLOWER : expr := #(W64 0).

Definition RPC_ENTER_NEW_EPOCH : expr := #(W64 1).

Definition RPC_BECOME_LEADER : expr := #(W64 2).

Definition singleClerk : go_type := structT [
  "cl" :: ptrT
].

Axiom MakeSingleClerk : val.

Axiom singleClerk__enterNewEpoch : val.

Axiom singleClerk__applyAsFollower : val.

Axiom singleClerk__TryBecomeLeader : val.

Definition Error : go_type := uint64T.

Definition ENone : expr := #(W64 0).

Definition EEpochStale : expr := #(W64 1).

Definition EOutOfOrder : expr := #(W64 2).

Definition ETimeout : expr := #(W64 3).

Definition ENotLeader : expr := #(W64 4).

Definition applyAsFollowerArgs : go_type := structT [
  "epoch" :: uint64T;
  "nextIndex" :: uint64T;
  "state" :: sliceT
].

Axiom encodeApplyAsFollowerArgs : val.

Axiom decodeApplyAsFollowerArgs : val.

Definition applyAsFollowerReply : go_type := structT [
  "err" :: Error
].

Axiom decodeApplyAsFollowerReply : val.

Axiom encodeApplyAsFollowerReply : val.

Definition enterNewEpochArgs : go_type := structT [
  "epoch" :: uint64T
].

Axiom encodeEnterNewEpochArgs : val.

Axiom decodeEnterNewEpochArgs : val.

Definition enterNewEpochReply : go_type := structT [
  "err" :: Error;
  "acceptedEpoch" :: uint64T;
  "nextIndex" :: uint64T;
  "state" :: sliceT
].

Axiom decodeEnterNewEpochReply : val.

Axiom encodeEnterNewEpochReply : val.

Definition applyReply : go_type := structT [
  "err" :: Error;
  "ret" :: sliceT
].

Axiom encodeApplyReply : val.

Axiom decodeApplyReply : val.

Axiom boolToU64 : val.

Axiom encodePaxosState : val.

Axiom decodePaxosState : val.

Definition paxosState : go_type := structT [
  "epoch" :: uint64T;
  "acceptedEpoch" :: uint64T;
  "nextIndex" :: uint64T;
  "state" :: sliceT;
  "isLeader" :: boolT
].

Definition Server : go_type := structT [
  "mu" :: ptrT;
  "ps" :: ptrT;
  "storage" :: ptrT;
  "clerks" :: sliceT
].

Axiom Server__withLock : val.

Axiom Server__applyAsFollower : val.

Axiom Server__enterNewEpoch : val.

Axiom Server__TryBecomeLeader : val.

Axiom Server__TryAcquire : val.

Axiom Server__WeakRead : val.

Axiom makeServer : val.

Axiom StartServer : val.

Definition pkg_name' : go_string := "github.com/mit-pdos/gokv/vrsm/paxos".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("MakeSingleClerk"%go, MakeSingleClerk); ("encodeApplyAsFollowerArgs"%go, encodeApplyAsFollowerArgs); ("decodeApplyAsFollowerArgs"%go, decodeApplyAsFollowerArgs); ("decodeApplyAsFollowerReply"%go, decodeApplyAsFollowerReply); ("encodeApplyAsFollowerReply"%go, encodeApplyAsFollowerReply); ("encodeEnterNewEpochArgs"%go, encodeEnterNewEpochArgs); ("decodeEnterNewEpochArgs"%go, decodeEnterNewEpochArgs); ("decodeEnterNewEpochReply"%go, decodeEnterNewEpochReply); ("encodeEnterNewEpochReply"%go, encodeEnterNewEpochReply); ("encodeApplyReply"%go, encodeApplyReply); ("decodeApplyReply"%go, decodeApplyReply); ("boolToU64"%go, boolToU64); ("encodePaxosState"%go, encodePaxosState); ("decodePaxosState"%go, decodePaxosState); ("makeServer"%go, makeServer); ("StartServer"%go, StartServer)].

Definition msets' : list (go_string * (list (go_string * val))) := [("singleClerk"%go, []); ("singleClerk'ptr"%go, [("TryBecomeLeader"%go, singleClerk__TryBecomeLeader); ("applyAsFollower"%go, singleClerk__applyAsFollower); ("enterNewEpoch"%go, singleClerk__enterNewEpoch)]); ("Error"%go, []); ("Error'ptr"%go, []); ("applyAsFollowerArgs"%go, []); ("applyAsFollowerArgs'ptr"%go, []); ("applyAsFollowerReply"%go, []); ("applyAsFollowerReply'ptr"%go, []); ("enterNewEpochArgs"%go, []); ("enterNewEpochArgs'ptr"%go, []); ("enterNewEpochReply"%go, []); ("enterNewEpochReply'ptr"%go, []); ("applyReply"%go, []); ("applyReply'ptr"%go, []); ("paxosState"%go, []); ("paxosState'ptr"%go, []); ("Server"%go, []); ("Server'ptr"%go, [("TryAcquire"%go, Server__TryAcquire); ("TryBecomeLeader"%go, Server__TryBecomeLeader); ("WeakRead"%go, Server__WeakRead); ("applyAsFollower"%go, Server__applyAsFollower); ("enterNewEpoch"%go, Server__enterNewEpoch); ("withLock"%go, Server__withLock)])].

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init pkg_name' vars' functions' msets' (Î»: <>,
      exception_do (do:  #())
      ).

End code.
End paxos.
