(* autogenerated from etcdclient *)
From New.golang Require Import defn.

Module etcdclient.
Section code.
Context `{ffi_syntax}.


Definition KeyValue : go_type := structT [
  "Key" :: sliceT;
  "CreateRevision" :: int64T;
  "ModRevision" :: int64T;
  "Version" :: int64T;
  "Value" :: sliceT;
  "Lease" :: int64T;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition ResponseHeader : go_type := structT [
  "ClusterId" :: uint64T;
  "MemberId" :: uint64T;
  "Revision" :: int64T;
  "RaftTerm" :: uint64T;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition PutRequest : go_type := structT [
  "Key" :: sliceT;
  "Value" :: sliceT;
  "Lease" :: int64T;
  "PrevKv" :: boolT;
  "IgnoreValue" :: boolT;
  "IgnoreLease" :: boolT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition PutResponse : go_type := structT [
  "Header" :: ptrT;
  "PrevKv" :: ptrT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition opType : go_type := intT.

Definition tRange : expr := #(W64 (0 + 1)).

Definition tPut : expr := #(W64 2).

Definition tDeleteRange : expr := #(W64 3).

Definition tTxn : expr := #(W64 4).

Definition LeaseID : go_type := int64T.

Definition Compare_CompareResult : go_type := int32T.

Definition Compare_CompareTarget : go_type := int32T.

Definition isCompare_TargetUnion : go_type := interfaceT.

Definition Compare : go_type := structT [
  "Result" :: Compare_CompareResult;
  "Target" :: Compare_CompareTarget;
  "Key" :: sliceT;
  "TargetUnion" :: isCompare_TargetUnion;
  "RangeEnd" :: sliceT;
  "XXX_NoUnkeyedLiteral" :: structT [
  ];
  "XXX_unrecognized" :: sliceT;
  "XXX_sizecache" :: int32T
].

Definition Cmp : go_type := Compare.

Definition Op : go_type := structT [
  "t" :: opType;
  "key" :: sliceT;
  "end" :: sliceT;
  "limit" :: int64T;
  "sort" :: ptrT;
  "serializable" :: boolT;
  "keysOnly" :: boolT;
  "countOnly" :: boolT;
  "minModRev" :: int64T;
  "maxModRev" :: int64T;
  "minCreateRev" :: int64T;
  "maxCreateRev" :: int64T;
  "rev" :: int64T;
  "prevKV" :: boolT;
  "fragment" :: boolT;
  "ignoreValue" :: boolT;
  "ignoreLease" :: boolT;
  "progressNotify" :: boolT;
  "createdNotify" :: boolT;
  "filterPut" :: boolT;
  "filterDelete" :: boolT;
  "val" :: sliceT;
  "leaseID" :: LeaseID;
  "cmps" :: sliceT;
  "thenOps" :: sliceT;
  "elseOps" :: sliceT;
  "isOptsWithFromKey" :: boolT;
  "isOptsWithPrefix" :: boolT
].

Definition OpOption : go_type := funcT.

Definition SortTarget : go_type := intT.

Definition SortOrder : go_type := intT.

Definition SortNone : expr := #(W64 0).

Definition SortAscend : expr := #(W64 1).

Definition SortDescend : expr := #(W64 2).

Definition SortByKey : expr := #(W64 0).

Definition SortByVersion : expr := #(W64 1).

Definition SortByCreateRevision : expr := #(W64 2).

Definition SortByModRevision : expr := #(W64 3).

Definition SortByValue : expr := #(W64 4).

Definition SortOption : go_type := structT [
  "Target" :: SortTarget;
  "Order" :: SortOrder
].

Definition pkg_name' : go_string := "etcdclient".

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("KeyValue"%go, []); ("KeyValue'ptr"%go, []); ("ResponseHeader"%go, []); ("ResponseHeader'ptr"%go, []); ("PutRequest"%go, []); ("PutRequest'ptr"%go, []); ("PutResponse"%go, []); ("PutResponse'ptr"%go, []); ("opType"%go, []); ("opType'ptr"%go, []); ("Op"%go, []); ("Op'ptr"%go, []); ("OpOption"%go, []); ("OpOption'ptr"%go, []); ("SortTarget"%go, []); ("SortTarget'ptr"%go, []); ("SortOrder"%go, []); ("SortOrder'ptr"%go, []); ("SortOption"%go, []); ("SortOption'ptr"%go, []); ("LeaseID"%go, []); ("LeaseID'ptr"%go, []); ("Cmp"%go, []); ("Cmp'ptr"%go, []); ("Compare"%go, []); ("Compare'ptr"%go, []); ("Compare_CompareResult"%go, []); ("Compare_CompareResult'ptr"%go, []); ("Compare_CompareTarget"%go, []); ("Compare_CompareTarget'ptr"%go, [])].

End code.
End etcdclient.
