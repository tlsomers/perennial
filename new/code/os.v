(* autogenerated from os *)
From New.golang Require Import defn.

Module os.
Section code.
Context `{ffi_syntax}.


Axiom testingForceReadDirLstat'init : val.

Axiom dirBufPool'init : val.

Axiom ErrInvalid'init : val.

Axiom ErrProcessDone'init : val.

Axiom Interrupt'init : val.

Axiom Stdin'init : val.

Axiom errWriteAtInAppendMode'init : val.

Axiom lstat'init : val.

Axiom checkWrapErr'init : val.

Axiom getwdCache'init : val.

Axiom checkPidfdOnce'init : val.

Axiom Args'init : val.

Axiom errPatternHasSeparator'init : val.

Axiom pollCopyFileRange'init : val.

Definition pkg_name' : go_string := "os".

Definition vars' : list (go_string * go_type) := [("testingForceReadDirLstat"%go, boolT); ("dirBufPool"%go, sync.Pool); ("ErrInvalid"%go, error); ("ErrProcessDone"%go, error); ("Interrupt"%go, Signal); ("Stdin"%go, ptrT); ("errWriteAtInAppendMode"%go, error); ("lstat"%go, funcT); ("checkWrapErr"%go, boolT); ("getwdCache"%go, structT [
               "Mutex" :: sync.Mutex;
               "dir" :: stringT
             ]); ("checkPidfdOnce"%go, funcT); ("Args"%go, sliceT); ("errPatternHasSeparator"%go, error); ("pollCopyFileRange"%go, funcT)].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [].

End code.
End os.
