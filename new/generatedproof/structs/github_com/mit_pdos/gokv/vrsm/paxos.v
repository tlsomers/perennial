(* autogenerated by goose record generator; do not modify *)
From New.code Require Import github_com.mit_pdos.gokv.vrsm.paxos.
From New.golang Require Import theory.

Axiom falso : False.

Module singleClerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl : loc;
}.
End def.
End singleClerk.


Global Instance settable_singleClerk `{ffi_syntax}: Settable _ :=
  settable! singleClerk.mk < singleClerk.cl >.
Global Instance into_val_singleClerk `{ffi_syntax} : IntoVal singleClerk.t.
Admitted.

Global Instance into_val_typed_singleClerk `{ffi_syntax} : IntoValTyped singleClerk.t singleClerk :=
{|
  default_val := singleClerk.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_singleClerk_cl `{ffi_syntax} : IntoValStructField "cl" singleClerk singleClerk.cl.
Admitted.

Instance wp_struct_make_singleClerk `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} cl:
  PureWp True
    (struct.make singleClerk (alist_val [
      "cl" ::= #cl
    ]))%V 
    #(singleClerk.mk cl).
Admitted.

Module applyAsFollowerArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch : w64;
  nextIndex : w64;
  state : slice.t;
}.
End def.
End applyAsFollowerArgs.


Global Instance settable_applyAsFollowerArgs `{ffi_syntax}: Settable _ :=
  settable! applyAsFollowerArgs.mk < applyAsFollowerArgs.epoch; applyAsFollowerArgs.nextIndex; applyAsFollowerArgs.state >.
Global Instance into_val_applyAsFollowerArgs `{ffi_syntax} : IntoVal applyAsFollowerArgs.t.
Admitted.

Global Instance into_val_typed_applyAsFollowerArgs `{ffi_syntax} : IntoValTyped applyAsFollowerArgs.t applyAsFollowerArgs :=
{|
  default_val := applyAsFollowerArgs.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_applyAsFollowerArgs_epoch `{ffi_syntax} : IntoValStructField "epoch" applyAsFollowerArgs applyAsFollowerArgs.epoch.
Admitted.

Global Instance into_val_struct_field_applyAsFollowerArgs_nextIndex `{ffi_syntax} : IntoValStructField "nextIndex" applyAsFollowerArgs applyAsFollowerArgs.nextIndex.
Admitted.

Global Instance into_val_struct_field_applyAsFollowerArgs_state `{ffi_syntax} : IntoValStructField "state" applyAsFollowerArgs applyAsFollowerArgs.state.
Admitted.

Instance wp_struct_make_applyAsFollowerArgs `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} epoch nextIndex state:
  PureWp True
    (struct.make applyAsFollowerArgs (alist_val [
      "epoch" ::= #epoch;
      "nextIndex" ::= #nextIndex;
      "state" ::= #state
    ]))%V 
    #(applyAsFollowerArgs.mk epoch nextIndex state).
Admitted.

Module applyAsFollowerReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err : w64;
}.
End def.
End applyAsFollowerReply.


Global Instance settable_applyAsFollowerReply `{ffi_syntax}: Settable _ :=
  settable! applyAsFollowerReply.mk < applyAsFollowerReply.err >.
Global Instance into_val_applyAsFollowerReply `{ffi_syntax} : IntoVal applyAsFollowerReply.t.
Admitted.

Global Instance into_val_typed_applyAsFollowerReply `{ffi_syntax} : IntoValTyped applyAsFollowerReply.t applyAsFollowerReply :=
{|
  default_val := applyAsFollowerReply.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_applyAsFollowerReply_err `{ffi_syntax} : IntoValStructField "err" applyAsFollowerReply applyAsFollowerReply.err.
Admitted.

Instance wp_struct_make_applyAsFollowerReply `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} err:
  PureWp True
    (struct.make applyAsFollowerReply (alist_val [
      "err" ::= #err
    ]))%V 
    #(applyAsFollowerReply.mk err).
Admitted.

Module enterNewEpochArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch : w64;
}.
End def.
End enterNewEpochArgs.


Global Instance settable_enterNewEpochArgs `{ffi_syntax}: Settable _ :=
  settable! enterNewEpochArgs.mk < enterNewEpochArgs.epoch >.
Global Instance into_val_enterNewEpochArgs `{ffi_syntax} : IntoVal enterNewEpochArgs.t.
Admitted.

Global Instance into_val_typed_enterNewEpochArgs `{ffi_syntax} : IntoValTyped enterNewEpochArgs.t enterNewEpochArgs :=
{|
  default_val := enterNewEpochArgs.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_enterNewEpochArgs_epoch `{ffi_syntax} : IntoValStructField "epoch" enterNewEpochArgs enterNewEpochArgs.epoch.
Admitted.

Instance wp_struct_make_enterNewEpochArgs `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} epoch:
  PureWp True
    (struct.make enterNewEpochArgs (alist_val [
      "epoch" ::= #epoch
    ]))%V 
    #(enterNewEpochArgs.mk epoch).
Admitted.

Module enterNewEpochReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err : w64;
  acceptedEpoch : w64;
  nextIndex : w64;
  state : slice.t;
}.
End def.
End enterNewEpochReply.


Global Instance settable_enterNewEpochReply `{ffi_syntax}: Settable _ :=
  settable! enterNewEpochReply.mk < enterNewEpochReply.err; enterNewEpochReply.acceptedEpoch; enterNewEpochReply.nextIndex; enterNewEpochReply.state >.
Global Instance into_val_enterNewEpochReply `{ffi_syntax} : IntoVal enterNewEpochReply.t.
Admitted.

Global Instance into_val_typed_enterNewEpochReply `{ffi_syntax} : IntoValTyped enterNewEpochReply.t enterNewEpochReply :=
{|
  default_val := enterNewEpochReply.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_enterNewEpochReply_err `{ffi_syntax} : IntoValStructField "err" enterNewEpochReply enterNewEpochReply.err.
Admitted.

Global Instance into_val_struct_field_enterNewEpochReply_acceptedEpoch `{ffi_syntax} : IntoValStructField "acceptedEpoch" enterNewEpochReply enterNewEpochReply.acceptedEpoch.
Admitted.

Global Instance into_val_struct_field_enterNewEpochReply_nextIndex `{ffi_syntax} : IntoValStructField "nextIndex" enterNewEpochReply enterNewEpochReply.nextIndex.
Admitted.

Global Instance into_val_struct_field_enterNewEpochReply_state `{ffi_syntax} : IntoValStructField "state" enterNewEpochReply enterNewEpochReply.state.
Admitted.

Instance wp_struct_make_enterNewEpochReply `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} err acceptedEpoch nextIndex state:
  PureWp True
    (struct.make enterNewEpochReply (alist_val [
      "err" ::= #err;
      "acceptedEpoch" ::= #acceptedEpoch;
      "nextIndex" ::= #nextIndex;
      "state" ::= #state
    ]))%V 
    #(enterNewEpochReply.mk err acceptedEpoch nextIndex state).
Admitted.

Module applyReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err : w64;
  ret : slice.t;
}.
End def.
End applyReply.


Global Instance settable_applyReply `{ffi_syntax}: Settable _ :=
  settable! applyReply.mk < applyReply.err; applyReply.ret >.
Global Instance into_val_applyReply `{ffi_syntax} : IntoVal applyReply.t.
Admitted.

Global Instance into_val_typed_applyReply `{ffi_syntax} : IntoValTyped applyReply.t applyReply :=
{|
  default_val := applyReply.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_applyReply_err `{ffi_syntax} : IntoValStructField "err" applyReply applyReply.err.
Admitted.

Global Instance into_val_struct_field_applyReply_ret `{ffi_syntax} : IntoValStructField "ret" applyReply applyReply.ret.
Admitted.

Instance wp_struct_make_applyReply `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} err ret:
  PureWp True
    (struct.make applyReply (alist_val [
      "err" ::= #err;
      "ret" ::= #ret
    ]))%V 
    #(applyReply.mk err ret).
Admitted.

Module paxosState.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch : w64;
  acceptedEpoch : w64;
  nextIndex : w64;
  state : slice.t;
  isLeader : bool;
}.
End def.
End paxosState.


Global Instance settable_paxosState `{ffi_syntax}: Settable _ :=
  settable! paxosState.mk < paxosState.epoch; paxosState.acceptedEpoch; paxosState.nextIndex; paxosState.state; paxosState.isLeader >.
Global Instance into_val_paxosState `{ffi_syntax} : IntoVal paxosState.t.
Admitted.

Global Instance into_val_typed_paxosState `{ffi_syntax} : IntoValTyped paxosState.t paxosState :=
{|
  default_val := paxosState.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_paxosState_epoch `{ffi_syntax} : IntoValStructField "epoch" paxosState paxosState.epoch.
Admitted.

Global Instance into_val_struct_field_paxosState_acceptedEpoch `{ffi_syntax} : IntoValStructField "acceptedEpoch" paxosState paxosState.acceptedEpoch.
Admitted.

Global Instance into_val_struct_field_paxosState_nextIndex `{ffi_syntax} : IntoValStructField "nextIndex" paxosState paxosState.nextIndex.
Admitted.

Global Instance into_val_struct_field_paxosState_state `{ffi_syntax} : IntoValStructField "state" paxosState paxosState.state.
Admitted.

Global Instance into_val_struct_field_paxosState_isLeader `{ffi_syntax} : IntoValStructField "isLeader" paxosState paxosState.isLeader.
Admitted.

Instance wp_struct_make_paxosState `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} epoch acceptedEpoch nextIndex state isLeader:
  PureWp True
    (struct.make paxosState (alist_val [
      "epoch" ::= #epoch;
      "acceptedEpoch" ::= #acceptedEpoch;
      "nextIndex" ::= #nextIndex;
      "state" ::= #state;
      "isLeader" ::= #isLeader
    ]))%V 
    #(paxosState.mk epoch acceptedEpoch nextIndex state isLeader).
Admitted.

Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu : loc;
  ps : loc;
  storage : loc;
  clerks : slice.t;
}.
End def.
End Server.


Global Instance settable_Server `{ffi_syntax}: Settable _ :=
  settable! Server.mk < Server.mu; Server.ps; Server.storage; Server.clerks >.
Global Instance into_val_Server `{ffi_syntax} : IntoVal Server.t.
Admitted.

Global Instance into_val_typed_Server `{ffi_syntax} : IntoValTyped Server.t Server :=
{|
  default_val := Server.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Server_mu `{ffi_syntax} : IntoValStructField "mu" Server Server.mu.
Admitted.

Global Instance into_val_struct_field_Server_ps `{ffi_syntax} : IntoValStructField "ps" Server Server.ps.
Admitted.

Global Instance into_val_struct_field_Server_storage `{ffi_syntax} : IntoValStructField "storage" Server Server.storage.
Admitted.

Global Instance into_val_struct_field_Server_clerks `{ffi_syntax} : IntoValStructField "clerks" Server Server.clerks.
Admitted.

Instance wp_struct_make_Server `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu ps storage clerks:
  PureWp True
    (struct.make Server (alist_val [
      "mu" ::= #mu;
      "ps" ::= #ps;
      "storage" ::= #storage;
      "clerks" ::= #clerks
    ]))%V 
    #(Server.mk mu ps storage clerks).
Admitted.

