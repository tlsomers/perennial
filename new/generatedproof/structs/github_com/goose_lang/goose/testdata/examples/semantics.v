(* autogenerated by goose record generator; do not modify *)
From New.code Require Import github_com.goose_lang.goose.testdata.examples.semantics.
From New.golang Require Import theory.

Axiom falso : False.

Module unit.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End unit.

Global Instance into_val_unit `{ffi_syntax} : IntoVal unit.t.
Admitted.

Global Instance into_val_typed_unit `{ffi_syntax} : IntoValTyped unit.t unit :=
{|
  default_val := unit.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Instance wp_struct_make_unit `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make unit (alist_val [
    ]))%V 
    #(unit.mk).
Admitted.

Module Enc.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p : slice.t;
}.
End def.
End Enc.


Global Instance settable_Enc `{ffi_syntax}: Settable _ :=
  settable! Enc.mk < Enc.p >.
Global Instance into_val_Enc `{ffi_syntax} : IntoVal Enc.t.
Admitted.

Global Instance into_val_typed_Enc `{ffi_syntax} : IntoValTyped Enc.t Enc :=
{|
  default_val := Enc.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Enc_p `{ffi_syntax} : IntoValStructField "p" Enc Enc.p.
Admitted.

Instance wp_struct_make_Enc `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p:
  PureWp True
    (struct.make Enc (alist_val [
      "p" ::= #p
    ]))%V 
    #(Enc.mk p).
Admitted.

Module Dec.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p : slice.t;
}.
End def.
End Dec.


Global Instance settable_Dec `{ffi_syntax}: Settable _ :=
  settable! Dec.mk < Dec.p >.
Global Instance into_val_Dec `{ffi_syntax} : IntoVal Dec.t.
Admitted.

Global Instance into_val_typed_Dec `{ffi_syntax} : IntoValTyped Dec.t Dec :=
{|
  default_val := Dec.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Dec_p `{ffi_syntax} : IntoValStructField "p" Dec Dec.p.
Admitted.

Instance wp_struct_make_Dec `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p:
  PureWp True
    (struct.make Dec (alist_val [
      "p" ::= #p
    ]))%V 
    #(Dec.mk p).
Admitted.

Module Editor.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s : slice.t;
  next_val : w64;
}.
End def.
End Editor.


Global Instance settable_Editor `{ffi_syntax}: Settable _ :=
  settable! Editor.mk < Editor.s; Editor.next_val >.
Global Instance into_val_Editor `{ffi_syntax} : IntoVal Editor.t.
Admitted.

Global Instance into_val_typed_Editor `{ffi_syntax} : IntoValTyped Editor.t Editor :=
{|
  default_val := Editor.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Editor_s `{ffi_syntax} : IntoValStructField "s" Editor Editor.s.
Admitted.

Global Instance into_val_struct_field_Editor_next_val `{ffi_syntax} : IntoValStructField "next_val" Editor Editor.next_val.
Admitted.

Instance wp_struct_make_Editor `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} s next_val:
  PureWp True
    (struct.make Editor (alist_val [
      "s" ::= #s;
      "next_val" ::= #next_val
    ]))%V 
    #(Editor.mk s next_val).
Admitted.

Module Pair.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x : w64;
  y : w64;
}.
End def.
End Pair.


Global Instance settable_Pair `{ffi_syntax}: Settable _ :=
  settable! Pair.mk < Pair.x; Pair.y >.
Global Instance into_val_Pair `{ffi_syntax} : IntoVal Pair.t.
Admitted.

Global Instance into_val_typed_Pair `{ffi_syntax} : IntoValTyped Pair.t Pair :=
{|
  default_val := Pair.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Pair_x `{ffi_syntax} : IntoValStructField "x" Pair Pair.x.
Admitted.

Global Instance into_val_struct_field_Pair_y `{ffi_syntax} : IntoValStructField "y" Pair Pair.y.
Admitted.

Instance wp_struct_make_Pair `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x y:
  PureWp True
    (struct.make Pair (alist_val [
      "x" ::= #x;
      "y" ::= #y
    ]))%V 
    #(Pair.mk x y).
Admitted.

Module SquareStruct.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Side : w64;
}.
End def.
End SquareStruct.


Global Instance settable_SquareStruct `{ffi_syntax}: Settable _ :=
  settable! SquareStruct.mk < SquareStruct.Side >.
Global Instance into_val_SquareStruct `{ffi_syntax} : IntoVal SquareStruct.t.
Admitted.

Global Instance into_val_typed_SquareStruct `{ffi_syntax} : IntoValTyped SquareStruct.t SquareStruct :=
{|
  default_val := SquareStruct.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_SquareStruct_Side `{ffi_syntax} : IntoValStructField "Side" SquareStruct SquareStruct.Side.
Admitted.

Instance wp_struct_make_SquareStruct `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Side:
  PureWp True
    (struct.make SquareStruct (alist_val [
      "Side" ::= #Side
    ]))%V 
    #(SquareStruct.mk Side).
Admitted.

Module LoopStruct.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  loopNext : loc;
}.
End def.
End LoopStruct.


Global Instance settable_LoopStruct `{ffi_syntax}: Settable _ :=
  settable! LoopStruct.mk < LoopStruct.loopNext >.
Global Instance into_val_LoopStruct `{ffi_syntax} : IntoVal LoopStruct.t.
Admitted.

Global Instance into_val_typed_LoopStruct `{ffi_syntax} : IntoValTyped LoopStruct.t LoopStruct :=
{|
  default_val := LoopStruct.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_LoopStruct_loopNext `{ffi_syntax} : IntoValStructField "loopNext" LoopStruct LoopStruct.loopNext.
Admitted.

Instance wp_struct_make_LoopStruct `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} loopNext:
  PureWp True
    (struct.make LoopStruct (alist_val [
      "loopNext" ::= #loopNext
    ]))%V 
    #(LoopStruct.mk loopNext).
Admitted.

Module BoolTest.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  t' : bool;
  f : bool;
  tc : w64;
  fc : w64;
}.
End def.
End BoolTest.


Global Instance settable_BoolTest `{ffi_syntax}: Settable _ :=
  settable! BoolTest.mk < BoolTest.t'; BoolTest.f; BoolTest.tc; BoolTest.fc >.
Global Instance into_val_BoolTest `{ffi_syntax} : IntoVal BoolTest.t.
Admitted.

Global Instance into_val_typed_BoolTest `{ffi_syntax} : IntoValTyped BoolTest.t BoolTest :=
{|
  default_val := BoolTest.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_BoolTest_t `{ffi_syntax} : IntoValStructField "t" BoolTest BoolTest.t'.
Admitted.

Global Instance into_val_struct_field_BoolTest_f `{ffi_syntax} : IntoValStructField "f" BoolTest BoolTest.f.
Admitted.

Global Instance into_val_struct_field_BoolTest_tc `{ffi_syntax} : IntoValStructField "tc" BoolTest BoolTest.tc.
Admitted.

Global Instance into_val_struct_field_BoolTest_fc `{ffi_syntax} : IntoValStructField "fc" BoolTest BoolTest.fc.
Admitted.

Instance wp_struct_make_BoolTest `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} t' f tc fc:
  PureWp True
    (struct.make BoolTest (alist_val [
      "t" ::= #t';
      "f" ::= #f;
      "tc" ::= #tc;
      "fc" ::= #fc
    ]))%V 
    #(BoolTest.mk t' f tc fc).
Admitted.

Module ArrayEditor.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s : slice.t;
  next_val : w64;
}.
End def.
End ArrayEditor.


Global Instance settable_ArrayEditor `{ffi_syntax}: Settable _ :=
  settable! ArrayEditor.mk < ArrayEditor.s; ArrayEditor.next_val >.
Global Instance into_val_ArrayEditor `{ffi_syntax} : IntoVal ArrayEditor.t.
Admitted.

Global Instance into_val_typed_ArrayEditor `{ffi_syntax} : IntoValTyped ArrayEditor.t ArrayEditor :=
{|
  default_val := ArrayEditor.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ArrayEditor_s `{ffi_syntax} : IntoValStructField "s" ArrayEditor ArrayEditor.s.
Admitted.

Global Instance into_val_struct_field_ArrayEditor_next_val `{ffi_syntax} : IntoValStructField "next_val" ArrayEditor ArrayEditor.next_val.
Admitted.

Instance wp_struct_make_ArrayEditor `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} s next_val:
  PureWp True
    (struct.make ArrayEditor (alist_val [
      "s" ::= #s;
      "next_val" ::= #next_val
    ]))%V 
    #(ArrayEditor.mk s next_val).
Admitted.

Module Bar.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a : w64;
  b : w64;
}.
End def.
End Bar.


Global Instance settable_Bar `{ffi_syntax}: Settable _ :=
  settable! Bar.mk < Bar.a; Bar.b >.
Global Instance into_val_Bar `{ffi_syntax} : IntoVal Bar.t.
Admitted.

Global Instance into_val_typed_Bar `{ffi_syntax} : IntoValTyped Bar.t Bar :=
{|
  default_val := Bar.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Bar_a `{ffi_syntax} : IntoValStructField "a" Bar Bar.a.
Admitted.

Global Instance into_val_struct_field_Bar_b `{ffi_syntax} : IntoValStructField "b" Bar Bar.b.
Admitted.

Instance wp_struct_make_Bar `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a b:
  PureWp True
    (struct.make Bar (alist_val [
      "a" ::= #a;
      "b" ::= #b
    ]))%V 
    #(Bar.mk a b).
Admitted.

Module Foo.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  bar : Bar.t;
}.
End def.
End Foo.


Global Instance settable_Foo `{ffi_syntax}: Settable _ :=
  settable! Foo.mk < Foo.bar >.
Global Instance into_val_Foo `{ffi_syntax} : IntoVal Foo.t.
Admitted.

Global Instance into_val_typed_Foo `{ffi_syntax} : IntoValTyped Foo.t Foo :=
{|
  default_val := Foo.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Foo_bar `{ffi_syntax} : IntoValStructField "bar" Foo Foo.bar.
Admitted.

Instance wp_struct_make_Foo `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} bar:
  PureWp True
    (struct.make Foo (alist_val [
      "bar" ::= #bar
    ]))%V 
    #(Foo.mk bar).
Admitted.

Module TwoInts.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  x : w64;
  y : w64;
}.
End def.
End TwoInts.


Global Instance settable_TwoInts `{ffi_syntax}: Settable _ :=
  settable! TwoInts.mk < TwoInts.x; TwoInts.y >.
Global Instance into_val_TwoInts `{ffi_syntax} : IntoVal TwoInts.t.
Admitted.

Global Instance into_val_typed_TwoInts `{ffi_syntax} : IntoValTyped TwoInts.t TwoInts :=
{|
  default_val := TwoInts.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_TwoInts_x `{ffi_syntax} : IntoValStructField "x" TwoInts TwoInts.x.
Admitted.

Global Instance into_val_struct_field_TwoInts_y `{ffi_syntax} : IntoValStructField "y" TwoInts TwoInts.y.
Admitted.

Instance wp_struct_make_TwoInts `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} x y:
  PureWp True
    (struct.make TwoInts (alist_val [
      "x" ::= #x;
      "y" ::= #y
    ]))%V 
    #(TwoInts.mk x y).
Admitted.

Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  a : w64;
  b : TwoInts.t;
  c : bool;
}.
End def.
End S.


Global Instance settable_S `{ffi_syntax}: Settable _ :=
  settable! S.mk < S.a; S.b; S.c >.
Global Instance into_val_S `{ffi_syntax} : IntoVal S.t.
Admitted.

Global Instance into_val_typed_S `{ffi_syntax} : IntoValTyped S.t S :=
{|
  default_val := S.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_S_a `{ffi_syntax} : IntoValStructField "a" S S.a.
Admitted.

Global Instance into_val_struct_field_S_b `{ffi_syntax} : IntoValStructField "b" S S.b.
Admitted.

Global Instance into_val_struct_field_S_c `{ffi_syntax} : IntoValStructField "c" S S.c.
Admitted.

Instance wp_struct_make_S `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} a b c:
  PureWp True
    (struct.make S (alist_val [
      "a" ::= #a;
      "b" ::= #b;
      "c" ::= #c
    ]))%V 
    #(S.mk a b c).
Admitted.

Module StructWrap.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  i : w64;
}.
End def.
End StructWrap.


Global Instance settable_StructWrap `{ffi_syntax}: Settable _ :=
  settable! StructWrap.mk < StructWrap.i >.
Global Instance into_val_StructWrap `{ffi_syntax} : IntoVal StructWrap.t.
Admitted.

Global Instance into_val_typed_StructWrap `{ffi_syntax} : IntoValTyped StructWrap.t StructWrap :=
{|
  default_val := StructWrap.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_StructWrap_i `{ffi_syntax} : IntoValStructField "i" StructWrap StructWrap.i.
Admitted.

Instance wp_struct_make_StructWrap `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} i:
  PureWp True
    (struct.make StructWrap (alist_val [
      "i" ::= #i
    ]))%V 
    #(StructWrap.mk i).
Admitted.

Module StructWithFunc.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  fn : func.t;
}.
End def.
End StructWithFunc.


Global Instance settable_StructWithFunc `{ffi_syntax}: Settable _ :=
  settable! StructWithFunc.mk < StructWithFunc.fn >.
Global Instance into_val_StructWithFunc `{ffi_syntax} : IntoVal StructWithFunc.t.
Admitted.

Global Instance into_val_typed_StructWithFunc `{ffi_syntax} : IntoValTyped StructWithFunc.t StructWithFunc :=
{|
  default_val := StructWithFunc.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_StructWithFunc_fn `{ffi_syntax} : IntoValStructField "fn" StructWithFunc StructWithFunc.fn.
Admitted.

Instance wp_struct_make_StructWithFunc `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} fn:
  PureWp True
    (struct.make StructWithFunc (alist_val [
      "fn" ::= #fn
    ]))%V 
    #(StructWithFunc.mk fn).
Admitted.

Module switchConcrete.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End switchConcrete.

Global Instance into_val_switchConcrete `{ffi_syntax} : IntoVal switchConcrete.t.
Admitted.

Global Instance into_val_typed_switchConcrete `{ffi_syntax} : IntoValTyped switchConcrete.t switchConcrete :=
{|
  default_val := switchConcrete.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Instance wp_struct_make_switchConcrete `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make switchConcrete (alist_val [
    ]))%V 
    #(switchConcrete.mk).
Admitted.

Module Log.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  d : interface.t;
  l : loc;
  cache : loc;
  length : loc;
}.
End def.
End Log.


Global Instance settable_Log `{ffi_syntax}: Settable _ :=
  settable! Log.mk < Log.d; Log.l; Log.cache; Log.length >.
Global Instance into_val_Log `{ffi_syntax} : IntoVal Log.t.
Admitted.

Global Instance into_val_typed_Log `{ffi_syntax} : IntoValTyped Log.t Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Log_d `{ffi_syntax} : IntoValStructField "d" Log Log.d.
Admitted.

Global Instance into_val_struct_field_Log_l `{ffi_syntax} : IntoValStructField "l" Log Log.l.
Admitted.

Global Instance into_val_struct_field_Log_cache `{ffi_syntax} : IntoValStructField "cache" Log Log.cache.
Admitted.

Global Instance into_val_struct_field_Log_length `{ffi_syntax} : IntoValStructField "length" Log Log.length.
Admitted.

Instance wp_struct_make_Log `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} d l cache length:
  PureWp True
    (struct.make Log (alist_val [
      "d" ::= #d;
      "l" ::= #l;
      "cache" ::= #cache;
      "length" ::= #length
    ]))%V 
    #(Log.mk d l cache length).
Admitted.

