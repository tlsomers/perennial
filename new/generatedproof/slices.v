(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import slices.
From New.golang Require Import theory.

Axiom falso : False.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.slices.
Require Export New.proof.proof_prelude.
Module slices.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions slices.pkg_name' var_addrs slices.functions' slices.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_All : 
  WpFuncCall slices.pkg_name' "All" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Backward : 
  WpFuncCall slices.pkg_name' "Backward" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Values : 
  WpFuncCall slices.pkg_name' "Values" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendSeq : 
  WpFuncCall slices.pkg_name' "AppendSeq" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Collect : 
  WpFuncCall slices.pkg_name' "Collect" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Sorted : 
  WpFuncCall slices.pkg_name' "Sorted" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SortedFunc : 
  WpFuncCall slices.pkg_name' "SortedFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SortedStableFunc : 
  WpFuncCall slices.pkg_name' "SortedStableFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Chunk : 
  WpFuncCall slices.pkg_name' "Chunk" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Equal : 
  WpFuncCall slices.pkg_name' "Equal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualFunc : 
  WpFuncCall slices.pkg_name' "EqualFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Compare : 
  WpFuncCall slices.pkg_name' "Compare" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CompareFunc : 
  WpFuncCall slices.pkg_name' "CompareFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Index : 
  WpFuncCall slices.pkg_name' "Index" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IndexFunc : 
  WpFuncCall slices.pkg_name' "IndexFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Contains : 
  WpFuncCall slices.pkg_name' "Contains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ContainsFunc : 
  WpFuncCall slices.pkg_name' "ContainsFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Insert : 
  WpFuncCall slices.pkg_name' "Insert" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Delete : 
  WpFuncCall slices.pkg_name' "Delete" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DeleteFunc : 
  WpFuncCall slices.pkg_name' "DeleteFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Replace : 
  WpFuncCall slices.pkg_name' "Replace" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Clone : 
  WpFuncCall slices.pkg_name' "Clone" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Compact : 
  WpFuncCall slices.pkg_name' "Compact" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CompactFunc : 
  WpFuncCall slices.pkg_name' "CompactFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Grow : 
  WpFuncCall slices.pkg_name' "Grow" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Clip : 
  WpFuncCall slices.pkg_name' "Clip" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_rotateLeft : 
  WpFuncCall slices.pkg_name' "rotateLeft" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_rotateRight : 
  WpFuncCall slices.pkg_name' "rotateRight" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_overlaps : 
  WpFuncCall slices.pkg_name' "overlaps" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_startIdx : 
  WpFuncCall slices.pkg_name' "startIdx" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Reverse : 
  WpFuncCall slices.pkg_name' "Reverse" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Concat : 
  WpFuncCall slices.pkg_name' "Concat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Repeat : 
  WpFuncCall slices.pkg_name' "Repeat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Sort : 
  WpFuncCall slices.pkg_name' "Sort" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SortFunc : 
  WpFuncCall slices.pkg_name' "SortFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_SortStableFunc : 
  WpFuncCall slices.pkg_name' "SortStableFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsSorted : 
  WpFuncCall slices.pkg_name' "IsSorted" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsSortedFunc : 
  WpFuncCall slices.pkg_name' "IsSortedFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Min : 
  WpFuncCall slices.pkg_name' "Min" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MinFunc : 
  WpFuncCall slices.pkg_name' "MinFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Max : 
  WpFuncCall slices.pkg_name' "Max" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MaxFunc : 
  WpFuncCall slices.pkg_name' "MaxFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BinarySearch : 
  WpFuncCall slices.pkg_name' "BinarySearch" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_BinarySearchFunc : 
  WpFuncCall slices.pkg_name' "BinarySearchFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_nextPowerOfTwo : 
  WpFuncCall slices.pkg_name' "nextPowerOfTwo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isNaN : 
  WpFuncCall slices.pkg_name' "isNaN" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_insertionSortCmpFunc : 
  WpFuncCall slices.pkg_name' "insertionSortCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_siftDownCmpFunc : 
  WpFuncCall slices.pkg_name' "siftDownCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_heapSortCmpFunc : 
  WpFuncCall slices.pkg_name' "heapSortCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_pdqsortCmpFunc : 
  WpFuncCall slices.pkg_name' "pdqsortCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_partitionCmpFunc : 
  WpFuncCall slices.pkg_name' "partitionCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_partitionEqualCmpFunc : 
  WpFuncCall slices.pkg_name' "partitionEqualCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_partialInsertionSortCmpFunc : 
  WpFuncCall slices.pkg_name' "partialInsertionSortCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_breakPatternsCmpFunc : 
  WpFuncCall slices.pkg_name' "breakPatternsCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_choosePivotCmpFunc : 
  WpFuncCall slices.pkg_name' "choosePivotCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_order2CmpFunc : 
  WpFuncCall slices.pkg_name' "order2CmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_medianCmpFunc : 
  WpFuncCall slices.pkg_name' "medianCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_medianAdjacentCmpFunc : 
  WpFuncCall slices.pkg_name' "medianAdjacentCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_reverseRangeCmpFunc : 
  WpFuncCall slices.pkg_name' "reverseRangeCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_swapRangeCmpFunc : 
  WpFuncCall slices.pkg_name' "swapRangeCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stableCmpFunc : 
  WpFuncCall slices.pkg_name' "stableCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_symMergeCmpFunc : 
  WpFuncCall slices.pkg_name' "symMergeCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_rotateCmpFunc : 
  WpFuncCall slices.pkg_name' "rotateCmpFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_insertionSortOrdered : 
  WpFuncCall slices.pkg_name' "insertionSortOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_siftDownOrdered : 
  WpFuncCall slices.pkg_name' "siftDownOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_heapSortOrdered : 
  WpFuncCall slices.pkg_name' "heapSortOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_pdqsortOrdered : 
  WpFuncCall slices.pkg_name' "pdqsortOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_partitionOrdered : 
  WpFuncCall slices.pkg_name' "partitionOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_partitionEqualOrdered : 
  WpFuncCall slices.pkg_name' "partitionEqualOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_partialInsertionSortOrdered : 
  WpFuncCall slices.pkg_name' "partialInsertionSortOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_breakPatternsOrdered : 
  WpFuncCall slices.pkg_name' "breakPatternsOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_choosePivotOrdered : 
  WpFuncCall slices.pkg_name' "choosePivotOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_order2Ordered : 
  WpFuncCall slices.pkg_name' "order2Ordered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_medianOrdered : 
  WpFuncCall slices.pkg_name' "medianOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_medianAdjacentOrdered : 
  WpFuncCall slices.pkg_name' "medianAdjacentOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_reverseRangeOrdered : 
  WpFuncCall slices.pkg_name' "reverseRangeOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_swapRangeOrdered : 
  WpFuncCall slices.pkg_name' "swapRangeOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stableOrdered : 
  WpFuncCall slices.pkg_name' "stableOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_symMergeOrdered : 
  WpFuncCall slices.pkg_name' "symMergeOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_rotateOrdered : 
  WpFuncCall slices.pkg_name' "rotateOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_xorshift'ptr_Next : 
  WpMethodCall slices.pkg_name' "xorshift'ptr" "Next" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End slices.
