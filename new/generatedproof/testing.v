(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import testing.
From New.golang Require Import theory.

Axiom falso : False.

Module T.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  common' : common.t;
  isEnvSet' : bool;
  context' : loc;
}.
End def.
End T.


Global Instance settable_T `{ffi_syntax}: Settable _ :=
  settable! T.mk < T.common'; T.isEnvSet'; T.context' >.
Global Instance into_val_T `{ffi_syntax} : IntoVal T.t.
Admitted.

Global Instance into_val_typed_T `{ffi_syntax} : IntoValTyped T.t testing.T :=
{|
  default_val := T.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_T_common `{ffi_syntax} : IntoValStructField "common" testing.T T.common'.
Admitted.

Global Instance into_val_struct_field_T_isEnvSet `{ffi_syntax} : IntoValStructField "isEnvSet" testing.T T.isEnvSet'.
Admitted.

Global Instance into_val_struct_field_T_context `{ffi_syntax} : IntoValStructField "context" testing.T T.context'.
Admitted.

Instance wp_struct_make_T `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} common' isEnvSet' context':
  PureWp True
    (struct.make testing.T (alist_val [
      "common" ::= #common';
      "isEnvSet" ::= #isEnvSet';
      "context" ::= #context'
    ]))%V
    #(T.mk common' isEnvSet' context').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.testing.
Require Export New.proof.proof_prelude.
Module testing.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions testing.pkg_name' var_addrs testing.functions' testing.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

End defs.
End testing.
