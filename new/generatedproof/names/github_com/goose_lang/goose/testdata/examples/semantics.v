(* autogenerated by namegen; do not modify *)
Require Import New.code.github_com.goose_lang.goose.testdata.examples.semantics.
Require Export New.proof.grove_prelude.
Module semantics.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{ffi_syntax}Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs `{!GlobalAddrs} : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions semantics.pkg_name' var_addrs semantics.functions' semantics.msets'.

Global Instance wp_func_call_findKey : 
  WpFuncCall semantics.pkg_name' "findKey" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_allocate : 
  WpFuncCall semantics.pkg_name' "allocate" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_freeRange : 
  WpFuncCall semantics.pkg_name' "freeRange" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAllocateDistinct : 
  WpFuncCall semantics.pkg_name' "testAllocateDistinct" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAllocateFull : 
  WpFuncCall semantics.pkg_name' "testAllocateFull" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testExplicitBlockStmt : 
  WpFuncCall semantics.pkg_name' "testExplicitBlockStmt" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMinUint64 : 
  WpFuncCall semantics.pkg_name' "testMinUint64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMaxUint64 : 
  WpFuncCall semantics.pkg_name' "testMaxUint64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_adder : 
  WpFuncCall semantics.pkg_name' "adder" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testClosureBasic : 
  WpFuncCall semantics.pkg_name' "testClosureBasic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareAll : 
  WpFuncCall semantics.pkg_name' "testCompareAll" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareGT : 
  WpFuncCall semantics.pkg_name' "testCompareGT" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareGE : 
  WpFuncCall semantics.pkg_name' "testCompareGE" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareLT : 
  WpFuncCall semantics.pkg_name' "testCompareLT" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareLE : 
  WpFuncCall semantics.pkg_name' "testCompareLE" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_literalCast : 
  WpFuncCall semantics.pkg_name' "literalCast" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_stringToByteSlice : 
  WpFuncCall semantics.pkg_name' "stringToByteSlice" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_byteSliceToString : 
  WpFuncCall semantics.pkg_name' "byteSliceToString" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testByteSliceToString : 
  WpFuncCall semantics.pkg_name' "testByteSliceToString" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopySimple : 
  WpFuncCall semantics.pkg_name' "testCopySimple" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopyShorterDst : 
  WpFuncCall semantics.pkg_name' "testCopyShorterDst" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCopyShorterSrc : 
  WpFuncCall semantics.pkg_name' "testCopyShorterSrc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_deferSimple : 
  WpFuncCall semantics.pkg_name' "deferSimple" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testDefer : 
  WpFuncCall semantics.pkg_name' "testDefer" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testDeferFuncLit : 
  WpFuncCall semantics.pkg_name' "testDeferFuncLit" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_roundtripEncDec32 : 
  WpFuncCall semantics.pkg_name' "roundtripEncDec32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_roundtripEncDec64 : 
  WpFuncCall semantics.pkg_name' "roundtripEncDec64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testEncDec32Simple : 
  WpFuncCall semantics.pkg_name' "testEncDec32Simple" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testEncDec32 : 
  WpFuncCall semantics.pkg_name' "failing_testEncDec32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testEncDec64Simple : 
  WpFuncCall semantics.pkg_name' "testEncDec64Simple" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testEncDec64 : 
  WpFuncCall semantics.pkg_name' "testEncDec64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FirstClassFunction : 
  WpFuncCall semantics.pkg_name' "FirstClassFunction" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ApplyF : 
  WpFuncCall semantics.pkg_name' "ApplyF" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testFirstClassFunction : 
  WpFuncCall semantics.pkg_name' "testFirstClassFunction" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_addFour64 : 
  WpFuncCall semantics.pkg_name' "addFour64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testFunctionOrdering : 
  WpFuncCall semantics.pkg_name' "failing_testFunctionOrdering" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_storeAndReturn : 
  WpFuncCall semantics.pkg_name' "storeAndReturn" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testArgumentOrder : 
  WpFuncCall semantics.pkg_name' "failing_testArgumentOrder" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testU64ToU32 : 
  WpFuncCall semantics.pkg_name' "testU64ToU32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testU32Len : 
  WpFuncCall semantics.pkg_name' "testU32Len" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testU32NewtypeLen : 
  WpFuncCall semantics.pkg_name' "failing_testU32NewtypeLen" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_measureArea : 
  WpFuncCall semantics.pkg_name' "measureArea" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_measureVolumePlusNM : 
  WpFuncCall semantics.pkg_name' "measureVolumePlusNM" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_measureVolume : 
  WpFuncCall semantics.pkg_name' "measureVolume" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBasicInterface : 
  WpFuncCall semantics.pkg_name' "testBasicInterface" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignInterface : 
  WpFuncCall semantics.pkg_name' "testAssignInterface" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMultipleInterface : 
  WpFuncCall semantics.pkg_name' "testMultipleInterface" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBinaryExprInterface : 
  WpFuncCall semantics.pkg_name' "testBinaryExprInterface" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testIfStmtInterface : 
  WpFuncCall semantics.pkg_name' "testIfStmtInterface" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testsUseLocks : 
  WpFuncCall semantics.pkg_name' "testsUseLocks" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_standardForLoop : 
  WpFuncCall semantics.pkg_name' "standardForLoop" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStandardForLoop : 
  WpFuncCall semantics.pkg_name' "testStandardForLoop" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testForLoopWait : 
  WpFuncCall semantics.pkg_name' "testForLoopWait" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopWithContinue : 
  WpFuncCall semantics.pkg_name' "testBreakFromLoopWithContinue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopNoContinue : 
  WpFuncCall semantics.pkg_name' "testBreakFromLoopNoContinue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopNoContinueDouble : 
  WpFuncCall semantics.pkg_name' "testBreakFromLoopNoContinueDouble" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopForOnly : 
  WpFuncCall semantics.pkg_name' "testBreakFromLoopForOnly" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBreakFromLoopAssignAndContinue : 
  WpFuncCall semantics.pkg_name' "testBreakFromLoopAssignAndContinue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedLoops : 
  WpFuncCall semantics.pkg_name' "testNestedLoops" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedGoStyleLoops : 
  WpFuncCall semantics.pkg_name' "testNestedGoStyleLoops" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedGoStyleLoopsNoComparison : 
  WpFuncCall semantics.pkg_name' "testNestedGoStyleLoopsNoComparison" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IterateMapKeys : 
  WpFuncCall semantics.pkg_name' "IterateMapKeys" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IterateMapValues : 
  WpFuncCall semantics.pkg_name' "IterateMapValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testIterateMap : 
  WpFuncCall semantics.pkg_name' "testIterateMap" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMapSize : 
  WpFuncCall semantics.pkg_name' "testMapSize" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multReturnTwo : 
  WpFuncCall semantics.pkg_name' "multReturnTwo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignTwo : 
  WpFuncCall semantics.pkg_name' "testAssignTwo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_multReturnThree : 
  WpFuncCall semantics.pkg_name' "multReturnThree" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAssignThree : 
  WpFuncCall semantics.pkg_name' "testAssignThree" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testMultipleAssignToMap : 
  WpFuncCall semantics.pkg_name' "testMultipleAssignToMap" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnTwo : 
  WpFuncCall semantics.pkg_name' "returnTwo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnTwo : 
  WpFuncCall semantics.pkg_name' "testReturnTwo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAnonymousBinding : 
  WpFuncCall semantics.pkg_name' "testAnonymousBinding" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnThree : 
  WpFuncCall semantics.pkg_name' "returnThree" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnThree : 
  WpFuncCall semantics.pkg_name' "testReturnThree" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_returnFour : 
  WpFuncCall semantics.pkg_name' "returnFour" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReturnFour : 
  WpFuncCall semantics.pkg_name' "testReturnFour" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testCompareSliceToNil : 
  WpFuncCall semantics.pkg_name' "failing_testCompareSliceToNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testComparePointerToNil : 
  WpFuncCall semantics.pkg_name' "testComparePointerToNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testCompareNilToNil : 
  WpFuncCall semantics.pkg_name' "testCompareNilToNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testComparePointerWrappedToNil : 
  WpFuncCall semantics.pkg_name' "testComparePointerWrappedToNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testComparePointerWrappedDefaultToNil : 
  WpFuncCall semantics.pkg_name' "testComparePointerWrappedDefaultToNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_reverseAssignOps64 : 
  WpFuncCall semantics.pkg_name' "reverseAssignOps64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_reverseAssignOps32 : 
  WpFuncCall semantics.pkg_name' "reverseAssignOps32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_add64Equals : 
  WpFuncCall semantics.pkg_name' "add64Equals" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_sub64Equals : 
  WpFuncCall semantics.pkg_name' "sub64Equals" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testReverseAssignOps64 : 
  WpFuncCall semantics.pkg_name' "testReverseAssignOps64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_failing_testReverseAssignOps32 : 
  WpFuncCall semantics.pkg_name' "failing_testReverseAssignOps32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAdd64Equals : 
  WpFuncCall semantics.pkg_name' "testAdd64Equals" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSub64Equals : 
  WpFuncCall semantics.pkg_name' "testSub64Equals" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testDivisionPrecedence : 
  WpFuncCall semantics.pkg_name' "testDivisionPrecedence" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testModPrecedence : 
  WpFuncCall semantics.pkg_name' "testModPrecedence" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBitwiseOpsPrecedence : 
  WpFuncCall semantics.pkg_name' "testBitwiseOpsPrecedence" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testArithmeticShifts : 
  WpFuncCall semantics.pkg_name' "testArithmeticShifts" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testBitAddAnd : 
  WpFuncCall semantics.pkg_name' "testBitAddAnd" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testManyParentheses : 
  WpFuncCall semantics.pkg_name' "testManyParentheses" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPlusTimes : 
  WpFuncCall semantics.pkg_name' "testPlusTimes" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testOrCompareSimple : 
  WpFuncCall semantics.pkg_name' "testOrCompareSimple" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testOrCompare : 
  WpFuncCall semantics.pkg_name' "testOrCompare" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAndCompare : 
  WpFuncCall semantics.pkg_name' "testAndCompare" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShiftMod : 
  WpFuncCall semantics.pkg_name' "testShiftMod" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testLinearize : 
  WpFuncCall semantics.pkg_name' "testLinearize" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CheckTrue : 
  WpFuncCall semantics.pkg_name' "CheckTrue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CheckFalse : 
  WpFuncCall semantics.pkg_name' "CheckFalse" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitAndTF : 
  WpFuncCall semantics.pkg_name' "testShortcircuitAndTF" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitAndFT : 
  WpFuncCall semantics.pkg_name' "testShortcircuitAndFT" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitOrTF : 
  WpFuncCall semantics.pkg_name' "testShortcircuitOrTF" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testShortcircuitOrFT : 
  WpFuncCall semantics.pkg_name' "testShortcircuitOrFT" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSliceOps : 
  WpFuncCall semantics.pkg_name' "testSliceOps" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSliceCapacityOps : 
  WpFuncCall semantics.pkg_name' "testSliceCapacityOps" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testOverwriteArray : 
  WpFuncCall semantics.pkg_name' "testOverwriteArray" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSliceLiteral : 
  WpFuncCall semantics.pkg_name' "testSliceLiteral" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testFooBarMutation : 
  WpFuncCall semantics.pkg_name' "testFooBarMutation" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewS : 
  WpFuncCall semantics.pkg_name' "NewS" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStructUpdates : 
  WpFuncCall semantics.pkg_name' "testStructUpdates" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testNestedStructUpdates : 
  WpFuncCall semantics.pkg_name' "testNestedStructUpdates" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStructConstructions : 
  WpFuncCall semantics.pkg_name' "testStructConstructions" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testIncompleteStruct : 
  WpFuncCall semantics.pkg_name' "testIncompleteStruct" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreInStructVar : 
  WpFuncCall semantics.pkg_name' "testStoreInStructVar" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreInStructPointerVar : 
  WpFuncCall semantics.pkg_name' "testStoreInStructPointerVar" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreComposite : 
  WpFuncCall semantics.pkg_name' "testStoreComposite" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStoreSlice : 
  WpFuncCall semantics.pkg_name' "testStoreSlice" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testStructFieldFunc : 
  WpFuncCall semantics.pkg_name' "testStructFieldFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchVal : 
  WpFuncCall semantics.pkg_name' "testSwitchVal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchMultiple : 
  WpFuncCall semantics.pkg_name' "testSwitchMultiple" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchDefaultTrue : 
  WpFuncCall semantics.pkg_name' "testSwitchDefaultTrue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testSwitchConversion : 
  WpFuncCall semantics.pkg_name' "testSwitchConversion" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testPointerAssignment : 
  WpFuncCall semantics.pkg_name' "testPointerAssignment" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAddressOfLocal : 
  WpFuncCall semantics.pkg_name' "testAddressOfLocal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_testAnonymousAssign : 
  WpFuncCall semantics.pkg_name' "testAnonymousAssign" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_intToBlock : 
  WpFuncCall semantics.pkg_name' "intToBlock" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_blockToInt : 
  WpFuncCall semantics.pkg_name' "blockToInt" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_New : 
  WpFuncCall semantics.pkg_name' "New" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getLogEntry : 
  WpFuncCall semantics.pkg_name' "getLogEntry" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_applyLog : 
  WpFuncCall semantics.pkg_name' "applyLog" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_clearLog : 
  WpFuncCall semantics.pkg_name' "clearLog" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Open : 
  WpFuncCall semantics.pkg_name' "Open" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_disabled_testWal : 
  WpFuncCall semantics.pkg_name' "disabled_testWal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Enc'ptr_consume : 
  WpMethodCall semantics.pkg_name' "Enc'ptr" "consume" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Dec'ptr_consume : 
  WpMethodCall semantics.pkg_name' "Dec'ptr" "consume" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Editor'ptr_AdvanceReturn : 
  WpMethodCall semantics.pkg_name' "Editor'ptr" "AdvanceReturn" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct_Square : 
  WpMethodCall semantics.pkg_name' "SquareStruct" "Square" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct_Volume : 
  WpMethodCall semantics.pkg_name' "SquareStruct" "Volume" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct'ptr_Square : 
  WpMethodCall semantics.pkg_name' "SquareStruct'ptr" "Square" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_SquareStruct'ptr_Volume : 
  WpMethodCall semantics.pkg_name' "SquareStruct'ptr" "Volume" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_LoopStruct_forLoopWait : 
  WpMethodCall semantics.pkg_name' "LoopStruct" "forLoopWait" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_LoopStruct'ptr_forLoopWait : 
  WpMethodCall semantics.pkg_name' "LoopStruct'ptr" "forLoopWait" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_ArrayEditor'ptr_Advance : 
  WpMethodCall semantics.pkg_name' "ArrayEditor'ptr" "Advance" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Bar'ptr_mutate : 
  WpMethodCall semantics.pkg_name' "Bar'ptr" "mutate" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Foo'ptr_mutateBar : 
  WpMethodCall semantics.pkg_name' "Foo'ptr" "mutateBar" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S_readBVal : 
  WpMethodCall semantics.pkg_name' "S" "readBVal" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_negateC : 
  WpMethodCall semantics.pkg_name' "S'ptr" "negateC" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readA : 
  WpMethodCall semantics.pkg_name' "S'ptr" "readA" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readB : 
  WpMethodCall semantics.pkg_name' "S'ptr" "readB" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_readBVal : 
  WpMethodCall semantics.pkg_name' "S'ptr" "readBVal" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_S'ptr_updateBValX : 
  WpMethodCall semantics.pkg_name' "S'ptr" "updateBValX" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_switchConcrete'ptr_marker : 
  WpMethodCall semantics.pkg_name' "switchConcrete'ptr" "marker" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Apply : 
  WpMethodCall semantics.pkg_name' "Log" "Apply" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_BeginTxn : 
  WpMethodCall semantics.pkg_name' "Log" "BeginTxn" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Commit : 
  WpMethodCall semantics.pkg_name' "Log" "Commit" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Read : 
  WpMethodCall semantics.pkg_name' "Log" "Read" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Size : 
  WpMethodCall semantics.pkg_name' "Log" "Size" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_Write : 
  WpMethodCall semantics.pkg_name' "Log" "Write" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_lock : 
  WpMethodCall semantics.pkg_name' "Log" "lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log_unlock : 
  WpMethodCall semantics.pkg_name' "Log" "unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Apply : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "Apply" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_BeginTxn : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "BeginTxn" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Commit : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "Commit" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Read : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "Read" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Size : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "Size" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Write : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "Write" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_lock : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_unlock : 
  WpMethodCall semantics.pkg_name' "Log'ptr" "unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End semantics.
