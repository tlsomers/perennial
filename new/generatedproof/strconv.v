(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import strconv.
From New.golang Require Import theory.

Axiom falso : False.

Module NumError.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Func' : go_string;
  Num' : go_string;
  Err' : interface.t;
}.
End def.
End NumError.


Global Instance settable_NumError `{ffi_syntax}: Settable _ :=
  settable! NumError.mk < NumError.Func'; NumError.Num'; NumError.Err' >.
Global Instance into_val_NumError `{ffi_syntax} : IntoVal NumError.t.
Admitted.

Global Instance into_val_typed_NumError `{ffi_syntax} : IntoValTyped NumError.t strconv.NumError :=
{|
  default_val := NumError.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_NumError_Func `{ffi_syntax} : IntoValStructField "Func" strconv.NumError NumError.Func'.
Admitted.

Global Instance into_val_struct_field_NumError_Num `{ffi_syntax} : IntoValStructField "Num" strconv.NumError NumError.Num'.
Admitted.

Global Instance into_val_struct_field_NumError_Err `{ffi_syntax} : IntoValStructField "Err" strconv.NumError NumError.Err'.
Admitted.

Instance wp_struct_make_NumError `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Func' Num' Err':
  PureWp True
    (struct.make strconv.NumError (alist_val [
      "Func" ::= #Func';
      "Num" ::= #Num';
      "Err" ::= #Err'
    ]))%V
    #(NumError.mk Func' Num' Err').
Admitted.

Module decimal.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  d' : (vec w8 800);
  nd' : w64;
  dp' : w64;
  neg' : bool;
  trunc' : bool;
}.
End def.
End decimal.


Global Instance settable_decimal `{ffi_syntax}: Settable _ :=
  settable! decimal.mk < decimal.d'; decimal.nd'; decimal.dp'; decimal.neg'; decimal.trunc' >.
Global Instance into_val_decimal `{ffi_syntax} : IntoVal decimal.t.
Admitted.

Global Instance into_val_typed_decimal `{ffi_syntax} : IntoValTyped decimal.t strconv.decimal :=
{|
  default_val := decimal.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_decimal_d `{ffi_syntax} : IntoValStructField "d" strconv.decimal decimal.d'.
Admitted.

Global Instance into_val_struct_field_decimal_nd `{ffi_syntax} : IntoValStructField "nd" strconv.decimal decimal.nd'.
Admitted.

Global Instance into_val_struct_field_decimal_dp `{ffi_syntax} : IntoValStructField "dp" strconv.decimal decimal.dp'.
Admitted.

Global Instance into_val_struct_field_decimal_neg `{ffi_syntax} : IntoValStructField "neg" strconv.decimal decimal.neg'.
Admitted.

Global Instance into_val_struct_field_decimal_trunc `{ffi_syntax} : IntoValStructField "trunc" strconv.decimal decimal.trunc'.
Admitted.

Instance wp_struct_make_decimal `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} d' nd' dp' neg' trunc':
  PureWp True
    (struct.make strconv.decimal (alist_val [
      "d" ::= #d';
      "nd" ::= #nd';
      "dp" ::= #dp';
      "neg" ::= #neg';
      "trunc" ::= #trunc'
    ]))%V
    #(decimal.mk d' nd' dp' neg' trunc').
Admitted.

Module leftCheat.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  delta' : w64;
  cutoff' : go_string;
}.
End def.
End leftCheat.


Global Instance settable_leftCheat `{ffi_syntax}: Settable _ :=
  settable! leftCheat.mk < leftCheat.delta'; leftCheat.cutoff' >.
Global Instance into_val_leftCheat `{ffi_syntax} : IntoVal leftCheat.t.
Admitted.

Global Instance into_val_typed_leftCheat `{ffi_syntax} : IntoValTyped leftCheat.t strconv.leftCheat :=
{|
  default_val := leftCheat.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_leftCheat_delta `{ffi_syntax} : IntoValStructField "delta" strconv.leftCheat leftCheat.delta'.
Admitted.

Global Instance into_val_struct_field_leftCheat_cutoff `{ffi_syntax} : IntoValStructField "cutoff" strconv.leftCheat leftCheat.cutoff'.
Admitted.

Instance wp_struct_make_leftCheat `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} delta' cutoff':
  PureWp True
    (struct.make strconv.leftCheat (alist_val [
      "delta" ::= #delta';
      "cutoff" ::= #cutoff'
    ]))%V
    #(leftCheat.mk delta' cutoff').
Admitted.

Module floatInfo.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mantbits' : w64;
  expbits' : w64;
  bias' : w64;
}.
End def.
End floatInfo.


Global Instance settable_floatInfo `{ffi_syntax}: Settable _ :=
  settable! floatInfo.mk < floatInfo.mantbits'; floatInfo.expbits'; floatInfo.bias' >.
Global Instance into_val_floatInfo `{ffi_syntax} : IntoVal floatInfo.t.
Admitted.

Global Instance into_val_typed_floatInfo `{ffi_syntax} : IntoValTyped floatInfo.t strconv.floatInfo :=
{|
  default_val := floatInfo.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_floatInfo_mantbits `{ffi_syntax} : IntoValStructField "mantbits" strconv.floatInfo floatInfo.mantbits'.
Admitted.

Global Instance into_val_struct_field_floatInfo_expbits `{ffi_syntax} : IntoValStructField "expbits" strconv.floatInfo floatInfo.expbits'.
Admitted.

Global Instance into_val_struct_field_floatInfo_bias `{ffi_syntax} : IntoValStructField "bias" strconv.floatInfo floatInfo.bias'.
Admitted.

Instance wp_struct_make_floatInfo `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mantbits' expbits' bias':
  PureWp True
    (struct.make strconv.floatInfo (alist_val [
      "mantbits" ::= #mantbits';
      "expbits" ::= #expbits';
      "bias" ::= #bias'
    ]))%V
    #(floatInfo.mk mantbits' expbits' bias').
Admitted.

Module decimalSlice.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  d' : slice.t;
  nd' : w64;
  dp' : w64;
}.
End def.
End decimalSlice.


Global Instance settable_decimalSlice `{ffi_syntax}: Settable _ :=
  settable! decimalSlice.mk < decimalSlice.d'; decimalSlice.nd'; decimalSlice.dp' >.
Global Instance into_val_decimalSlice `{ffi_syntax} : IntoVal decimalSlice.t.
Admitted.

Global Instance into_val_typed_decimalSlice `{ffi_syntax} : IntoValTyped decimalSlice.t strconv.decimalSlice :=
{|
  default_val := decimalSlice.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_decimalSlice_d `{ffi_syntax} : IntoValStructField "d" strconv.decimalSlice decimalSlice.d'.
Admitted.

Global Instance into_val_struct_field_decimalSlice_nd `{ffi_syntax} : IntoValStructField "nd" strconv.decimalSlice decimalSlice.nd'.
Admitted.

Global Instance into_val_struct_field_decimalSlice_dp `{ffi_syntax} : IntoValStructField "dp" strconv.decimalSlice decimalSlice.dp'.
Admitted.

Instance wp_struct_make_decimalSlice `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} d' nd' dp':
  PureWp True
    (struct.make strconv.decimalSlice (alist_val [
      "d" ::= #d';
      "nd" ::= #nd';
      "dp" ::= #dp'
    ]))%V
    #(decimalSlice.mk d' nd' dp').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.strconv.
Require Export New.proof.proof_prelude.
Module strconv.
Section defs.
Class GlobalAddrs :=
{
  optimize : loc;
  powtab : loc;
  float64pow10 : loc;
  float32pow10 : loc;
  ErrRange : loc;
  ErrSyntax : loc;
  leftcheats : loc;
  detailedPowersOfTen : loc;
  float32info : loc;
  float64info : loc;
  uint64pow10 : loc;
  isPrint16 : loc;
  isNotPrint16 : loc;
  isPrint32 : loc;
  isNotPrint32 : loc;
  isGraphic : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("optimize"%go, optimize);
    ("powtab"%go, powtab);
    ("float64pow10"%go, float64pow10);
    ("float32pow10"%go, float32pow10);
    ("ErrRange"%go, ErrRange);
    ("ErrSyntax"%go, ErrSyntax);
    ("leftcheats"%go, leftcheats);
    ("detailedPowersOfTen"%go, detailedPowersOfTen);
    ("float32info"%go, float32info);
    ("float64info"%go, float64info);
    ("uint64pow10"%go, uint64pow10);
    ("isPrint16"%go, isPrint16);
    ("isNotPrint16"%go, isNotPrint16);
    ("isPrint32"%go, isPrint32);
    ("isNotPrint32"%go, isNotPrint32);
    ("isGraphic"%go, isGraphic)
  ].

Definition is_defined := is_global_definitions strconv.pkg_name' var_addrs strconv.functions' strconv.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
  "Hoptimize" ∷ optimize ↦ (default_val bool) ∗
  "Hpowtab" ∷ powtab ↦ (default_val slice.t) ∗
  "Hfloat64pow10" ∷ float64pow10 ↦ (default_val slice.t) ∗
  "Hfloat32pow10" ∷ float32pow10 ↦ (default_val slice.t) ∗
  "HErrRange" ∷ ErrRange ↦ (default_val interface.t) ∗
  "HErrSyntax" ∷ ErrSyntax ↦ (default_val interface.t) ∗
  "Hleftcheats" ∷ leftcheats ↦ (default_val slice.t) ∗
  "HdetailedPowersOfTen" ∷ detailedPowersOfTen ↦ (default_val (vec (vec w64 2) 696)) ∗
  "Hfloat32info" ∷ float32info ↦ (default_val floatInfo.t) ∗
  "Hfloat64info" ∷ float64info ↦ (default_val floatInfo.t) ∗
  "Huint64pow10" ∷ uint64pow10 ↦ (default_val (vec w64 20)) ∗
  "HisPrint16" ∷ isPrint16 ↦ (default_val slice.t) ∗
  "HisNotPrint16" ∷ isNotPrint16 ↦ (default_val slice.t) ∗
  "HisPrint32" ∷ isPrint32 ↦ (default_val slice.t) ∗
  "HisNotPrint32" ∷ isNotPrint32 ↦ (default_val slice.t) ∗
  "HisGraphic" ∷ isGraphic ↦ (default_val slice.t).

Global Instance wp_globals_get_optimize : 
  WpGlobalsGet strconv.pkg_name' "optimize" optimize is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_powtab : 
  WpGlobalsGet strconv.pkg_name' "powtab" powtab is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_float64pow10 : 
  WpGlobalsGet strconv.pkg_name' "float64pow10" float64pow10 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_float32pow10 : 
  WpGlobalsGet strconv.pkg_name' "float32pow10" float32pow10 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrRange : 
  WpGlobalsGet strconv.pkg_name' "ErrRange" ErrRange is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrSyntax : 
  WpGlobalsGet strconv.pkg_name' "ErrSyntax" ErrSyntax is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_leftcheats : 
  WpGlobalsGet strconv.pkg_name' "leftcheats" leftcheats is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_detailedPowersOfTen : 
  WpGlobalsGet strconv.pkg_name' "detailedPowersOfTen" detailedPowersOfTen is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_float32info : 
  WpGlobalsGet strconv.pkg_name' "float32info" float32info is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_float64info : 
  WpGlobalsGet strconv.pkg_name' "float64info" float64info is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_uint64pow10 : 
  WpGlobalsGet strconv.pkg_name' "uint64pow10" uint64pow10 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isPrint16 : 
  WpGlobalsGet strconv.pkg_name' "isPrint16" isPrint16 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isNotPrint16 : 
  WpGlobalsGet strconv.pkg_name' "isNotPrint16" isNotPrint16 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isPrint32 : 
  WpGlobalsGet strconv.pkg_name' "isPrint32" isPrint32 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isNotPrint32 : 
  WpGlobalsGet strconv.pkg_name' "isNotPrint32" isNotPrint32 is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_isGraphic : 
  WpGlobalsGet strconv.pkg_name' "isGraphic" isGraphic is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_ParseBool : 
  WpFuncCall strconv.pkg_name' "ParseBool" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FormatBool : 
  WpFuncCall strconv.pkg_name' "FormatBool" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendBool : 
  WpFuncCall strconv.pkg_name' "AppendBool" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_convErr : 
  WpFuncCall strconv.pkg_name' "convErr" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ParseComplex : 
  WpFuncCall strconv.pkg_name' "ParseComplex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_commonPrefixLenIgnoreCase : 
  WpFuncCall strconv.pkg_name' "commonPrefixLenIgnoreCase" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_special : 
  WpFuncCall strconv.pkg_name' "special" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_readFloat : 
  WpFuncCall strconv.pkg_name' "readFloat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_atof64exact : 
  WpFuncCall strconv.pkg_name' "atof64exact" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_atof32exact : 
  WpFuncCall strconv.pkg_name' "atof32exact" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_atofHex : 
  WpFuncCall strconv.pkg_name' "atofHex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_atof32 : 
  WpFuncCall strconv.pkg_name' "atof32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_atof64 : 
  WpFuncCall strconv.pkg_name' "atof64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ParseFloat : 
  WpFuncCall strconv.pkg_name' "ParseFloat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_parseFloatPrefix : 
  WpFuncCall strconv.pkg_name' "parseFloatPrefix" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_lower : 
  WpFuncCall strconv.pkg_name' "lower" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_syntaxError : 
  WpFuncCall strconv.pkg_name' "syntaxError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_rangeError : 
  WpFuncCall strconv.pkg_name' "rangeError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_baseError : 
  WpFuncCall strconv.pkg_name' "baseError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_bitSizeError : 
  WpFuncCall strconv.pkg_name' "bitSizeError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ParseUint : 
  WpFuncCall strconv.pkg_name' "ParseUint" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ParseInt : 
  WpFuncCall strconv.pkg_name' "ParseInt" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Atoi : 
  WpFuncCall strconv.pkg_name' "Atoi" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_underscoreOK : 
  WpFuncCall strconv.pkg_name' "underscoreOK" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_index : 
  WpFuncCall strconv.pkg_name' "index" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FormatComplex : 
  WpFuncCall strconv.pkg_name' "FormatComplex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_digitZero : 
  WpFuncCall strconv.pkg_name' "digitZero" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_trim : 
  WpFuncCall strconv.pkg_name' "trim" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_rightShift : 
  WpFuncCall strconv.pkg_name' "rightShift" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_prefixIsLessThan : 
  WpFuncCall strconv.pkg_name' "prefixIsLessThan" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_leftShift : 
  WpFuncCall strconv.pkg_name' "leftShift" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_shouldRoundUp : 
  WpFuncCall strconv.pkg_name' "shouldRoundUp" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_eiselLemire64 : 
  WpFuncCall strconv.pkg_name' "eiselLemire64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_eiselLemire32 : 
  WpFuncCall strconv.pkg_name' "eiselLemire32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FormatFloat : 
  WpFuncCall strconv.pkg_name' "FormatFloat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendFloat : 
  WpFuncCall strconv.pkg_name' "AppendFloat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_genericFtoa : 
  WpFuncCall strconv.pkg_name' "genericFtoa" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_bigFtoa : 
  WpFuncCall strconv.pkg_name' "bigFtoa" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_formatDigits : 
  WpFuncCall strconv.pkg_name' "formatDigits" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_roundShortest : 
  WpFuncCall strconv.pkg_name' "roundShortest" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_fmtE : 
  WpFuncCall strconv.pkg_name' "fmtE" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_fmtF : 
  WpFuncCall strconv.pkg_name' "fmtF" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_fmtB : 
  WpFuncCall strconv.pkg_name' "fmtB" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_fmtX : 
  WpFuncCall strconv.pkg_name' "fmtX" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ryuFtoaFixed32 : 
  WpFuncCall strconv.pkg_name' "ryuFtoaFixed32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ryuFtoaFixed64 : 
  WpFuncCall strconv.pkg_name' "ryuFtoaFixed64" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_formatDecimal : 
  WpFuncCall strconv.pkg_name' "formatDecimal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ryuFtoaShortest : 
  WpFuncCall strconv.pkg_name' "ryuFtoaShortest" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mulByLog2Log10 : 
  WpFuncCall strconv.pkg_name' "mulByLog2Log10" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mulByLog10Log2 : 
  WpFuncCall strconv.pkg_name' "mulByLog10Log2" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_computeBounds : 
  WpFuncCall strconv.pkg_name' "computeBounds" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ryuDigits : 
  WpFuncCall strconv.pkg_name' "ryuDigits" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ryuDigits32 : 
  WpFuncCall strconv.pkg_name' "ryuDigits32" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mult64bitPow10 : 
  WpFuncCall strconv.pkg_name' "mult64bitPow10" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mult128bitPow10 : 
  WpFuncCall strconv.pkg_name' "mult128bitPow10" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_divisibleByPower5 : 
  WpFuncCall strconv.pkg_name' "divisibleByPower5" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_divmod1e9 : 
  WpFuncCall strconv.pkg_name' "divmod1e9" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FormatUint : 
  WpFuncCall strconv.pkg_name' "FormatUint" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FormatInt : 
  WpFuncCall strconv.pkg_name' "FormatInt" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Itoa : 
  WpFuncCall strconv.pkg_name' "Itoa" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendInt : 
  WpFuncCall strconv.pkg_name' "AppendInt" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendUint : 
  WpFuncCall strconv.pkg_name' "AppendUint" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_small : 
  WpFuncCall strconv.pkg_name' "small" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_formatBits : 
  WpFuncCall strconv.pkg_name' "formatBits" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isPowerOfTwo : 
  WpFuncCall strconv.pkg_name' "isPowerOfTwo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_contains : 
  WpFuncCall strconv.pkg_name' "contains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_quoteWith : 
  WpFuncCall strconv.pkg_name' "quoteWith" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_quoteRuneWith : 
  WpFuncCall strconv.pkg_name' "quoteRuneWith" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_appendQuotedWith : 
  WpFuncCall strconv.pkg_name' "appendQuotedWith" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_appendQuotedRuneWith : 
  WpFuncCall strconv.pkg_name' "appendQuotedRuneWith" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_appendEscapedRune : 
  WpFuncCall strconv.pkg_name' "appendEscapedRune" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Quote : 
  WpFuncCall strconv.pkg_name' "Quote" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendQuote : 
  WpFuncCall strconv.pkg_name' "AppendQuote" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_QuoteToASCII : 
  WpFuncCall strconv.pkg_name' "QuoteToASCII" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendQuoteToASCII : 
  WpFuncCall strconv.pkg_name' "AppendQuoteToASCII" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_QuoteToGraphic : 
  WpFuncCall strconv.pkg_name' "QuoteToGraphic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendQuoteToGraphic : 
  WpFuncCall strconv.pkg_name' "AppendQuoteToGraphic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_QuoteRune : 
  WpFuncCall strconv.pkg_name' "QuoteRune" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendQuoteRune : 
  WpFuncCall strconv.pkg_name' "AppendQuoteRune" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_QuoteRuneToASCII : 
  WpFuncCall strconv.pkg_name' "QuoteRuneToASCII" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendQuoteRuneToASCII : 
  WpFuncCall strconv.pkg_name' "AppendQuoteRuneToASCII" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_QuoteRuneToGraphic : 
  WpFuncCall strconv.pkg_name' "QuoteRuneToGraphic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AppendQuoteRuneToGraphic : 
  WpFuncCall strconv.pkg_name' "AppendQuoteRuneToGraphic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CanBackquote : 
  WpFuncCall strconv.pkg_name' "CanBackquote" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_unhex : 
  WpFuncCall strconv.pkg_name' "unhex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnquoteChar : 
  WpFuncCall strconv.pkg_name' "UnquoteChar" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_QuotedPrefix : 
  WpFuncCall strconv.pkg_name' "QuotedPrefix" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Unquote : 
  WpFuncCall strconv.pkg_name' "Unquote" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_unquote : 
  WpFuncCall strconv.pkg_name' "unquote" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_bsearch : 
  WpFuncCall strconv.pkg_name' "bsearch" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsPrint : 
  WpFuncCall strconv.pkg_name' "IsPrint" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsGraphic : 
  WpFuncCall strconv.pkg_name' "IsGraphic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isInGraphicList : 
  WpFuncCall strconv.pkg_name' "isInGraphicList" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_NumError'ptr_Error : 
  WpMethodCall strconv.pkg_name' "NumError'ptr" "Error" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_NumError'ptr_Unwrap : 
  WpMethodCall strconv.pkg_name' "NumError'ptr" "Unwrap" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_Assign : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "Assign" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_Round : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "Round" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_RoundDown : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "RoundDown" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_RoundUp : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "RoundUp" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_RoundedInteger : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "RoundedInteger" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_Shift : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "Shift" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_String : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "String" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_floatBits : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "floatBits" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_decimal'ptr_set : 
  WpMethodCall strconv.pkg_name' "decimal'ptr" "set" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End strconv.
