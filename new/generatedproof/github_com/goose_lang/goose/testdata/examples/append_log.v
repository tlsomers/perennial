(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import github_com.goose_lang.goose.testdata.examples.append_log.
From New.golang Require Import theory.

Require New.generatedproof.sync.
Require New.generatedproof.github_com.tchajed.marshal.
Require New.generatedproof.github_com.goose_lang.primitive.disk.
Axiom falso : False.

Module Log.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  m' : loc;
  sz' : w64;
  diskSz' : w64;
}.
End def.
End Log.


Global Instance settable_Log `{ffi_syntax}: Settable _ :=
  settable! Log.mk < Log.m'; Log.sz'; Log.diskSz' >.
Global Instance into_val_Log `{ffi_syntax} : IntoVal Log.t.
Admitted.

Global Instance into_val_typed_Log `{ffi_syntax} : IntoValTyped Log.t append_log.Log :=
{|
  default_val := Log.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Log_m `{ffi_syntax} : IntoValStructField "m" append_log.Log Log.m'.
Admitted.

Global Instance into_val_struct_field_Log_sz `{ffi_syntax} : IntoValStructField "sz" append_log.Log Log.sz'.
Admitted.

Global Instance into_val_struct_field_Log_diskSz `{ffi_syntax} : IntoValStructField "diskSz" append_log.Log Log.diskSz'.
Admitted.

Instance wp_struct_make_Log `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} m' sz' diskSz':
  PureWp True
    (struct.make append_log.Log (alist_val [
      "m" ::= #m';
      "sz" ::= #sz';
      "diskSz" ::= #diskSz'
    ]))%V
    #(Log.mk m' sz' diskSz').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.github_com.goose_lang.goose.testdata.examples.append_log.
Require Export New.proof.disk_prelude.
Module append_log.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions append_log.pkg_name' var_addrs append_log.functions' append_log.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_Init :
  WpFuncCall append_log.pkg_name' "Init" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Open :
  WpFuncCall append_log.pkg_name' "Open" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_writeAll :
  WpFuncCall append_log.pkg_name' "writeAll" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Append : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "Append" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Get : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "Get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_Reset : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "Reset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_append : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "append" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_get : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_mkHdr : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "mkHdr" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_reset : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "reset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Log'ptr_writeHdr : 
  WpMethodCall append_log.pkg_name' "Log'ptr" "writeHdr" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End append_log.
