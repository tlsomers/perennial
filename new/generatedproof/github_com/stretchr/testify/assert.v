(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import github_com.stretchr.testify.assert.
From New.golang Require Import theory.

Axiom falso : False.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.github_com.stretchr.testify.assert.
Require Export New.proof.proof_prelude.
Module assert.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions assert.pkg_name' var_addrs assert.functions' assert.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_compare : 
  WpFuncCall assert.pkg_name' "compare" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Greater : 
  WpFuncCall assert.pkg_name' "Greater" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GreaterOrEqual : 
  WpFuncCall assert.pkg_name' "GreaterOrEqual" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Less : 
  WpFuncCall assert.pkg_name' "Less" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_LessOrEqual : 
  WpFuncCall assert.pkg_name' "LessOrEqual" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Positive : 
  WpFuncCall assert.pkg_name' "Positive" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Negative : 
  WpFuncCall assert.pkg_name' "Negative" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_compareTwoValues : 
  WpFuncCall assert.pkg_name' "compareTwoValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_containsValue : 
  WpFuncCall assert.pkg_name' "containsValue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Conditionf : 
  WpFuncCall assert.pkg_name' "Conditionf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Containsf : 
  WpFuncCall assert.pkg_name' "Containsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DirExistsf : 
  WpFuncCall assert.pkg_name' "DirExistsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ElementsMatchf : 
  WpFuncCall assert.pkg_name' "ElementsMatchf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Emptyf : 
  WpFuncCall assert.pkg_name' "Emptyf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Equalf : 
  WpFuncCall assert.pkg_name' "Equalf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualErrorf : 
  WpFuncCall assert.pkg_name' "EqualErrorf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualExportedValuesf : 
  WpFuncCall assert.pkg_name' "EqualExportedValuesf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualValuesf : 
  WpFuncCall assert.pkg_name' "EqualValuesf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Errorf : 
  WpFuncCall assert.pkg_name' "Errorf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ErrorAsf : 
  WpFuncCall assert.pkg_name' "ErrorAsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ErrorContainsf : 
  WpFuncCall assert.pkg_name' "ErrorContainsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ErrorIsf : 
  WpFuncCall assert.pkg_name' "ErrorIsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Eventuallyf : 
  WpFuncCall assert.pkg_name' "Eventuallyf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EventuallyWithTf : 
  WpFuncCall assert.pkg_name' "EventuallyWithTf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Exactlyf : 
  WpFuncCall assert.pkg_name' "Exactlyf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Failf : 
  WpFuncCall assert.pkg_name' "Failf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FailNowf : 
  WpFuncCall assert.pkg_name' "FailNowf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Falsef : 
  WpFuncCall assert.pkg_name' "Falsef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FileExistsf : 
  WpFuncCall assert.pkg_name' "FileExistsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Greaterf : 
  WpFuncCall assert.pkg_name' "Greaterf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GreaterOrEqualf : 
  WpFuncCall assert.pkg_name' "GreaterOrEqualf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPBodyContainsf : 
  WpFuncCall assert.pkg_name' "HTTPBodyContainsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPBodyNotContainsf : 
  WpFuncCall assert.pkg_name' "HTTPBodyNotContainsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPErrorf : 
  WpFuncCall assert.pkg_name' "HTTPErrorf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPRedirectf : 
  WpFuncCall assert.pkg_name' "HTTPRedirectf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPStatusCodef : 
  WpFuncCall assert.pkg_name' "HTTPStatusCodef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPSuccessf : 
  WpFuncCall assert.pkg_name' "HTTPSuccessf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Implementsf : 
  WpFuncCall assert.pkg_name' "Implementsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InDeltaf : 
  WpFuncCall assert.pkg_name' "InDeltaf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InDeltaMapValuesf : 
  WpFuncCall assert.pkg_name' "InDeltaMapValuesf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InDeltaSlicef : 
  WpFuncCall assert.pkg_name' "InDeltaSlicef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InEpsilonf : 
  WpFuncCall assert.pkg_name' "InEpsilonf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InEpsilonSlicef : 
  WpFuncCall assert.pkg_name' "InEpsilonSlicef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsDecreasingf : 
  WpFuncCall assert.pkg_name' "IsDecreasingf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsIncreasingf : 
  WpFuncCall assert.pkg_name' "IsIncreasingf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsNonDecreasingf : 
  WpFuncCall assert.pkg_name' "IsNonDecreasingf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsNonIncreasingf : 
  WpFuncCall assert.pkg_name' "IsNonIncreasingf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsTypef : 
  WpFuncCall assert.pkg_name' "IsTypef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_JSONEqf : 
  WpFuncCall assert.pkg_name' "JSONEqf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Lenf : 
  WpFuncCall assert.pkg_name' "Lenf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Lessf : 
  WpFuncCall assert.pkg_name' "Lessf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_LessOrEqualf : 
  WpFuncCall assert.pkg_name' "LessOrEqualf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Negativef : 
  WpFuncCall assert.pkg_name' "Negativef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Neverf : 
  WpFuncCall assert.pkg_name' "Neverf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Nilf : 
  WpFuncCall assert.pkg_name' "Nilf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NoDirExistsf : 
  WpFuncCall assert.pkg_name' "NoDirExistsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NoErrorf : 
  WpFuncCall assert.pkg_name' "NoErrorf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NoFileExistsf : 
  WpFuncCall assert.pkg_name' "NoFileExistsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotContainsf : 
  WpFuncCall assert.pkg_name' "NotContainsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotEmptyf : 
  WpFuncCall assert.pkg_name' "NotEmptyf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotEqualf : 
  WpFuncCall assert.pkg_name' "NotEqualf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotEqualValuesf : 
  WpFuncCall assert.pkg_name' "NotEqualValuesf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotErrorIsf : 
  WpFuncCall assert.pkg_name' "NotErrorIsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotImplementsf : 
  WpFuncCall assert.pkg_name' "NotImplementsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotNilf : 
  WpFuncCall assert.pkg_name' "NotNilf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotPanicsf : 
  WpFuncCall assert.pkg_name' "NotPanicsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotRegexpf : 
  WpFuncCall assert.pkg_name' "NotRegexpf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotSamef : 
  WpFuncCall assert.pkg_name' "NotSamef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotSubsetf : 
  WpFuncCall assert.pkg_name' "NotSubsetf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotZerof : 
  WpFuncCall assert.pkg_name' "NotZerof" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Panicsf : 
  WpFuncCall assert.pkg_name' "Panicsf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_PanicsWithErrorf : 
  WpFuncCall assert.pkg_name' "PanicsWithErrorf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_PanicsWithValuef : 
  WpFuncCall assert.pkg_name' "PanicsWithValuef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Positivef : 
  WpFuncCall assert.pkg_name' "Positivef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Regexpf : 
  WpFuncCall assert.pkg_name' "Regexpf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Samef : 
  WpFuncCall assert.pkg_name' "Samef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Subsetf : 
  WpFuncCall assert.pkg_name' "Subsetf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Truef : 
  WpFuncCall assert.pkg_name' "Truef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithinDurationf : 
  WpFuncCall assert.pkg_name' "WithinDurationf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithinRangef : 
  WpFuncCall assert.pkg_name' "WithinRangef" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_YAMLEqf : 
  WpFuncCall assert.pkg_name' "YAMLEqf" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Zerof : 
  WpFuncCall assert.pkg_name' "Zerof" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isOrdered : 
  WpFuncCall assert.pkg_name' "isOrdered" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsIncreasing : 
  WpFuncCall assert.pkg_name' "IsIncreasing" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsNonIncreasing : 
  WpFuncCall assert.pkg_name' "IsNonIncreasing" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsDecreasing : 
  WpFuncCall assert.pkg_name' "IsDecreasing" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsNonDecreasing : 
  WpFuncCall assert.pkg_name' "IsNonDecreasing" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ObjectsAreEqual : 
  WpFuncCall assert.pkg_name' "ObjectsAreEqual" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_copyExportedFields : 
  WpFuncCall assert.pkg_name' "copyExportedFields" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ObjectsExportedFieldsAreEqual : 
  WpFuncCall assert.pkg_name' "ObjectsExportedFieldsAreEqual" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ObjectsAreEqualValues : 
  WpFuncCall assert.pkg_name' "ObjectsAreEqualValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isNumericType : 
  WpFuncCall assert.pkg_name' "isNumericType" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_CallerInfo : 
  WpFuncCall assert.pkg_name' "CallerInfo" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isTest : 
  WpFuncCall assert.pkg_name' "isTest" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_messageFromMsgAndArgs : 
  WpFuncCall assert.pkg_name' "messageFromMsgAndArgs" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_indentMessageLines : 
  WpFuncCall assert.pkg_name' "indentMessageLines" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FailNow : 
  WpFuncCall assert.pkg_name' "FailNow" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Fail : 
  WpFuncCall assert.pkg_name' "Fail" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_labeledOutput : 
  WpFuncCall assert.pkg_name' "labeledOutput" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Implements : 
  WpFuncCall assert.pkg_name' "Implements" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotImplements : 
  WpFuncCall assert.pkg_name' "NotImplements" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_IsType : 
  WpFuncCall assert.pkg_name' "IsType" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Equal : 
  WpFuncCall assert.pkg_name' "Equal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_validateEqualArgs : 
  WpFuncCall assert.pkg_name' "validateEqualArgs" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Same : 
  WpFuncCall assert.pkg_name' "Same" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotSame : 
  WpFuncCall assert.pkg_name' "NotSame" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_samePointers : 
  WpFuncCall assert.pkg_name' "samePointers" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_formatUnequalValues : 
  WpFuncCall assert.pkg_name' "formatUnequalValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_truncatingFormat : 
  WpFuncCall assert.pkg_name' "truncatingFormat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualValues : 
  WpFuncCall assert.pkg_name' "EqualValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualExportedValues : 
  WpFuncCall assert.pkg_name' "EqualExportedValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Exactly : 
  WpFuncCall assert.pkg_name' "Exactly" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotNil : 
  WpFuncCall assert.pkg_name' "NotNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isNil : 
  WpFuncCall assert.pkg_name' "isNil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Nil : 
  WpFuncCall assert.pkg_name' "Nil" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isEmpty : 
  WpFuncCall assert.pkg_name' "isEmpty" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Empty : 
  WpFuncCall assert.pkg_name' "Empty" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotEmpty : 
  WpFuncCall assert.pkg_name' "NotEmpty" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_getLen : 
  WpFuncCall assert.pkg_name' "getLen" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Len : 
  WpFuncCall assert.pkg_name' "Len" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_True : 
  WpFuncCall assert.pkg_name' "True" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_False : 
  WpFuncCall assert.pkg_name' "False" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotEqual : 
  WpFuncCall assert.pkg_name' "NotEqual" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotEqualValues : 
  WpFuncCall assert.pkg_name' "NotEqualValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_containsElement : 
  WpFuncCall assert.pkg_name' "containsElement" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Contains : 
  WpFuncCall assert.pkg_name' "Contains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotContains : 
  WpFuncCall assert.pkg_name' "NotContains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Subset : 
  WpFuncCall assert.pkg_name' "Subset" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotSubset : 
  WpFuncCall assert.pkg_name' "NotSubset" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ElementsMatch : 
  WpFuncCall assert.pkg_name' "ElementsMatch" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isList : 
  WpFuncCall assert.pkg_name' "isList" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_diffLists : 
  WpFuncCall assert.pkg_name' "diffLists" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_formatListDiff : 
  WpFuncCall assert.pkg_name' "formatListDiff" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Condition : 
  WpFuncCall assert.pkg_name' "Condition" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_didPanic : 
  WpFuncCall assert.pkg_name' "didPanic" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Panics : 
  WpFuncCall assert.pkg_name' "Panics" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_PanicsWithValue : 
  WpFuncCall assert.pkg_name' "PanicsWithValue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_PanicsWithError : 
  WpFuncCall assert.pkg_name' "PanicsWithError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotPanics : 
  WpFuncCall assert.pkg_name' "NotPanics" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithinDuration : 
  WpFuncCall assert.pkg_name' "WithinDuration" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithinRange : 
  WpFuncCall assert.pkg_name' "WithinRange" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_toFloat : 
  WpFuncCall assert.pkg_name' "toFloat" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InDelta : 
  WpFuncCall assert.pkg_name' "InDelta" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InDeltaSlice : 
  WpFuncCall assert.pkg_name' "InDeltaSlice" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InDeltaMapValues : 
  WpFuncCall assert.pkg_name' "InDeltaMapValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_calcRelativeError : 
  WpFuncCall assert.pkg_name' "calcRelativeError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InEpsilon : 
  WpFuncCall assert.pkg_name' "InEpsilon" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_InEpsilonSlice : 
  WpFuncCall assert.pkg_name' "InEpsilonSlice" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NoError : 
  WpFuncCall assert.pkg_name' "NoError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Error : 
  WpFuncCall assert.pkg_name' "Error" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EqualError : 
  WpFuncCall assert.pkg_name' "EqualError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ErrorContains : 
  WpFuncCall assert.pkg_name' "ErrorContains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_matchRegexp : 
  WpFuncCall assert.pkg_name' "matchRegexp" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Regexp : 
  WpFuncCall assert.pkg_name' "Regexp" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotRegexp : 
  WpFuncCall assert.pkg_name' "NotRegexp" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Zero : 
  WpFuncCall assert.pkg_name' "Zero" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotZero : 
  WpFuncCall assert.pkg_name' "NotZero" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FileExists : 
  WpFuncCall assert.pkg_name' "FileExists" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NoFileExists : 
  WpFuncCall assert.pkg_name' "NoFileExists" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DirExists : 
  WpFuncCall assert.pkg_name' "DirExists" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NoDirExists : 
  WpFuncCall assert.pkg_name' "NoDirExists" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_JSONEq : 
  WpFuncCall assert.pkg_name' "JSONEq" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_YAMLEq : 
  WpFuncCall assert.pkg_name' "YAMLEq" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_typeAndKind : 
  WpFuncCall assert.pkg_name' "typeAndKind" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_diff : 
  WpFuncCall assert.pkg_name' "diff" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isFunction : 
  WpFuncCall assert.pkg_name' "isFunction" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Eventually : 
  WpFuncCall assert.pkg_name' "Eventually" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EventuallyWithT : 
  WpFuncCall assert.pkg_name' "EventuallyWithT" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Never : 
  WpFuncCall assert.pkg_name' "Never" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ErrorIs : 
  WpFuncCall assert.pkg_name' "ErrorIs" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NotErrorIs : 
  WpFuncCall assert.pkg_name' "NotErrorIs" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ErrorAs : 
  WpFuncCall assert.pkg_name' "ErrorAs" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_buildErrorChainString : 
  WpFuncCall assert.pkg_name' "buildErrorChainString" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_New : 
  WpFuncCall assert.pkg_name' "New" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_httpCode : 
  WpFuncCall assert.pkg_name' "httpCode" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPSuccess : 
  WpFuncCall assert.pkg_name' "HTTPSuccess" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPRedirect : 
  WpFuncCall assert.pkg_name' "HTTPRedirect" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPError : 
  WpFuncCall assert.pkg_name' "HTTPError" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPStatusCode : 
  WpFuncCall assert.pkg_name' "HTTPStatusCode" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPBody : 
  WpFuncCall assert.pkg_name' "HTTPBody" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPBodyContains : 
  WpFuncCall assert.pkg_name' "HTTPBodyContains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_HTTPBodyNotContains : 
  WpFuncCall assert.pkg_name' "HTTPBodyNotContains" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_CollectT'ptr_Copy : 
  WpMethodCall assert.pkg_name' "CollectT'ptr" "Copy" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_CollectT'ptr_Errorf : 
  WpMethodCall assert.pkg_name' "CollectT'ptr" "Errorf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_CollectT'ptr_FailNow : 
  WpMethodCall assert.pkg_name' "CollectT'ptr" "FailNow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_CollectT'ptr_Reset : 
  WpMethodCall assert.pkg_name' "CollectT'ptr" "Reset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Condition : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Condition" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Conditionf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Conditionf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Contains : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Contains" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Containsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Containsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_DirExists : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "DirExists" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_DirExistsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "DirExistsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ElementsMatch : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ElementsMatch" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ElementsMatchf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ElementsMatchf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Empty : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Empty" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Emptyf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Emptyf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Equal : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Equal" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EqualError : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EqualError" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EqualErrorf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EqualErrorf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EqualExportedValues : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EqualExportedValues" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EqualExportedValuesf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EqualExportedValuesf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EqualValues : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EqualValues" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EqualValuesf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EqualValuesf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Equalf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Equalf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Error : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Error" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ErrorAs : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ErrorAs" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ErrorAsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ErrorAsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ErrorContains : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ErrorContains" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ErrorContainsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ErrorContainsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ErrorIs : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ErrorIs" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_ErrorIsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "ErrorIsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Errorf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Errorf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Eventually : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Eventually" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EventuallyWithT : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EventuallyWithT" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_EventuallyWithTf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "EventuallyWithTf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Eventuallyf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Eventuallyf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Exactly : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Exactly" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Exactlyf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Exactlyf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Fail : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Fail" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_FailNow : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "FailNow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_FailNowf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "FailNowf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Failf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Failf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_False : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "False" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Falsef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Falsef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_FileExists : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "FileExists" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_FileExistsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "FileExistsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Greater : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Greater" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_GreaterOrEqual : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "GreaterOrEqual" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_GreaterOrEqualf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "GreaterOrEqualf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Greaterf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Greaterf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPBodyContains : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPBodyContains" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPBodyContainsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPBodyContainsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPBodyNotContains : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPBodyNotContains" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPBodyNotContainsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPBodyNotContainsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPError : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPError" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPErrorf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPErrorf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPRedirect : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPRedirect" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPRedirectf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPRedirectf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPStatusCode : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPStatusCode" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPStatusCodef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPStatusCodef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPSuccess : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPSuccess" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_HTTPSuccessf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "HTTPSuccessf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Implements : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Implements" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Implementsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Implementsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InDelta : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InDelta" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InDeltaMapValues : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InDeltaMapValues" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InDeltaMapValuesf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InDeltaMapValuesf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InDeltaSlice : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InDeltaSlice" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InDeltaSlicef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InDeltaSlicef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InDeltaf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InDeltaf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InEpsilon : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InEpsilon" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InEpsilonSlice : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InEpsilonSlice" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InEpsilonSlicef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InEpsilonSlicef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_InEpsilonf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "InEpsilonf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsDecreasing : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsDecreasing" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsDecreasingf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsDecreasingf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsIncreasing : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsIncreasing" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsIncreasingf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsIncreasingf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsNonDecreasing : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsNonDecreasing" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsNonDecreasingf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsNonDecreasingf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsNonIncreasing : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsNonIncreasing" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsNonIncreasingf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsNonIncreasingf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsType : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsType" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_IsTypef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "IsTypef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_JSONEq : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "JSONEq" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_JSONEqf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "JSONEqf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Len : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Len" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Lenf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Lenf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Less : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Less" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_LessOrEqual : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "LessOrEqual" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_LessOrEqualf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "LessOrEqualf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Lessf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Lessf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Negative : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Negative" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Negativef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Negativef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Never : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Never" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Neverf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Neverf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Nil : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Nil" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Nilf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Nilf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NoDirExists : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NoDirExists" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NoDirExistsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NoDirExistsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NoError : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NoError" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NoErrorf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NoErrorf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NoFileExists : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NoFileExists" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NoFileExistsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NoFileExistsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotContains : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotContains" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotContainsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotContainsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotEmpty : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotEmpty" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotEmptyf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotEmptyf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotEqual : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotEqual" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotEqualValues : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotEqualValues" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotEqualValuesf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotEqualValuesf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotEqualf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotEqualf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotErrorIs : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotErrorIs" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotErrorIsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotErrorIsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotImplements : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotImplements" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotImplementsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotImplementsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotNil : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotNil" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotNilf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotNilf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotPanics : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotPanics" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotPanicsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotPanicsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotRegexp : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotRegexp" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotRegexpf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotRegexpf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotSame : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotSame" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotSamef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotSamef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotSubset : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotSubset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotSubsetf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotSubsetf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotZero : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotZero" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_NotZerof : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "NotZerof" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Panics : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Panics" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_PanicsWithError : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "PanicsWithError" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_PanicsWithErrorf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "PanicsWithErrorf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_PanicsWithValue : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "PanicsWithValue" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_PanicsWithValuef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "PanicsWithValuef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Panicsf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Panicsf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Positive : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Positive" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Positivef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Positivef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Regexp : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Regexp" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Regexpf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Regexpf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Same : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Same" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Samef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Samef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Subset : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Subset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Subsetf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Subsetf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_True : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "True" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Truef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Truef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_WithinDuration : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "WithinDuration" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_WithinDurationf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "WithinDurationf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_WithinRange : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "WithinRange" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_WithinRangef : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "WithinRangef" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_YAMLEq : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "YAMLEq" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_YAMLEqf : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "YAMLEqf" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Zero : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Zero" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Assertions'ptr_Zerof : 
  WpMethodCall assert.pkg_name' "Assertions'ptr" "Zerof" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End assert.
