(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.sync.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.go_journal.alloc.
Module alloc.
Axiom falso : False.
Module Alloc.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  next' : w64;
  bitmap' : slice.t;
}.
End def.
End Alloc.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Alloc : Settable _ :=
  settable! Alloc.mk < Alloc.mu'; Alloc.next'; Alloc.bitmap' >.
Global Instance into_val_Alloc : IntoVal Alloc.t.
Admitted.

Global Instance into_val_typed_Alloc : IntoValTyped Alloc.t alloc.Alloc :=
{|
  default_val := Alloc.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Alloc_mu : IntoValStructField "mu" alloc.Alloc Alloc.mu'.
Admitted.

Global Instance into_val_struct_field_Alloc_next : IntoValStructField "next" alloc.Alloc Alloc.next'.
Admitted.

Global Instance into_val_struct_field_Alloc_bitmap : IntoValStructField "bitmap" alloc.Alloc Alloc.bitmap'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Alloc mu' next' bitmap':
  PureWp True
    (struct.make #alloc.Alloc (alist_val [
      "mu" ::= #mu';
      "next" ::= #next';
      "bitmap" ::= #bitmap'
    ]))%struct
    #(Alloc.mk mu' next' bitmap').
Admitted.


Global Instance Alloc_struct_fields_split dq l (v : Alloc.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[alloc.Alloc :: "mu"]{dq} v.(Alloc.mu') ∗
    "Hnext" ∷ l ↦s[alloc.Alloc :: "next"]{dq} v.(Alloc.next') ∗
    "Hbitmap" ∷ l ↦s[alloc.Alloc :: "bitmap"]{dq} v.(Alloc.bitmap')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined alloc :=
{|
  is_pkg_defined := is_global_definitions alloc var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MkAlloc :
  WpFuncCall alloc "MkAlloc" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MkMaxAlloc :
  WpFuncCall alloc "MkMaxAlloc" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_popCnt :
  WpFuncCall alloc "popCnt" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_AllocNum :
  WpMethodCall alloc "Alloc'ptr" "AllocNum" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_FreeNum :
  WpMethodCall alloc "Alloc'ptr" "FreeNum" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_MarkUsed :
  WpMethodCall alloc "Alloc'ptr" "MarkUsed" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_NumFree :
  WpMethodCall alloc "Alloc'ptr" "NumFree" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_allocBit :
  WpMethodCall alloc "Alloc'ptr" "allocBit" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_freeBit :
  WpMethodCall alloc "Alloc'ptr" "freeBit" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Alloc'ptr_incNext :
  WpMethodCall alloc "Alloc'ptr" "incNext" _ (is_pkg_defined alloc) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End alloc.
