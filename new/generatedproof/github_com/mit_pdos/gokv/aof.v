(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.aof.
Module aof.
Axiom falso : False.
Module AppendOnlyFile.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  oldDurableCond' : loc;
  durableCond' : loc;
  lengthCond' : loc;
  membuf' : slice.t;
  length' : w64;
  durableLength' : w64;
  closeRequested' : bool;
  closed' : bool;
  closedCond' : loc;
}.
End def.
End AppendOnlyFile.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_AppendOnlyFile `{ffi_syntax}: Settable _ :=
  settable! AppendOnlyFile.mk < AppendOnlyFile.mu'; AppendOnlyFile.oldDurableCond'; AppendOnlyFile.durableCond'; AppendOnlyFile.lengthCond'; AppendOnlyFile.membuf'; AppendOnlyFile.length'; AppendOnlyFile.durableLength'; AppendOnlyFile.closeRequested'; AppendOnlyFile.closed'; AppendOnlyFile.closedCond' >.
Global Instance into_val_AppendOnlyFile `{ffi_syntax} : IntoVal AppendOnlyFile.t.
Admitted.

Global Instance into_val_typed_AppendOnlyFile `{ffi_syntax} : IntoValTyped AppendOnlyFile.t aof.AppendOnlyFile :=
{|
  default_val := AppendOnlyFile.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_AppendOnlyFile_mu `{ffi_syntax} : IntoValStructField "mu" aof.AppendOnlyFile AppendOnlyFile.mu'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_oldDurableCond `{ffi_syntax} : IntoValStructField "oldDurableCond" aof.AppendOnlyFile AppendOnlyFile.oldDurableCond'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_durableCond `{ffi_syntax} : IntoValStructField "durableCond" aof.AppendOnlyFile AppendOnlyFile.durableCond'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_lengthCond `{ffi_syntax} : IntoValStructField "lengthCond" aof.AppendOnlyFile AppendOnlyFile.lengthCond'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_membuf `{ffi_syntax} : IntoValStructField "membuf" aof.AppendOnlyFile AppendOnlyFile.membuf'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_length `{ffi_syntax} : IntoValStructField "length" aof.AppendOnlyFile AppendOnlyFile.length'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_durableLength `{ffi_syntax} : IntoValStructField "durableLength" aof.AppendOnlyFile AppendOnlyFile.durableLength'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_closeRequested `{ffi_syntax} : IntoValStructField "closeRequested" aof.AppendOnlyFile AppendOnlyFile.closeRequested'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_closed `{ffi_syntax} : IntoValStructField "closed" aof.AppendOnlyFile AppendOnlyFile.closed'.
Admitted.

Global Instance into_val_struct_field_AppendOnlyFile_closedCond `{ffi_syntax} : IntoValStructField "closedCond" aof.AppendOnlyFile AppendOnlyFile.closedCond'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_AppendOnlyFile `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' oldDurableCond' durableCond' lengthCond' membuf' length' durableLength' closeRequested' closed' closedCond':
  PureWp True
    (struct.make #aof.AppendOnlyFile (alist_val [
      "mu" ::= #mu';
      "oldDurableCond" ::= #oldDurableCond';
      "durableCond" ::= #durableCond';
      "lengthCond" ::= #lengthCond';
      "membuf" ::= #membuf';
      "length" ::= #length';
      "durableLength" ::= #durableLength';
      "closeRequested" ::= #closeRequested';
      "closed" ::= #closed';
      "closedCond" ::= #closedCond'
    ]))%struct
    #(AppendOnlyFile.mk mu' oldDurableCond' durableCond' lengthCond' membuf' length' durableLength' closeRequested' closed' closedCond').
Admitted.


Global Instance AppendOnlyFile_struct_fields_split dq l (v : AppendOnlyFile.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[aof.AppendOnlyFile :: "mu"]{dq} v.(AppendOnlyFile.mu') ∗
    "HoldDurableCond" ∷ l ↦s[aof.AppendOnlyFile :: "oldDurableCond"]{dq} v.(AppendOnlyFile.oldDurableCond') ∗
    "HdurableCond" ∷ l ↦s[aof.AppendOnlyFile :: "durableCond"]{dq} v.(AppendOnlyFile.durableCond') ∗
    "HlengthCond" ∷ l ↦s[aof.AppendOnlyFile :: "lengthCond"]{dq} v.(AppendOnlyFile.lengthCond') ∗
    "Hmembuf" ∷ l ↦s[aof.AppendOnlyFile :: "membuf"]{dq} v.(AppendOnlyFile.membuf') ∗
    "Hlength" ∷ l ↦s[aof.AppendOnlyFile :: "length"]{dq} v.(AppendOnlyFile.length') ∗
    "HdurableLength" ∷ l ↦s[aof.AppendOnlyFile :: "durableLength"]{dq} v.(AppendOnlyFile.durableLength') ∗
    "HcloseRequested" ∷ l ↦s[aof.AppendOnlyFile :: "closeRequested"]{dq} v.(AppendOnlyFile.closeRequested') ∗
    "Hclosed" ∷ l ↦s[aof.AppendOnlyFile :: "closed"]{dq} v.(AppendOnlyFile.closed') ∗
    "HclosedCond" ∷ l ↦s[aof.AppendOnlyFile :: "closedCond"]{dq} v.(AppendOnlyFile.closedCond')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined aof :=
{|
  is_pkg_defined := is_global_definitions aof var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_CreateAppendOnlyFile :
  WpFuncCall aof "CreateAppendOnlyFile" _ (is_pkg_defined aof) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_AppendOnlyFile'ptr_Append :
  WpMethodCall aof "AppendOnlyFile'ptr" "Append" _ (is_pkg_defined aof) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AppendOnlyFile'ptr_Close :
  WpMethodCall aof "AppendOnlyFile'ptr" "Close" _ (is_pkg_defined aof) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_AppendOnlyFile'ptr_WaitAppend :
  WpMethodCall aof "AppendOnlyFile'ptr" "WaitAppend" _ (is_pkg_defined aof) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End aof.
