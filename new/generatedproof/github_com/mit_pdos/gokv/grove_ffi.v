(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import github_com.mit_pdos.gokv.grove_ffi.
From New.golang Require Import theory.

Axiom falso : False.

Module listener.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  l' : interface.t;
}.
End def.
End listener.


Global Instance settable_listener `{ffi_syntax}: Settable _ :=
  settable! listener.mk < listener.l' >.
Global Instance into_val_listener `{ffi_syntax} : IntoVal listener.t.
Admitted.

Global Instance into_val_typed_listener `{ffi_syntax} : IntoValTyped listener.t grove_ffi.listener :=
{|
  default_val := listener.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_listener_l `{ffi_syntax} : IntoValStructField "l" grove_ffi.listener listener.l'.
Admitted.

Instance wp_struct_make_listener `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} l':
  PureWp True
    (struct.make grove_ffi.listener (alist_val [
      "l" ::= #l'
    ]))%V
    #(listener.mk l').
Admitted.

Module connection.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  conn' : interface.t;
  send_mu' : loc;
  recv_mu' : loc;
}.
End def.
End connection.


Global Instance settable_connection `{ffi_syntax}: Settable _ :=
  settable! connection.mk < connection.conn'; connection.send_mu'; connection.recv_mu' >.
Global Instance into_val_connection `{ffi_syntax} : IntoVal connection.t.
Admitted.

Global Instance into_val_typed_connection `{ffi_syntax} : IntoValTyped connection.t grove_ffi.connection :=
{|
  default_val := connection.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_connection_conn `{ffi_syntax} : IntoValStructField "conn" grove_ffi.connection connection.conn'.
Admitted.

Global Instance into_val_struct_field_connection_send_mu `{ffi_syntax} : IntoValStructField "send_mu" grove_ffi.connection connection.send_mu'.
Admitted.

Global Instance into_val_struct_field_connection_recv_mu `{ffi_syntax} : IntoValStructField "recv_mu" grove_ffi.connection connection.recv_mu'.
Admitted.

Instance wp_struct_make_connection `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} conn' send_mu' recv_mu':
  PureWp True
    (struct.make grove_ffi.connection (alist_val [
      "conn" ::= #conn';
      "send_mu" ::= #send_mu';
      "recv_mu" ::= #recv_mu'
    ]))%V
    #(connection.mk conn' send_mu' recv_mu').
Admitted.

Module ConnectRet.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Err' : bool;
  Connection' : loc;
}.
End def.
End ConnectRet.


Global Instance settable_ConnectRet `{ffi_syntax}: Settable _ :=
  settable! ConnectRet.mk < ConnectRet.Err'; ConnectRet.Connection' >.
Global Instance into_val_ConnectRet `{ffi_syntax} : IntoVal ConnectRet.t.
Admitted.

Global Instance into_val_typed_ConnectRet `{ffi_syntax} : IntoValTyped ConnectRet.t grove_ffi.ConnectRet :=
{|
  default_val := ConnectRet.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ConnectRet_Err `{ffi_syntax} : IntoValStructField "Err" grove_ffi.ConnectRet ConnectRet.Err'.
Admitted.

Global Instance into_val_struct_field_ConnectRet_Connection `{ffi_syntax} : IntoValStructField "Connection" grove_ffi.ConnectRet ConnectRet.Connection'.
Admitted.

Instance wp_struct_make_ConnectRet `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Err' Connection':
  PureWp True
    (struct.make grove_ffi.ConnectRet (alist_val [
      "Err" ::= #Err';
      "Connection" ::= #Connection'
    ]))%V
    #(ConnectRet.mk Err' Connection').
Admitted.

Module ReceiveRet.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Err' : bool;
  Data' : slice.t;
}.
End def.
End ReceiveRet.


Global Instance settable_ReceiveRet `{ffi_syntax}: Settable _ :=
  settable! ReceiveRet.mk < ReceiveRet.Err'; ReceiveRet.Data' >.
Global Instance into_val_ReceiveRet `{ffi_syntax} : IntoVal ReceiveRet.t.
Admitted.

Global Instance into_val_typed_ReceiveRet `{ffi_syntax} : IntoValTyped ReceiveRet.t grove_ffi.ReceiveRet :=
{|
  default_val := ReceiveRet.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ReceiveRet_Err `{ffi_syntax} : IntoValStructField "Err" grove_ffi.ReceiveRet ReceiveRet.Err'.
Admitted.

Global Instance into_val_struct_field_ReceiveRet_Data `{ffi_syntax} : IntoValStructField "Data" grove_ffi.ReceiveRet ReceiveRet.Data'.
Admitted.

Instance wp_struct_make_ReceiveRet `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Err' Data':
  PureWp True
    (struct.make grove_ffi.ReceiveRet (alist_val [
      "Err" ::= #Err';
      "Data" ::= #Data'
    ]))%V
    #(ReceiveRet.mk Err' Data').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.proof.grove_prelude.
Module grove_ffi.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions grove_ffi.pkg_name' var_addrs grove_ffi.functions' grove_ffi.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_panic_if_err : 
  WpFuncCall grove_ffi.pkg_name' "panic_if_err" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FileWrite : 
  WpFuncCall grove_ffi.pkg_name' "FileWrite" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FileRead : 
  WpFuncCall grove_ffi.pkg_name' "FileRead" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_FileAppend : 
  WpFuncCall grove_ffi.pkg_name' "FileAppend" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_U64ToString : 
  WpFuncCall grove_ffi.pkg_name' "U64ToString" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeAddress : 
  WpFuncCall grove_ffi.pkg_name' "MakeAddress" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_AddressToStr : 
  WpFuncCall grove_ffi.pkg_name' "AddressToStr" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Listen : 
  WpFuncCall grove_ffi.pkg_name' "Listen" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Accept : 
  WpFuncCall grove_ffi.pkg_name' "Accept" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_makeConnection : 
  WpFuncCall grove_ffi.pkg_name' "makeConnection" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Connect : 
  WpFuncCall grove_ffi.pkg_name' "Connect" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Send : 
  WpFuncCall grove_ffi.pkg_name' "Send" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Receive : 
  WpFuncCall grove_ffi.pkg_name' "Receive" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetTimeRange : 
  WpFuncCall grove_ffi.pkg_name' "GetTimeRange" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_GetTSC : 
  WpFuncCall grove_ffi.pkg_name' "GetTSC" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

End defs.
End grove_ffi.
