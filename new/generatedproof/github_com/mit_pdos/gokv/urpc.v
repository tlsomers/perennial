(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import github_com.mit_pdos.gokv.urpc.
From New.golang Require Import theory.

Axiom falso : False.

Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  handlers' : loc;
}.
End def.
End Server.


Global Instance settable_Server `{ffi_syntax}: Settable _ :=
  settable! Server.mk < Server.handlers' >.
Global Instance into_val_Server `{ffi_syntax} : IntoVal Server.t.
Admitted.

Global Instance into_val_typed_Server `{ffi_syntax} : IntoValTyped Server.t urpc.Server :=
{|
  default_val := Server.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Server_handlers `{ffi_syntax} : IntoValStructField "handlers" urpc.Server Server.handlers'.
Admitted.

Instance wp_struct_make_Server `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} handlers':
  PureWp True
    (struct.make urpc.Server (alist_val [
      "handlers" ::= #handlers'
    ]))%V
    #(Server.mk handlers').
Admitted.

Module Callback.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  reply' : loc;
  state' : loc;
  cond' : loc;
}.
End def.
End Callback.


Global Instance settable_Callback `{ffi_syntax}: Settable _ :=
  settable! Callback.mk < Callback.reply'; Callback.state'; Callback.cond' >.
Global Instance into_val_Callback `{ffi_syntax} : IntoVal Callback.t.
Admitted.

Global Instance into_val_typed_Callback `{ffi_syntax} : IntoValTyped Callback.t urpc.Callback :=
{|
  default_val := Callback.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Callback_reply `{ffi_syntax} : IntoValStructField "reply" urpc.Callback Callback.reply'.
Admitted.

Global Instance into_val_struct_field_Callback_state `{ffi_syntax} : IntoValStructField "state" urpc.Callback Callback.state'.
Admitted.

Global Instance into_val_struct_field_Callback_cond `{ffi_syntax} : IntoValStructField "cond" urpc.Callback Callback.cond'.
Admitted.

Instance wp_struct_make_Callback `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} reply' state' cond':
  PureWp True
    (struct.make urpc.Callback (alist_val [
      "reply" ::= #reply';
      "state" ::= #state';
      "cond" ::= #cond'
    ]))%V
    #(Callback.mk reply' state' cond').
Admitted.

Module Client.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  conn' : loc;
  seq' : w64;
  pending' : loc;
}.
End def.
End Client.


Global Instance settable_Client `{ffi_syntax}: Settable _ :=
  settable! Client.mk < Client.mu'; Client.conn'; Client.seq'; Client.pending' >.
Global Instance into_val_Client `{ffi_syntax} : IntoVal Client.t.
Admitted.

Global Instance into_val_typed_Client `{ffi_syntax} : IntoValTyped Client.t urpc.Client :=
{|
  default_val := Client.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Client_mu `{ffi_syntax} : IntoValStructField "mu" urpc.Client Client.mu'.
Admitted.

Global Instance into_val_struct_field_Client_conn `{ffi_syntax} : IntoValStructField "conn" urpc.Client Client.conn'.
Admitted.

Global Instance into_val_struct_field_Client_seq `{ffi_syntax} : IntoValStructField "seq" urpc.Client Client.seq'.
Admitted.

Global Instance into_val_struct_field_Client_pending `{ffi_syntax} : IntoValStructField "pending" urpc.Client Client.pending'.
Admitted.

Instance wp_struct_make_Client `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' conn' seq' pending':
  PureWp True
    (struct.make urpc.Client (alist_val [
      "mu" ::= #mu';
      "conn" ::= #conn';
      "seq" ::= #seq';
      "pending" ::= #pending'
    ]))%V
    #(Client.mk mu' conn' seq' pending').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.github_com.mit_pdos.gokv.urpc.
Require Export New.proof.grove_prelude.
Module urpc.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions urpc.pkg_name' var_addrs urpc.functions' urpc.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_MakeServer : 
  WpFuncCall urpc.pkg_name' "MakeServer" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_TryMakeClient : 
  WpFuncCall urpc.pkg_name' "TryMakeClient" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeClient : 
  WpFuncCall urpc.pkg_name' "MakeClient" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_Serve : 
  WpMethodCall urpc.pkg_name' "Server'ptr" "Serve" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_readThread : 
  WpMethodCall urpc.pkg_name' "Server'ptr" "readThread" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_rpcHandle : 
  WpMethodCall urpc.pkg_name' "Server'ptr" "rpcHandle" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Client'ptr_Call : 
  WpMethodCall urpc.pkg_name' "Client'ptr" "Call" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Client'ptr_CallComplete : 
  WpMethodCall urpc.pkg_name' "Client'ptr" "CallComplete" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Client'ptr_CallStart : 
  WpMethodCall urpc.pkg_name' "Client'ptr" "CallStart" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Client'ptr_replyThread : 
  WpMethodCall urpc.pkg_name' "Client'ptr" "replyThread" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End urpc.
