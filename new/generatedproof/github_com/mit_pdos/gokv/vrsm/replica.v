(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.e.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.github_com.mit_pdos.gokv.reconnectclient.
Require Export New.generatedproof.log.
Require Export New.generatedproof.sync.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.urpc.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.configservice.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.replica.
Module replica.
Axiom falso : False.

Module Op.
Section def.
Context `{ffi_syntax}.
Definition t := slice.t.
End def.
End Op.
Module ApplyAsBackupArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  epoch' : w64;
  index' : w64;
  op' : slice.t;
}.
End def.
End ApplyAsBackupArgs.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_ApplyAsBackupArgs `{ffi_syntax}: Settable _ :=
  settable! ApplyAsBackupArgs.mk < ApplyAsBackupArgs.epoch'; ApplyAsBackupArgs.index'; ApplyAsBackupArgs.op' >.
Global Instance into_val_ApplyAsBackupArgs `{ffi_syntax} : IntoVal ApplyAsBackupArgs.t.
Admitted.

Global Instance into_val_typed_ApplyAsBackupArgs `{ffi_syntax} : IntoValTyped ApplyAsBackupArgs.t replica.ApplyAsBackupArgs :=
{|
  default_val := ApplyAsBackupArgs.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ApplyAsBackupArgs_epoch `{ffi_syntax} : IntoValStructField "epoch" replica.ApplyAsBackupArgs ApplyAsBackupArgs.epoch'.
Admitted.

Global Instance into_val_struct_field_ApplyAsBackupArgs_index `{ffi_syntax} : IntoValStructField "index" replica.ApplyAsBackupArgs ApplyAsBackupArgs.index'.
Admitted.

Global Instance into_val_struct_field_ApplyAsBackupArgs_op `{ffi_syntax} : IntoValStructField "op" replica.ApplyAsBackupArgs ApplyAsBackupArgs.op'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ApplyAsBackupArgs `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} epoch' index' op':
  PureWp True
    (struct.make #replica.ApplyAsBackupArgs (alist_val [
      "epoch" ::= #epoch';
      "index" ::= #index';
      "op" ::= #op'
    ]))%struct
    #(ApplyAsBackupArgs.mk epoch' index' op').
Admitted.


Global Instance ApplyAsBackupArgs_struct_fields_split dq l (v : ApplyAsBackupArgs.t) :
  StructFieldsSplit dq l v (
    "Hepoch" ∷ l ↦s[replica.ApplyAsBackupArgs :: "epoch"]{dq} v.(ApplyAsBackupArgs.epoch') ∗
    "Hindex" ∷ l ↦s[replica.ApplyAsBackupArgs :: "index"]{dq} v.(ApplyAsBackupArgs.index') ∗
    "Hop" ∷ l ↦s[replica.ApplyAsBackupArgs :: "op"]{dq} v.(ApplyAsBackupArgs.op')
  ).
Admitted.

End instances.
Module SetStateArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Epoch' : w64;
  NextIndex' : w64;
  CommittedNextIndex' : w64;
  State' : slice.t;
}.
End def.
End SetStateArgs.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_SetStateArgs `{ffi_syntax}: Settable _ :=
  settable! SetStateArgs.mk < SetStateArgs.Epoch'; SetStateArgs.NextIndex'; SetStateArgs.CommittedNextIndex'; SetStateArgs.State' >.
Global Instance into_val_SetStateArgs `{ffi_syntax} : IntoVal SetStateArgs.t.
Admitted.

Global Instance into_val_typed_SetStateArgs `{ffi_syntax} : IntoValTyped SetStateArgs.t replica.SetStateArgs :=
{|
  default_val := SetStateArgs.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_SetStateArgs_Epoch `{ffi_syntax} : IntoValStructField "Epoch" replica.SetStateArgs SetStateArgs.Epoch'.
Admitted.

Global Instance into_val_struct_field_SetStateArgs_NextIndex `{ffi_syntax} : IntoValStructField "NextIndex" replica.SetStateArgs SetStateArgs.NextIndex'.
Admitted.

Global Instance into_val_struct_field_SetStateArgs_CommittedNextIndex `{ffi_syntax} : IntoValStructField "CommittedNextIndex" replica.SetStateArgs SetStateArgs.CommittedNextIndex'.
Admitted.

Global Instance into_val_struct_field_SetStateArgs_State `{ffi_syntax} : IntoValStructField "State" replica.SetStateArgs SetStateArgs.State'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_SetStateArgs `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Epoch' NextIndex' CommittedNextIndex' State':
  PureWp True
    (struct.make #replica.SetStateArgs (alist_val [
      "Epoch" ::= #Epoch';
      "NextIndex" ::= #NextIndex';
      "CommittedNextIndex" ::= #CommittedNextIndex';
      "State" ::= #State'
    ]))%struct
    #(SetStateArgs.mk Epoch' NextIndex' CommittedNextIndex' State').
Admitted.


Global Instance SetStateArgs_struct_fields_split dq l (v : SetStateArgs.t) :
  StructFieldsSplit dq l v (
    "HEpoch" ∷ l ↦s[replica.SetStateArgs :: "Epoch"]{dq} v.(SetStateArgs.Epoch') ∗
    "HNextIndex" ∷ l ↦s[replica.SetStateArgs :: "NextIndex"]{dq} v.(SetStateArgs.NextIndex') ∗
    "HCommittedNextIndex" ∷ l ↦s[replica.SetStateArgs :: "CommittedNextIndex"]{dq} v.(SetStateArgs.CommittedNextIndex') ∗
    "HState" ∷ l ↦s[replica.SetStateArgs :: "State"]{dq} v.(SetStateArgs.State')
  ).
Admitted.

End instances.
Module GetStateArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Epoch' : w64;
}.
End def.
End GetStateArgs.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_GetStateArgs `{ffi_syntax}: Settable _ :=
  settable! GetStateArgs.mk < GetStateArgs.Epoch' >.
Global Instance into_val_GetStateArgs `{ffi_syntax} : IntoVal GetStateArgs.t.
Admitted.

Global Instance into_val_typed_GetStateArgs `{ffi_syntax} : IntoValTyped GetStateArgs.t replica.GetStateArgs :=
{|
  default_val := GetStateArgs.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_GetStateArgs_Epoch `{ffi_syntax} : IntoValStructField "Epoch" replica.GetStateArgs GetStateArgs.Epoch'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_GetStateArgs `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Epoch':
  PureWp True
    (struct.make #replica.GetStateArgs (alist_val [
      "Epoch" ::= #Epoch'
    ]))%struct
    #(GetStateArgs.mk Epoch').
Admitted.


Global Instance GetStateArgs_struct_fields_split dq l (v : GetStateArgs.t) :
  StructFieldsSplit dq l v (
    "HEpoch" ∷ l ↦s[replica.GetStateArgs :: "Epoch"]{dq} v.(GetStateArgs.Epoch')
  ).
Admitted.

End instances.
Module GetStateReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Err' : w64;
  NextIndex' : w64;
  CommittedNextIndex' : w64;
  State' : slice.t;
}.
End def.
End GetStateReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_GetStateReply `{ffi_syntax}: Settable _ :=
  settable! GetStateReply.mk < GetStateReply.Err'; GetStateReply.NextIndex'; GetStateReply.CommittedNextIndex'; GetStateReply.State' >.
Global Instance into_val_GetStateReply `{ffi_syntax} : IntoVal GetStateReply.t.
Admitted.

Global Instance into_val_typed_GetStateReply `{ffi_syntax} : IntoValTyped GetStateReply.t replica.GetStateReply :=
{|
  default_val := GetStateReply.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_GetStateReply_Err `{ffi_syntax} : IntoValStructField "Err" replica.GetStateReply GetStateReply.Err'.
Admitted.

Global Instance into_val_struct_field_GetStateReply_NextIndex `{ffi_syntax} : IntoValStructField "NextIndex" replica.GetStateReply GetStateReply.NextIndex'.
Admitted.

Global Instance into_val_struct_field_GetStateReply_CommittedNextIndex `{ffi_syntax} : IntoValStructField "CommittedNextIndex" replica.GetStateReply GetStateReply.CommittedNextIndex'.
Admitted.

Global Instance into_val_struct_field_GetStateReply_State `{ffi_syntax} : IntoValStructField "State" replica.GetStateReply GetStateReply.State'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_GetStateReply `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Err' NextIndex' CommittedNextIndex' State':
  PureWp True
    (struct.make #replica.GetStateReply (alist_val [
      "Err" ::= #Err';
      "NextIndex" ::= #NextIndex';
      "CommittedNextIndex" ::= #CommittedNextIndex';
      "State" ::= #State'
    ]))%struct
    #(GetStateReply.mk Err' NextIndex' CommittedNextIndex' State').
Admitted.


Global Instance GetStateReply_struct_fields_split dq l (v : GetStateReply.t) :
  StructFieldsSplit dq l v (
    "HErr" ∷ l ↦s[replica.GetStateReply :: "Err"]{dq} v.(GetStateReply.Err') ∗
    "HNextIndex" ∷ l ↦s[replica.GetStateReply :: "NextIndex"]{dq} v.(GetStateReply.NextIndex') ∗
    "HCommittedNextIndex" ∷ l ↦s[replica.GetStateReply :: "CommittedNextIndex"]{dq} v.(GetStateReply.CommittedNextIndex') ∗
    "HState" ∷ l ↦s[replica.GetStateReply :: "State"]{dq} v.(GetStateReply.State')
  ).
Admitted.

End instances.
Module BecomePrimaryArgs.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Epoch' : w64;
  Replicas' : slice.t;
}.
End def.
End BecomePrimaryArgs.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_BecomePrimaryArgs `{ffi_syntax}: Settable _ :=
  settable! BecomePrimaryArgs.mk < BecomePrimaryArgs.Epoch'; BecomePrimaryArgs.Replicas' >.
Global Instance into_val_BecomePrimaryArgs `{ffi_syntax} : IntoVal BecomePrimaryArgs.t.
Admitted.

Global Instance into_val_typed_BecomePrimaryArgs `{ffi_syntax} : IntoValTyped BecomePrimaryArgs.t replica.BecomePrimaryArgs :=
{|
  default_val := BecomePrimaryArgs.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_BecomePrimaryArgs_Epoch `{ffi_syntax} : IntoValStructField "Epoch" replica.BecomePrimaryArgs BecomePrimaryArgs.Epoch'.
Admitted.

Global Instance into_val_struct_field_BecomePrimaryArgs_Replicas `{ffi_syntax} : IntoValStructField "Replicas" replica.BecomePrimaryArgs BecomePrimaryArgs.Replicas'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_BecomePrimaryArgs `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Epoch' Replicas':
  PureWp True
    (struct.make #replica.BecomePrimaryArgs (alist_val [
      "Epoch" ::= #Epoch';
      "Replicas" ::= #Replicas'
    ]))%struct
    #(BecomePrimaryArgs.mk Epoch' Replicas').
Admitted.


Global Instance BecomePrimaryArgs_struct_fields_split dq l (v : BecomePrimaryArgs.t) :
  StructFieldsSplit dq l v (
    "HEpoch" ∷ l ↦s[replica.BecomePrimaryArgs :: "Epoch"]{dq} v.(BecomePrimaryArgs.Epoch') ∗
    "HReplicas" ∷ l ↦s[replica.BecomePrimaryArgs :: "Replicas"]{dq} v.(BecomePrimaryArgs.Replicas')
  ).
Admitted.

End instances.
Module ApplyReply.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Err' : w64;
  Reply' : slice.t;
}.
End def.
End ApplyReply.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_ApplyReply `{ffi_syntax}: Settable _ :=
  settable! ApplyReply.mk < ApplyReply.Err'; ApplyReply.Reply' >.
Global Instance into_val_ApplyReply `{ffi_syntax} : IntoVal ApplyReply.t.
Admitted.

Global Instance into_val_typed_ApplyReply `{ffi_syntax} : IntoValTyped ApplyReply.t replica.ApplyReply :=
{|
  default_val := ApplyReply.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_ApplyReply_Err `{ffi_syntax} : IntoValStructField "Err" replica.ApplyReply ApplyReply.Err'.
Admitted.

Global Instance into_val_struct_field_ApplyReply_Reply `{ffi_syntax} : IntoValStructField "Reply" replica.ApplyReply ApplyReply.Reply'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_ApplyReply `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Err' Reply':
  PureWp True
    (struct.make #replica.ApplyReply (alist_val [
      "Err" ::= #Err';
      "Reply" ::= #Reply'
    ]))%struct
    #(ApplyReply.mk Err' Reply').
Admitted.


Global Instance ApplyReply_struct_fields_split dq l (v : ApplyReply.t) :
  StructFieldsSplit dq l v (
    "HErr" ∷ l ↦s[replica.ApplyReply :: "Err"]{dq} v.(ApplyReply.Err') ∗
    "HReply" ∷ l ↦s[replica.ApplyReply :: "Reply"]{dq} v.(ApplyReply.Reply')
  ).
Admitted.

End instances.

Module IncreaseCommitArgs.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End IncreaseCommitArgs.
Module StateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  StartApply' : func.t;
  ApplyReadonly' : func.t;
  SetStateAndUnseal' : func.t;
  GetStateAndSeal' : func.t;
}.
End def.
End StateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_StateMachine `{ffi_syntax}: Settable _ :=
  settable! StateMachine.mk < StateMachine.StartApply'; StateMachine.ApplyReadonly'; StateMachine.SetStateAndUnseal'; StateMachine.GetStateAndSeal' >.
Global Instance into_val_StateMachine `{ffi_syntax} : IntoVal StateMachine.t.
Admitted.

Global Instance into_val_typed_StateMachine `{ffi_syntax} : IntoValTyped StateMachine.t replica.StateMachine :=
{|
  default_val := StateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_StateMachine_StartApply `{ffi_syntax} : IntoValStructField "StartApply" replica.StateMachine StateMachine.StartApply'.
Admitted.

Global Instance into_val_struct_field_StateMachine_ApplyReadonly `{ffi_syntax} : IntoValStructField "ApplyReadonly" replica.StateMachine StateMachine.ApplyReadonly'.
Admitted.

Global Instance into_val_struct_field_StateMachine_SetStateAndUnseal `{ffi_syntax} : IntoValStructField "SetStateAndUnseal" replica.StateMachine StateMachine.SetStateAndUnseal'.
Admitted.

Global Instance into_val_struct_field_StateMachine_GetStateAndSeal `{ffi_syntax} : IntoValStructField "GetStateAndSeal" replica.StateMachine StateMachine.GetStateAndSeal'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_StateMachine `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} StartApply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal':
  PureWp True
    (struct.make #replica.StateMachine (alist_val [
      "StartApply" ::= #StartApply';
      "ApplyReadonly" ::= #ApplyReadonly';
      "SetStateAndUnseal" ::= #SetStateAndUnseal';
      "GetStateAndSeal" ::= #GetStateAndSeal'
    ]))%struct
    #(StateMachine.mk StartApply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal').
Admitted.


Global Instance StateMachine_struct_fields_split dq l (v : StateMachine.t) :
  StructFieldsSplit dq l v (
    "HStartApply" ∷ l ↦s[replica.StateMachine :: "StartApply"]{dq} v.(StateMachine.StartApply') ∗
    "HApplyReadonly" ∷ l ↦s[replica.StateMachine :: "ApplyReadonly"]{dq} v.(StateMachine.ApplyReadonly') ∗
    "HSetStateAndUnseal" ∷ l ↦s[replica.StateMachine :: "SetStateAndUnseal"]{dq} v.(StateMachine.SetStateAndUnseal') ∗
    "HGetStateAndSeal" ∷ l ↦s[replica.StateMachine :: "GetStateAndSeal"]{dq} v.(StateMachine.GetStateAndSeal')
  ).
Admitted.

End instances.
Module SyncStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Apply' : func.t;
  ApplyReadonly' : func.t;
  SetStateAndUnseal' : func.t;
  GetStateAndSeal' : func.t;
}.
End def.
End SyncStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_SyncStateMachine `{ffi_syntax}: Settable _ :=
  settable! SyncStateMachine.mk < SyncStateMachine.Apply'; SyncStateMachine.ApplyReadonly'; SyncStateMachine.SetStateAndUnseal'; SyncStateMachine.GetStateAndSeal' >.
Global Instance into_val_SyncStateMachine `{ffi_syntax} : IntoVal SyncStateMachine.t.
Admitted.

Global Instance into_val_typed_SyncStateMachine `{ffi_syntax} : IntoValTyped SyncStateMachine.t replica.SyncStateMachine :=
{|
  default_val := SyncStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_SyncStateMachine_Apply `{ffi_syntax} : IntoValStructField "Apply" replica.SyncStateMachine SyncStateMachine.Apply'.
Admitted.

Global Instance into_val_struct_field_SyncStateMachine_ApplyReadonly `{ffi_syntax} : IntoValStructField "ApplyReadonly" replica.SyncStateMachine SyncStateMachine.ApplyReadonly'.
Admitted.

Global Instance into_val_struct_field_SyncStateMachine_SetStateAndUnseal `{ffi_syntax} : IntoValStructField "SetStateAndUnseal" replica.SyncStateMachine SyncStateMachine.SetStateAndUnseal'.
Admitted.

Global Instance into_val_struct_field_SyncStateMachine_GetStateAndSeal `{ffi_syntax} : IntoValStructField "GetStateAndSeal" replica.SyncStateMachine SyncStateMachine.GetStateAndSeal'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_SyncStateMachine `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Apply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal':
  PureWp True
    (struct.make #replica.SyncStateMachine (alist_val [
      "Apply" ::= #Apply';
      "ApplyReadonly" ::= #ApplyReadonly';
      "SetStateAndUnseal" ::= #SetStateAndUnseal';
      "GetStateAndSeal" ::= #GetStateAndSeal'
    ]))%struct
    #(SyncStateMachine.mk Apply' ApplyReadonly' SetStateAndUnseal' GetStateAndSeal').
Admitted.


Global Instance SyncStateMachine_struct_fields_split dq l (v : SyncStateMachine.t) :
  StructFieldsSplit dq l v (
    "HApply" ∷ l ↦s[replica.SyncStateMachine :: "Apply"]{dq} v.(SyncStateMachine.Apply') ∗
    "HApplyReadonly" ∷ l ↦s[replica.SyncStateMachine :: "ApplyReadonly"]{dq} v.(SyncStateMachine.ApplyReadonly') ∗
    "HSetStateAndUnseal" ∷ l ↦s[replica.SyncStateMachine :: "SetStateAndUnseal"]{dq} v.(SyncStateMachine.SetStateAndUnseal') ∗
    "HGetStateAndSeal" ∷ l ↦s[replica.SyncStateMachine :: "GetStateAndSeal"]{dq} v.(SyncStateMachine.GetStateAndSeal')
  ).
Admitted.

End instances.
Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  cl' : loc;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Clerk `{ffi_syntax}: Settable _ :=
  settable! Clerk.mk < Clerk.cl' >.
Global Instance into_val_Clerk `{ffi_syntax} : IntoVal Clerk.t.
Admitted.

Global Instance into_val_typed_Clerk `{ffi_syntax} : IntoValTyped Clerk.t replica.Clerk :=
{|
  default_val := Clerk.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Clerk_cl `{ffi_syntax} : IntoValStructField "cl" replica.Clerk Clerk.cl'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} cl':
  PureWp True
    (struct.make #replica.Clerk (alist_val [
      "cl" ::= #cl'
    ]))%struct
    #(Clerk.mk cl').
Admitted.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "Hcl" ∷ l ↦s[replica.Clerk :: "cl"]{dq} v.(Clerk.cl')
  ).
Admitted.

End instances.
Module Server.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : loc;
  epoch' : w64;
  sealed' : bool;
  sm' : loc;
  nextIndex' : w64;
  canBecomePrimary' : bool;
  isPrimary' : bool;
  clerks' : slice.t;
  isPrimary_cond' : loc;
  opAppliedConds' : loc;
  leaseExpiration' : w64;
  leaseValid' : bool;
  committedNextIndex' : w64;
  committedNextIndex_cond' : loc;
  confCk' : loc;
}.
End def.
End Server.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Server `{ffi_syntax}: Settable _ :=
  settable! Server.mk < Server.mu'; Server.epoch'; Server.sealed'; Server.sm'; Server.nextIndex'; Server.canBecomePrimary'; Server.isPrimary'; Server.clerks'; Server.isPrimary_cond'; Server.opAppliedConds'; Server.leaseExpiration'; Server.leaseValid'; Server.committedNextIndex'; Server.committedNextIndex_cond'; Server.confCk' >.
Global Instance into_val_Server `{ffi_syntax} : IntoVal Server.t.
Admitted.

Global Instance into_val_typed_Server `{ffi_syntax} : IntoValTyped Server.t replica.Server :=
{|
  default_val := Server.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Server_mu `{ffi_syntax} : IntoValStructField "mu" replica.Server Server.mu'.
Admitted.

Global Instance into_val_struct_field_Server_epoch `{ffi_syntax} : IntoValStructField "epoch" replica.Server Server.epoch'.
Admitted.

Global Instance into_val_struct_field_Server_sealed `{ffi_syntax} : IntoValStructField "sealed" replica.Server Server.sealed'.
Admitted.

Global Instance into_val_struct_field_Server_sm `{ffi_syntax} : IntoValStructField "sm" replica.Server Server.sm'.
Admitted.

Global Instance into_val_struct_field_Server_nextIndex `{ffi_syntax} : IntoValStructField "nextIndex" replica.Server Server.nextIndex'.
Admitted.

Global Instance into_val_struct_field_Server_canBecomePrimary `{ffi_syntax} : IntoValStructField "canBecomePrimary" replica.Server Server.canBecomePrimary'.
Admitted.

Global Instance into_val_struct_field_Server_isPrimary `{ffi_syntax} : IntoValStructField "isPrimary" replica.Server Server.isPrimary'.
Admitted.

Global Instance into_val_struct_field_Server_clerks `{ffi_syntax} : IntoValStructField "clerks" replica.Server Server.clerks'.
Admitted.

Global Instance into_val_struct_field_Server_isPrimary_cond `{ffi_syntax} : IntoValStructField "isPrimary_cond" replica.Server Server.isPrimary_cond'.
Admitted.

Global Instance into_val_struct_field_Server_opAppliedConds `{ffi_syntax} : IntoValStructField "opAppliedConds" replica.Server Server.opAppliedConds'.
Admitted.

Global Instance into_val_struct_field_Server_leaseExpiration `{ffi_syntax} : IntoValStructField "leaseExpiration" replica.Server Server.leaseExpiration'.
Admitted.

Global Instance into_val_struct_field_Server_leaseValid `{ffi_syntax} : IntoValStructField "leaseValid" replica.Server Server.leaseValid'.
Admitted.

Global Instance into_val_struct_field_Server_committedNextIndex `{ffi_syntax} : IntoValStructField "committedNextIndex" replica.Server Server.committedNextIndex'.
Admitted.

Global Instance into_val_struct_field_Server_committedNextIndex_cond `{ffi_syntax} : IntoValStructField "committedNextIndex_cond" replica.Server Server.committedNextIndex_cond'.
Admitted.

Global Instance into_val_struct_field_Server_confCk `{ffi_syntax} : IntoValStructField "confCk" replica.Server Server.confCk'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Server `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' epoch' sealed' sm' nextIndex' canBecomePrimary' isPrimary' clerks' isPrimary_cond' opAppliedConds' leaseExpiration' leaseValid' committedNextIndex' committedNextIndex_cond' confCk':
  PureWp True
    (struct.make #replica.Server (alist_val [
      "mu" ::= #mu';
      "epoch" ::= #epoch';
      "sealed" ::= #sealed';
      "sm" ::= #sm';
      "nextIndex" ::= #nextIndex';
      "canBecomePrimary" ::= #canBecomePrimary';
      "isPrimary" ::= #isPrimary';
      "clerks" ::= #clerks';
      "isPrimary_cond" ::= #isPrimary_cond';
      "opAppliedConds" ::= #opAppliedConds';
      "leaseExpiration" ::= #leaseExpiration';
      "leaseValid" ::= #leaseValid';
      "committedNextIndex" ::= #committedNextIndex';
      "committedNextIndex_cond" ::= #committedNextIndex_cond';
      "confCk" ::= #confCk'
    ]))%struct
    #(Server.mk mu' epoch' sealed' sm' nextIndex' canBecomePrimary' isPrimary' clerks' isPrimary_cond' opAppliedConds' leaseExpiration' leaseValid' committedNextIndex' committedNextIndex_cond' confCk').
Admitted.


Global Instance Server_struct_fields_split dq l (v : Server.t) :
  StructFieldsSplit dq l v (
    "Hmu" ∷ l ↦s[replica.Server :: "mu"]{dq} v.(Server.mu') ∗
    "Hepoch" ∷ l ↦s[replica.Server :: "epoch"]{dq} v.(Server.epoch') ∗
    "Hsealed" ∷ l ↦s[replica.Server :: "sealed"]{dq} v.(Server.sealed') ∗
    "Hsm" ∷ l ↦s[replica.Server :: "sm"]{dq} v.(Server.sm') ∗
    "HnextIndex" ∷ l ↦s[replica.Server :: "nextIndex"]{dq} v.(Server.nextIndex') ∗
    "HcanBecomePrimary" ∷ l ↦s[replica.Server :: "canBecomePrimary"]{dq} v.(Server.canBecomePrimary') ∗
    "HisPrimary" ∷ l ↦s[replica.Server :: "isPrimary"]{dq} v.(Server.isPrimary') ∗
    "Hclerks" ∷ l ↦s[replica.Server :: "clerks"]{dq} v.(Server.clerks') ∗
    "HisPrimary_cond" ∷ l ↦s[replica.Server :: "isPrimary_cond"]{dq} v.(Server.isPrimary_cond') ∗
    "HopAppliedConds" ∷ l ↦s[replica.Server :: "opAppliedConds"]{dq} v.(Server.opAppliedConds') ∗
    "HleaseExpiration" ∷ l ↦s[replica.Server :: "leaseExpiration"]{dq} v.(Server.leaseExpiration') ∗
    "HleaseValid" ∷ l ↦s[replica.Server :: "leaseValid"]{dq} v.(Server.leaseValid') ∗
    "HcommittedNextIndex" ∷ l ↦s[replica.Server :: "committedNextIndex"]{dq} v.(Server.committedNextIndex') ∗
    "HcommittedNextIndex_cond" ∷ l ↦s[replica.Server :: "committedNextIndex_cond"]{dq} v.(Server.committedNextIndex_cond') ∗
    "HconfCk" ∷ l ↦s[replica.Server :: "confCk"]{dq} v.(Server.confCk')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined replica :=
{|
  is_pkg_defined := is_global_definitions replica var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_EncodeApplyAsBackupArgs :
  WpFuncCall replica "EncodeApplyAsBackupArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeApplyAsBackupArgs :
  WpFuncCall replica "DecodeApplyAsBackupArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeSetStateArgs :
  WpFuncCall replica "EncodeSetStateArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeSetStateArgs :
  WpFuncCall replica "DecodeSetStateArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeGetStateArgs :
  WpFuncCall replica "EncodeGetStateArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeGetStateArgs :
  WpFuncCall replica "DecodeGetStateArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeGetStateReply :
  WpFuncCall replica "EncodeGetStateReply" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeGetStateReply :
  WpFuncCall replica "DecodeGetStateReply" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeBecomePrimaryArgs :
  WpFuncCall replica "EncodeBecomePrimaryArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeBecomePrimaryArgs :
  WpFuncCall replica "DecodeBecomePrimaryArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeApplyReply :
  WpFuncCall replica "EncodeApplyReply" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeApplyReply :
  WpFuncCall replica "DecodeApplyReply" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeIncreaseCommitArgs :
  WpFuncCall replica "EncodeIncreaseCommitArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_DecodeIncreaseCommitArgs :
  WpFuncCall replica "DecodeIncreaseCommitArgs" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeClerk :
  WpFuncCall replica "MakeClerk" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeServer :
  WpFuncCall replica "MakeServer" _ (is_pkg_defined replica) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_Apply :
  WpMethodCall replica "Clerk'ptr" "Apply" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyAsBackup :
  WpMethodCall replica "Clerk'ptr" "ApplyAsBackup" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyRo :
  WpMethodCall replica "Clerk'ptr" "ApplyRo" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_BecomePrimary :
  WpMethodCall replica "Clerk'ptr" "BecomePrimary" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_GetState :
  WpMethodCall replica "Clerk'ptr" "GetState" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_IncreaseCommitIndex :
  WpMethodCall replica "Clerk'ptr" "IncreaseCommitIndex" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_SetState :
  WpMethodCall replica "Clerk'ptr" "SetState" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_Apply :
  WpMethodCall replica "Server'ptr" "Apply" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_ApplyAsBackup :
  WpMethodCall replica "Server'ptr" "ApplyAsBackup" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_ApplyRoWaitForCommit :
  WpMethodCall replica "Server'ptr" "ApplyRoWaitForCommit" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_BecomePrimary :
  WpMethodCall replica "Server'ptr" "BecomePrimary" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_GetState :
  WpMethodCall replica "Server'ptr" "GetState" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_IncreaseCommitIndex :
  WpMethodCall replica "Server'ptr" "IncreaseCommitIndex" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_Serve :
  WpMethodCall replica "Server'ptr" "Serve" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_SetState :
  WpMethodCall replica "Server'ptr" "SetState" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_isEpochStale :
  WpMethodCall replica "Server'ptr" "isEpochStale" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_leaseRenewalThread :
  WpMethodCall replica "Server'ptr" "leaseRenewalThread" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Server'ptr_sendIncreaseCommitThread :
  WpMethodCall replica "Server'ptr" "sendIncreaseCommitThread" _ (is_pkg_defined replica) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End replica.
