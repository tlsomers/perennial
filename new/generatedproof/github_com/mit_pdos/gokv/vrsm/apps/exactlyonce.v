(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.grove_prelude.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.mit_pdos.gokv.grove_ffi.
Require Export New.generatedproof.github_com.mit_pdos.gokv.map_marshal.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.clerk.
Require Export New.generatedproof.github_com.mit_pdos.gokv.vrsm.storage.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mit_pdos.gokv.vrsm.apps.exactlyonce.
Module exactlyonce.
Axiom falso : False.
Module eStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  lastSeq' : loc;
  lastReply' : loc;
  nextCID' : w64;
  sm' : loc;
  esmNextIndex' : w64;
}.
End def.
End eStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_eStateMachine `{ffi_syntax}: Settable _ :=
  settable! eStateMachine.mk < eStateMachine.lastSeq'; eStateMachine.lastReply'; eStateMachine.nextCID'; eStateMachine.sm'; eStateMachine.esmNextIndex' >.
Global Instance into_val_eStateMachine `{ffi_syntax} : IntoVal eStateMachine.t.
Admitted.

Global Instance into_val_typed_eStateMachine `{ffi_syntax} : IntoValTyped eStateMachine.t exactlyonce.eStateMachine :=
{|
  default_val := eStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_eStateMachine_lastSeq `{ffi_syntax} : IntoValStructField "lastSeq" exactlyonce.eStateMachine eStateMachine.lastSeq'.
Admitted.

Global Instance into_val_struct_field_eStateMachine_lastReply `{ffi_syntax} : IntoValStructField "lastReply" exactlyonce.eStateMachine eStateMachine.lastReply'.
Admitted.

Global Instance into_val_struct_field_eStateMachine_nextCID `{ffi_syntax} : IntoValStructField "nextCID" exactlyonce.eStateMachine eStateMachine.nextCID'.
Admitted.

Global Instance into_val_struct_field_eStateMachine_sm `{ffi_syntax} : IntoValStructField "sm" exactlyonce.eStateMachine eStateMachine.sm'.
Admitted.

Global Instance into_val_struct_field_eStateMachine_esmNextIndex `{ffi_syntax} : IntoValStructField "esmNextIndex" exactlyonce.eStateMachine eStateMachine.esmNextIndex'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_eStateMachine `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} lastSeq' lastReply' nextCID' sm' esmNextIndex':
  PureWp True
    (struct.make #exactlyonce.eStateMachine (alist_val [
      "lastSeq" ::= #lastSeq';
      "lastReply" ::= #lastReply';
      "nextCID" ::= #nextCID';
      "sm" ::= #sm';
      "esmNextIndex" ::= #esmNextIndex'
    ]))%struct
    #(eStateMachine.mk lastSeq' lastReply' nextCID' sm' esmNextIndex').
Admitted.


Global Instance eStateMachine_struct_fields_split dq l (v : eStateMachine.t) :
  StructFieldsSplit dq l v (
    "HlastSeq" ∷ l ↦s[exactlyonce.eStateMachine :: "lastSeq"]{dq} v.(eStateMachine.lastSeq') ∗
    "HlastReply" ∷ l ↦s[exactlyonce.eStateMachine :: "lastReply"]{dq} v.(eStateMachine.lastReply') ∗
    "HnextCID" ∷ l ↦s[exactlyonce.eStateMachine :: "nextCID"]{dq} v.(eStateMachine.nextCID') ∗
    "Hsm" ∷ l ↦s[exactlyonce.eStateMachine :: "sm"]{dq} v.(eStateMachine.sm') ∗
    "HesmNextIndex" ∷ l ↦s[exactlyonce.eStateMachine :: "esmNextIndex"]{dq} v.(eStateMachine.esmNextIndex')
  ).
Admitted.

End instances.
Module Clerk.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ck' : loc;
  cid' : w64;
  seq' : w64;
}.
End def.
End Clerk.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Clerk `{ffi_syntax}: Settable _ :=
  settable! Clerk.mk < Clerk.ck'; Clerk.cid'; Clerk.seq' >.
Global Instance into_val_Clerk `{ffi_syntax} : IntoVal Clerk.t.
Admitted.

Global Instance into_val_typed_Clerk `{ffi_syntax} : IntoValTyped Clerk.t exactlyonce.Clerk :=
{|
  default_val := Clerk.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Clerk_ck `{ffi_syntax} : IntoValStructField "ck" exactlyonce.Clerk Clerk.ck'.
Admitted.

Global Instance into_val_struct_field_Clerk_cid `{ffi_syntax} : IntoValStructField "cid" exactlyonce.Clerk Clerk.cid'.
Admitted.

Global Instance into_val_struct_field_Clerk_seq `{ffi_syntax} : IntoValStructField "seq" exactlyonce.Clerk Clerk.seq'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Clerk `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} ck' cid' seq':
  PureWp True
    (struct.make #exactlyonce.Clerk (alist_val [
      "ck" ::= #ck';
      "cid" ::= #cid';
      "seq" ::= #seq'
    ]))%struct
    #(Clerk.mk ck' cid' seq').
Admitted.


Global Instance Clerk_struct_fields_split dq l (v : Clerk.t) :
  StructFieldsSplit dq l v (
    "Hck" ∷ l ↦s[exactlyonce.Clerk :: "ck"]{dq} v.(Clerk.ck') ∗
    "Hcid" ∷ l ↦s[exactlyonce.Clerk :: "cid"]{dq} v.(Clerk.cid') ∗
    "Hseq" ∷ l ↦s[exactlyonce.Clerk :: "seq"]{dq} v.(Clerk.seq')
  ).
Admitted.

End instances.
Module VersionedStateMachine.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ApplyVolatile' : func.t;
  ApplyReadonly' : func.t;
  SetState' : func.t;
  GetState' : func.t;
}.
End def.
End VersionedStateMachine.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_VersionedStateMachine `{ffi_syntax}: Settable _ :=
  settable! VersionedStateMachine.mk < VersionedStateMachine.ApplyVolatile'; VersionedStateMachine.ApplyReadonly'; VersionedStateMachine.SetState'; VersionedStateMachine.GetState' >.
Global Instance into_val_VersionedStateMachine `{ffi_syntax} : IntoVal VersionedStateMachine.t.
Admitted.

Global Instance into_val_typed_VersionedStateMachine `{ffi_syntax} : IntoValTyped VersionedStateMachine.t exactlyonce.VersionedStateMachine :=
{|
  default_val := VersionedStateMachine.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_VersionedStateMachine_ApplyVolatile `{ffi_syntax} : IntoValStructField "ApplyVolatile" exactlyonce.VersionedStateMachine VersionedStateMachine.ApplyVolatile'.
Admitted.

Global Instance into_val_struct_field_VersionedStateMachine_ApplyReadonly `{ffi_syntax} : IntoValStructField "ApplyReadonly" exactlyonce.VersionedStateMachine VersionedStateMachine.ApplyReadonly'.
Admitted.

Global Instance into_val_struct_field_VersionedStateMachine_SetState `{ffi_syntax} : IntoValStructField "SetState" exactlyonce.VersionedStateMachine VersionedStateMachine.SetState'.
Admitted.

Global Instance into_val_struct_field_VersionedStateMachine_GetState `{ffi_syntax} : IntoValStructField "GetState" exactlyonce.VersionedStateMachine VersionedStateMachine.GetState'.
Admitted.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_VersionedStateMachine `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} ApplyVolatile' ApplyReadonly' SetState' GetState':
  PureWp True
    (struct.make #exactlyonce.VersionedStateMachine (alist_val [
      "ApplyVolatile" ::= #ApplyVolatile';
      "ApplyReadonly" ::= #ApplyReadonly';
      "SetState" ::= #SetState';
      "GetState" ::= #GetState'
    ]))%struct
    #(VersionedStateMachine.mk ApplyVolatile' ApplyReadonly' SetState' GetState').
Admitted.


Global Instance VersionedStateMachine_struct_fields_split dq l (v : VersionedStateMachine.t) :
  StructFieldsSplit dq l v (
    "HApplyVolatile" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "ApplyVolatile"]{dq} v.(VersionedStateMachine.ApplyVolatile') ∗
    "HApplyReadonly" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "ApplyReadonly"]{dq} v.(VersionedStateMachine.ApplyReadonly') ∗
    "HSetState" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "SetState"]{dq} v.(VersionedStateMachine.SetState') ∗
    "HGetState" ∷ l ↦s[exactlyonce.VersionedStateMachine :: "GetState"]{dq} v.(VersionedStateMachine.GetState')
  ).
Admitted.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined exactlyonce :=
{|
  is_pkg_defined := is_global_definitions exactlyonce var_addrs;
|}.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_MakeExactlyOnceStateMachine :
  WpFuncCall exactlyonce "MakeExactlyOnceStateMachine" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MakeClerk :
  WpFuncCall exactlyonce "MakeClerk" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_applyReadonly :
  WpMethodCall exactlyonce "eStateMachine'ptr" "applyReadonly" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_applyVolatile :
  WpMethodCall exactlyonce "eStateMachine'ptr" "applyVolatile" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_getState :
  WpMethodCall exactlyonce "eStateMachine'ptr" "getState" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_eStateMachine'ptr_setState :
  WpMethodCall exactlyonce "eStateMachine'ptr" "setState" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyExactlyOnce :
  WpMethodCall exactlyonce "Clerk'ptr" "ApplyExactlyOnce" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Clerk'ptr_ApplyReadonly :
  WpMethodCall exactlyonce "Clerk'ptr" "ApplyReadonly" _ (is_pkg_defined exactlyonce) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End exactlyonce.
