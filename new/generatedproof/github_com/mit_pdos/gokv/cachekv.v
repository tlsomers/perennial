(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import github_com.mit_pdos.gokv.cachekv.
From New.golang Require Import theory.

Axiom falso : False.

Module cacheValue.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  v' : go_string;
  l' : w64;
}.
End def.
End cacheValue.


Global Instance settable_cacheValue `{ffi_syntax}: Settable _ :=
  settable! cacheValue.mk < cacheValue.v'; cacheValue.l' >.
Global Instance into_val_cacheValue `{ffi_syntax} : IntoVal cacheValue.t.
Admitted.

Global Instance into_val_typed_cacheValue `{ffi_syntax} : IntoValTyped cacheValue.t cachekv.cacheValue :=
{|
  default_val := cacheValue.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_cacheValue_v `{ffi_syntax} : IntoValStructField "v" cachekv.cacheValue cacheValue.v'.
Admitted.

Global Instance into_val_struct_field_cacheValue_l `{ffi_syntax} : IntoValStructField "l" cachekv.cacheValue cacheValue.l'.
Admitted.

Instance wp_struct_make_cacheValue `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} v' l':
  PureWp True
    (struct.make cachekv.cacheValue (alist_val [
      "v" ::= #v';
      "l" ::= #l'
    ]))%V
    #(cacheValue.mk v' l').
Admitted.

Module CacheKv.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  kv' : interface.t;
  mu' : loc;
  cache' : loc;
}.
End def.
End CacheKv.


Global Instance settable_CacheKv `{ffi_syntax}: Settable _ :=
  settable! CacheKv.mk < CacheKv.kv'; CacheKv.mu'; CacheKv.cache' >.
Global Instance into_val_CacheKv `{ffi_syntax} : IntoVal CacheKv.t.
Admitted.

Global Instance into_val_typed_CacheKv `{ffi_syntax} : IntoValTyped CacheKv.t cachekv.CacheKv :=
{|
  default_val := CacheKv.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_CacheKv_kv `{ffi_syntax} : IntoValStructField "kv" cachekv.CacheKv CacheKv.kv'.
Admitted.

Global Instance into_val_struct_field_CacheKv_mu `{ffi_syntax} : IntoValStructField "mu" cachekv.CacheKv CacheKv.mu'.
Admitted.

Global Instance into_val_struct_field_CacheKv_cache `{ffi_syntax} : IntoValStructField "cache" cachekv.CacheKv CacheKv.cache'.
Admitted.

Instance wp_struct_make_CacheKv `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} kv' mu' cache':
  PureWp True
    (struct.make cachekv.CacheKv (alist_val [
      "kv" ::= #kv';
      "mu" ::= #mu';
      "cache" ::= #cache'
    ]))%V
    #(CacheKv.mk kv' mu' cache').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.github_com.mit_pdos.gokv.cachekv.
Require Export New.proof.grove_prelude.
Module cachekv.
Section defs.
Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{!heapGS Σ}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Definition is_defined := is_global_definitions cachekv.pkg_name' var_addrs cachekv.functions' cachekv.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
True.

Global Instance wp_func_call_DecodeValue : 
  WpFuncCall cachekv.pkg_name' "DecodeValue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_EncodeValue : 
  WpFuncCall cachekv.pkg_name' "EncodeValue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_max : 
  WpFuncCall cachekv.pkg_name' "max" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Make : 
  WpFuncCall cachekv.pkg_name' "Make" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_CacheKv'ptr_Get : 
  WpMethodCall cachekv.pkg_name' "CacheKv'ptr" "Get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_CacheKv'ptr_GetAndCache : 
  WpMethodCall cachekv.pkg_name' "CacheKv'ptr" "GetAndCache" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_CacheKv'ptr_Put : 
  WpMethodCall cachekv.pkg_name' "CacheKv'ptr" "Put" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End cachekv.
