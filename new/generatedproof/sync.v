(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import sync.
From New.golang Require Import theory.

Axiom falso : False.

Module noCopy.
Section def.
Context `{ffi_syntax}.
Record t := mk {
}.
End def.
End noCopy.

Global Instance into_val_noCopy `{ffi_syntax} : IntoVal noCopy.t.
Admitted.

Global Instance into_val_typed_noCopy `{ffi_syntax} : IntoValTyped noCopy.t sync.noCopy :=
{|
  default_val := noCopy.mk;
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Instance wp_struct_make_noCopy `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}:
  PureWp True
    (struct.make sync.noCopy (alist_val [
    ]))%V
    #(noCopy.mk).
Admitted.

Module notifyList.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  wait' : w32;
  notify' : w32;
  lock' : loc;
  head' : loc;
  tail' : loc;
}.
End def.
End notifyList.


Global Instance settable_notifyList `{ffi_syntax}: Settable _ :=
  settable! notifyList.mk < notifyList.wait'; notifyList.notify'; notifyList.lock'; notifyList.head'; notifyList.tail' >.
Global Instance into_val_notifyList `{ffi_syntax} : IntoVal notifyList.t.
Admitted.

Global Instance into_val_typed_notifyList `{ffi_syntax} : IntoValTyped notifyList.t sync.notifyList :=
{|
  default_val := notifyList.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_notifyList_wait `{ffi_syntax} : IntoValStructField "wait" sync.notifyList notifyList.wait'.
Admitted.

Global Instance into_val_struct_field_notifyList_notify `{ffi_syntax} : IntoValStructField "notify" sync.notifyList notifyList.notify'.
Admitted.

Global Instance into_val_struct_field_notifyList_lock `{ffi_syntax} : IntoValStructField "lock" sync.notifyList notifyList.lock'.
Admitted.

Global Instance into_val_struct_field_notifyList_head `{ffi_syntax} : IntoValStructField "head" sync.notifyList notifyList.head'.
Admitted.

Global Instance into_val_struct_field_notifyList_tail `{ffi_syntax} : IntoValStructField "tail" sync.notifyList notifyList.tail'.
Admitted.

Instance wp_struct_make_notifyList `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} wait' notify' lock' head' tail':
  PureWp True
    (struct.make sync.notifyList (alist_val [
      "wait" ::= #wait';
      "notify" ::= #notify';
      "lock" ::= #lock';
      "head" ::= #head';
      "tail" ::= #tail'
    ]))%V
    #(notifyList.mk wait' notify' lock' head' tail').
Admitted.

Module Cond.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  noCopy' : noCopy.t;
  L' : interface.t;
  notify' : notifyList.t;
  checker' : loc;
}.
End def.
End Cond.


Global Instance settable_Cond `{ffi_syntax}: Settable _ :=
  settable! Cond.mk < Cond.noCopy'; Cond.L'; Cond.notify'; Cond.checker' >.
Global Instance into_val_Cond `{ffi_syntax} : IntoVal Cond.t.
Admitted.

Global Instance into_val_typed_Cond `{ffi_syntax} : IntoValTyped Cond.t sync.Cond :=
{|
  default_val := Cond.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Cond_noCopy `{ffi_syntax} : IntoValStructField "noCopy" sync.Cond Cond.noCopy'.
Admitted.

Global Instance into_val_struct_field_Cond_L `{ffi_syntax} : IntoValStructField "L" sync.Cond Cond.L'.
Admitted.

Global Instance into_val_struct_field_Cond_notify `{ffi_syntax} : IntoValStructField "notify" sync.Cond Cond.notify'.
Admitted.

Global Instance into_val_struct_field_Cond_checker `{ffi_syntax} : IntoValStructField "checker" sync.Cond Cond.checker'.
Admitted.

Instance wp_struct_make_Cond `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} noCopy' L' notify' checker':
  PureWp True
    (struct.make sync.Cond (alist_val [
      "noCopy" ::= #noCopy';
      "L" ::= #L';
      "notify" ::= #notify';
      "checker" ::= #checker'
    ]))%V
    #(Cond.mk noCopy' L' notify' checker').
Admitted.

Module Mutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  state' : w32;
  sema' : w32;
}.
End def.
End Mutex.


Global Instance settable_Mutex `{ffi_syntax}: Settable _ :=
  settable! Mutex.mk < Mutex.state'; Mutex.sema' >.
Global Instance into_val_Mutex `{ffi_syntax} : IntoVal Mutex.t.
Admitted.

Global Instance into_val_typed_Mutex `{ffi_syntax} : IntoValTyped Mutex.t sync.Mutex :=
{|
  default_val := Mutex.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Mutex_state `{ffi_syntax} : IntoValStructField "state" sync.Mutex Mutex.state'.
Admitted.

Global Instance into_val_struct_field_Mutex_sema `{ffi_syntax} : IntoValStructField "sema" sync.Mutex Mutex.sema'.
Admitted.

Instance wp_struct_make_Mutex `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} state' sema':
  PureWp True
    (struct.make sync.Mutex (alist_val [
      "state" ::= #state';
      "sema" ::= #sema'
    ]))%V
    #(Mutex.mk state' sema').
Admitted.

Module Map.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  mu' : Mutex.t;
  read' : atomic.Pointer.t;
  dirty' : loc;
  misses' : w64;
}.
End def.
End Map.


Global Instance settable_Map `{ffi_syntax}: Settable _ :=
  settable! Map.mk < Map.mu'; Map.read'; Map.dirty'; Map.misses' >.
Global Instance into_val_Map `{ffi_syntax} : IntoVal Map.t.
Admitted.

Global Instance into_val_typed_Map `{ffi_syntax} : IntoValTyped Map.t sync.Map :=
{|
  default_val := Map.mk (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Map_mu `{ffi_syntax} : IntoValStructField "mu" sync.Map Map.mu'.
Admitted.

Global Instance into_val_struct_field_Map_read `{ffi_syntax} : IntoValStructField "read" sync.Map Map.read'.
Admitted.

Global Instance into_val_struct_field_Map_dirty `{ffi_syntax} : IntoValStructField "dirty" sync.Map Map.dirty'.
Admitted.

Global Instance into_val_struct_field_Map_misses `{ffi_syntax} : IntoValStructField "misses" sync.Map Map.misses'.
Admitted.

Instance wp_struct_make_Map `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} mu' read' dirty' misses':
  PureWp True
    (struct.make sync.Map (alist_val [
      "mu" ::= #mu';
      "read" ::= #read';
      "dirty" ::= #dirty';
      "misses" ::= #misses'
    ]))%V
    #(Map.mk mu' read' dirty' misses').
Admitted.

Module readOnly.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  m' : loc;
  amended' : bool;
}.
End def.
End readOnly.


Global Instance settable_readOnly `{ffi_syntax}: Settable _ :=
  settable! readOnly.mk < readOnly.m'; readOnly.amended' >.
Global Instance into_val_readOnly `{ffi_syntax} : IntoVal readOnly.t.
Admitted.

Global Instance into_val_typed_readOnly `{ffi_syntax} : IntoValTyped readOnly.t sync.readOnly :=
{|
  default_val := readOnly.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_readOnly_m `{ffi_syntax} : IntoValStructField "m" sync.readOnly readOnly.m'.
Admitted.

Global Instance into_val_struct_field_readOnly_amended `{ffi_syntax} : IntoValStructField "amended" sync.readOnly readOnly.amended'.
Admitted.

Instance wp_struct_make_readOnly `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} m' amended':
  PureWp True
    (struct.make sync.readOnly (alist_val [
      "m" ::= #m';
      "amended" ::= #amended'
    ]))%V
    #(readOnly.mk m' amended').
Admitted.

Module entry.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  p' : atomic.Pointer.t;
}.
End def.
End entry.


Global Instance settable_entry `{ffi_syntax}: Settable _ :=
  settable! entry.mk < entry.p' >.
Global Instance into_val_entry `{ffi_syntax} : IntoVal entry.t.
Admitted.

Global Instance into_val_typed_entry `{ffi_syntax} : IntoValTyped entry.t sync.entry :=
{|
  default_val := entry.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_entry_p `{ffi_syntax} : IntoValStructField "p" sync.entry entry.p'.
Admitted.

Instance wp_struct_make_entry `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} p':
  PureWp True
    (struct.make sync.entry (alist_val [
      "p" ::= #p'
    ]))%V
    #(entry.mk p').
Admitted.

Module Once.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  done' : atomic.Uint32.t;
  m' : Mutex.t;
}.
End def.
End Once.


Global Instance settable_Once `{ffi_syntax}: Settable _ :=
  settable! Once.mk < Once.done'; Once.m' >.
Global Instance into_val_Once `{ffi_syntax} : IntoVal Once.t.
Admitted.

Global Instance into_val_typed_Once `{ffi_syntax} : IntoValTyped Once.t sync.Once :=
{|
  default_val := Once.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Once_done `{ffi_syntax} : IntoValStructField "done" sync.Once Once.done'.
Admitted.

Global Instance into_val_struct_field_Once_m `{ffi_syntax} : IntoValStructField "m" sync.Once Once.m'.
Admitted.

Instance wp_struct_make_Once `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} done' m':
  PureWp True
    (struct.make sync.Once (alist_val [
      "done" ::= #done';
      "m" ::= #m'
    ]))%V
    #(Once.mk done' m').
Admitted.

Module Pool.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  noCopy' : noCopy.t;
  local' : loc;
  localSize' : loc;
  victim' : loc;
  victimSize' : loc;
  New' : func.t;
}.
End def.
End Pool.


Global Instance settable_Pool `{ffi_syntax}: Settable _ :=
  settable! Pool.mk < Pool.noCopy'; Pool.local'; Pool.localSize'; Pool.victim'; Pool.victimSize'; Pool.New' >.
Global Instance into_val_Pool `{ffi_syntax} : IntoVal Pool.t.
Admitted.

Global Instance into_val_typed_Pool `{ffi_syntax} : IntoValTyped Pool.t sync.Pool :=
{|
  default_val := Pool.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Pool_noCopy `{ffi_syntax} : IntoValStructField "noCopy" sync.Pool Pool.noCopy'.
Admitted.

Global Instance into_val_struct_field_Pool_local `{ffi_syntax} : IntoValStructField "local" sync.Pool Pool.local'.
Admitted.

Global Instance into_val_struct_field_Pool_localSize `{ffi_syntax} : IntoValStructField "localSize" sync.Pool Pool.localSize'.
Admitted.

Global Instance into_val_struct_field_Pool_victim `{ffi_syntax} : IntoValStructField "victim" sync.Pool Pool.victim'.
Admitted.

Global Instance into_val_struct_field_Pool_victimSize `{ffi_syntax} : IntoValStructField "victimSize" sync.Pool Pool.victimSize'.
Admitted.

Global Instance into_val_struct_field_Pool_New `{ffi_syntax} : IntoValStructField "New" sync.Pool Pool.New'.
Admitted.

Instance wp_struct_make_Pool `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} noCopy' local' localSize' victim' victimSize' New':
  PureWp True
    (struct.make sync.Pool (alist_val [
      "noCopy" ::= #noCopy';
      "local" ::= #local';
      "localSize" ::= #localSize';
      "victim" ::= #victim';
      "victimSize" ::= #victimSize';
      "New" ::= #New'
    ]))%V
    #(Pool.mk noCopy' local' localSize' victim' victimSize' New').
Admitted.

Module poolChain.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  head' : loc;
  tail' : atomic.Pointer.t;
}.
End def.
End poolChain.


Global Instance settable_poolChain `{ffi_syntax}: Settable _ :=
  settable! poolChain.mk < poolChain.head'; poolChain.tail' >.
Global Instance into_val_poolChain `{ffi_syntax} : IntoVal poolChain.t.
Admitted.

Global Instance into_val_typed_poolChain `{ffi_syntax} : IntoValTyped poolChain.t sync.poolChain :=
{|
  default_val := poolChain.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_poolChain_head `{ffi_syntax} : IntoValStructField "head" sync.poolChain poolChain.head'.
Admitted.

Global Instance into_val_struct_field_poolChain_tail `{ffi_syntax} : IntoValStructField "tail" sync.poolChain poolChain.tail'.
Admitted.

Instance wp_struct_make_poolChain `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} head' tail':
  PureWp True
    (struct.make sync.poolChain (alist_val [
      "head" ::= #head';
      "tail" ::= #tail'
    ]))%V
    #(poolChain.mk head' tail').
Admitted.

Module poolLocalInternal.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  private' : interface.t;
  shared' : poolChain.t;
}.
End def.
End poolLocalInternal.


Global Instance settable_poolLocalInternal `{ffi_syntax}: Settable _ :=
  settable! poolLocalInternal.mk < poolLocalInternal.private'; poolLocalInternal.shared' >.
Global Instance into_val_poolLocalInternal `{ffi_syntax} : IntoVal poolLocalInternal.t.
Admitted.

Global Instance into_val_typed_poolLocalInternal `{ffi_syntax} : IntoValTyped poolLocalInternal.t sync.poolLocalInternal :=
{|
  default_val := poolLocalInternal.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_poolLocalInternal_private `{ffi_syntax} : IntoValStructField "private" sync.poolLocalInternal poolLocalInternal.private'.
Admitted.

Global Instance into_val_struct_field_poolLocalInternal_shared `{ffi_syntax} : IntoValStructField "shared" sync.poolLocalInternal poolLocalInternal.shared'.
Admitted.

Instance wp_struct_make_poolLocalInternal `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} private' shared':
  PureWp True
    (struct.make sync.poolLocalInternal (alist_val [
      "private" ::= #private';
      "shared" ::= #shared'
    ]))%V
    #(poolLocalInternal.mk private' shared').
Admitted.

Module poolLocal.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  poolLocalInternal' : poolLocalInternal.t;
  pad' : (vec w8 96);
}.
End def.
End poolLocal.


Global Instance settable_poolLocal `{ffi_syntax}: Settable _ :=
  settable! poolLocal.mk < poolLocal.poolLocalInternal'; poolLocal.pad' >.
Global Instance into_val_poolLocal `{ffi_syntax} : IntoVal poolLocal.t.
Admitted.

Global Instance into_val_typed_poolLocal `{ffi_syntax} : IntoValTyped poolLocal.t sync.poolLocal :=
{|
  default_val := poolLocal.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_poolLocal_poolLocalInternal `{ffi_syntax} : IntoValStructField "poolLocalInternal" sync.poolLocal poolLocal.poolLocalInternal'.
Admitted.

Global Instance into_val_struct_field_poolLocal_pad `{ffi_syntax} : IntoValStructField "pad" sync.poolLocal poolLocal.pad'.
Admitted.

Instance wp_struct_make_poolLocal `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} poolLocalInternal' pad':
  PureWp True
    (struct.make sync.poolLocal (alist_val [
      "poolLocalInternal" ::= #poolLocalInternal';
      "pad" ::= #pad'
    ]))%V
    #(poolLocal.mk poolLocalInternal' pad').
Admitted.

Module poolDequeue.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  headTail' : atomic.Uint64.t;
  vals' : slice.t;
}.
End def.
End poolDequeue.


Global Instance settable_poolDequeue `{ffi_syntax}: Settable _ :=
  settable! poolDequeue.mk < poolDequeue.headTail'; poolDequeue.vals' >.
Global Instance into_val_poolDequeue `{ffi_syntax} : IntoVal poolDequeue.t.
Admitted.

Global Instance into_val_typed_poolDequeue `{ffi_syntax} : IntoValTyped poolDequeue.t sync.poolDequeue :=
{|
  default_val := poolDequeue.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_poolDequeue_headTail `{ffi_syntax} : IntoValStructField "headTail" sync.poolDequeue poolDequeue.headTail'.
Admitted.

Global Instance into_val_struct_field_poolDequeue_vals `{ffi_syntax} : IntoValStructField "vals" sync.poolDequeue poolDequeue.vals'.
Admitted.

Instance wp_struct_make_poolDequeue `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} headTail' vals':
  PureWp True
    (struct.make sync.poolDequeue (alist_val [
      "headTail" ::= #headTail';
      "vals" ::= #vals'
    ]))%V
    #(poolDequeue.mk headTail' vals').
Admitted.

Module eface.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  typ' : loc;
  val' : loc;
}.
End def.
End eface.


Global Instance settable_eface `{ffi_syntax}: Settable _ :=
  settable! eface.mk < eface.typ'; eface.val' >.
Global Instance into_val_eface `{ffi_syntax} : IntoVal eface.t.
Admitted.

Global Instance into_val_typed_eface `{ffi_syntax} : IntoValTyped eface.t sync.eface :=
{|
  default_val := eface.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_eface_typ `{ffi_syntax} : IntoValStructField "typ" sync.eface eface.typ'.
Admitted.

Global Instance into_val_struct_field_eface_val `{ffi_syntax} : IntoValStructField "val" sync.eface eface.val'.
Admitted.

Instance wp_struct_make_eface `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} typ' val':
  PureWp True
    (struct.make sync.eface (alist_val [
      "typ" ::= #typ';
      "val" ::= #val'
    ]))%V
    #(eface.mk typ' val').
Admitted.

Module poolChainElt.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  poolDequeue' : poolDequeue.t;
  next' : atomic.Pointer.t;
  prev' : atomic.Pointer.t;
}.
End def.
End poolChainElt.


Global Instance settable_poolChainElt `{ffi_syntax}: Settable _ :=
  settable! poolChainElt.mk < poolChainElt.poolDequeue'; poolChainElt.next'; poolChainElt.prev' >.
Global Instance into_val_poolChainElt `{ffi_syntax} : IntoVal poolChainElt.t.
Admitted.

Global Instance into_val_typed_poolChainElt `{ffi_syntax} : IntoValTyped poolChainElt.t sync.poolChainElt :=
{|
  default_val := poolChainElt.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_poolChainElt_poolDequeue `{ffi_syntax} : IntoValStructField "poolDequeue" sync.poolChainElt poolChainElt.poolDequeue'.
Admitted.

Global Instance into_val_struct_field_poolChainElt_next `{ffi_syntax} : IntoValStructField "next" sync.poolChainElt poolChainElt.next'.
Admitted.

Global Instance into_val_struct_field_poolChainElt_prev `{ffi_syntax} : IntoValStructField "prev" sync.poolChainElt poolChainElt.prev'.
Admitted.

Instance wp_struct_make_poolChainElt `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} poolDequeue' next' prev':
  PureWp True
    (struct.make sync.poolChainElt (alist_val [
      "poolDequeue" ::= #poolDequeue';
      "next" ::= #next';
      "prev" ::= #prev'
    ]))%V
    #(poolChainElt.mk poolDequeue' next' prev').
Admitted.

Module RWMutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  w' : Mutex.t;
  writerSem' : w32;
  readerSem' : w32;
  readerCount' : atomic.Int32.t;
  readerWait' : atomic.Int32.t;
}.
End def.
End RWMutex.


Global Instance settable_RWMutex `{ffi_syntax}: Settable _ :=
  settable! RWMutex.mk < RWMutex.w'; RWMutex.writerSem'; RWMutex.readerSem'; RWMutex.readerCount'; RWMutex.readerWait' >.
Global Instance into_val_RWMutex `{ffi_syntax} : IntoVal RWMutex.t.
Admitted.

Global Instance into_val_typed_RWMutex `{ffi_syntax} : IntoValTyped RWMutex.t sync.RWMutex :=
{|
  default_val := RWMutex.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_RWMutex_w `{ffi_syntax} : IntoValStructField "w" sync.RWMutex RWMutex.w'.
Admitted.

Global Instance into_val_struct_field_RWMutex_writerSem `{ffi_syntax} : IntoValStructField "writerSem" sync.RWMutex RWMutex.writerSem'.
Admitted.

Global Instance into_val_struct_field_RWMutex_readerSem `{ffi_syntax} : IntoValStructField "readerSem" sync.RWMutex RWMutex.readerSem'.
Admitted.

Global Instance into_val_struct_field_RWMutex_readerCount `{ffi_syntax} : IntoValStructField "readerCount" sync.RWMutex RWMutex.readerCount'.
Admitted.

Global Instance into_val_struct_field_RWMutex_readerWait `{ffi_syntax} : IntoValStructField "readerWait" sync.RWMutex RWMutex.readerWait'.
Admitted.

Instance wp_struct_make_RWMutex `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} w' writerSem' readerSem' readerCount' readerWait':
  PureWp True
    (struct.make sync.RWMutex (alist_val [
      "w" ::= #w';
      "writerSem" ::= #writerSem';
      "readerSem" ::= #readerSem';
      "readerCount" ::= #readerCount';
      "readerWait" ::= #readerWait'
    ]))%V
    #(RWMutex.mk w' writerSem' readerSem' readerCount' readerWait').
Admitted.

Module WaitGroup.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  noCopy' : noCopy.t;
  state' : atomic.Uint64.t;
  sema' : w32;
}.
End def.
End WaitGroup.


Global Instance settable_WaitGroup `{ffi_syntax}: Settable _ :=
  settable! WaitGroup.mk < WaitGroup.noCopy'; WaitGroup.state'; WaitGroup.sema' >.
Global Instance into_val_WaitGroup `{ffi_syntax} : IntoVal WaitGroup.t.
Admitted.

Global Instance into_val_typed_WaitGroup `{ffi_syntax} : IntoValTyped WaitGroup.t sync.WaitGroup :=
{|
  default_val := WaitGroup.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_WaitGroup_noCopy `{ffi_syntax} : IntoValStructField "noCopy" sync.WaitGroup WaitGroup.noCopy'.
Admitted.

Global Instance into_val_struct_field_WaitGroup_state `{ffi_syntax} : IntoValStructField "state" sync.WaitGroup WaitGroup.state'.
Admitted.

Global Instance into_val_struct_field_WaitGroup_sema `{ffi_syntax} : IntoValStructField "sema" sync.WaitGroup WaitGroup.sema'.
Admitted.

Instance wp_struct_make_WaitGroup `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} noCopy' state' sema':
  PureWp True
    (struct.make sync.WaitGroup (alist_val [
      "noCopy" ::= #noCopy';
      "state" ::= #state';
      "sema" ::= #sema'
    ]))%V
    #(WaitGroup.mk noCopy' state' sema').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.sync.
Require Export New.proof.proof_prelude.
Module sync.
Section defs.
Class GlobalAddrs :=
{
  expunged : loc;
  poolRaceHash : loc;
  allPoolsMu : loc;
  allPools : loc;
  oldPools : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("expunged"%go, expunged);
    ("poolRaceHash"%go, poolRaceHash);
    ("allPoolsMu"%go, allPoolsMu);
    ("allPools"%go, allPools);
    ("oldPools"%go, oldPools)
  ].

Definition is_defined := is_global_definitions sync.pkg_name' var_addrs sync.functions' sync.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
  "Hexpunged" ∷ expunged ↦ (default_val loc) ∗
  "HpoolRaceHash" ∷ poolRaceHash ↦ (default_val (vec w64 128)) ∗
  "HallPoolsMu" ∷ allPoolsMu ↦ (default_val Mutex.t) ∗
  "HallPools" ∷ allPools ↦ (default_val slice.t) ∗
  "HoldPools" ∷ oldPools ↦ (default_val slice.t).

Global Instance wp_globals_get_expunged : 
  WpGlobalsGet sync.pkg_name' "expunged" expunged is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_poolRaceHash : 
  WpGlobalsGet sync.pkg_name' "poolRaceHash" poolRaceHash is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_allPoolsMu : 
  WpGlobalsGet sync.pkg_name' "allPoolsMu" allPoolsMu is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_allPools : 
  WpGlobalsGet sync.pkg_name' "allPools" allPools is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_oldPools : 
  WpGlobalsGet sync.pkg_name' "oldPools" oldPools is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_NewCond : 
  WpFuncCall sync.pkg_name' "NewCond" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_newEntry : 
  WpFuncCall sync.pkg_name' "newEntry" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_throw : 
  WpFuncCall sync.pkg_name' "throw" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_fatal : 
  WpFuncCall sync.pkg_name' "fatal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_OnceFunc : 
  WpFuncCall sync.pkg_name' "OnceFunc" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_OnceValue : 
  WpFuncCall sync.pkg_name' "OnceValue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_OnceValues : 
  WpFuncCall sync.pkg_name' "OnceValues" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_randn : 
  WpFuncCall sync.pkg_name' "runtime_randn" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_poolRaceAddr : 
  WpFuncCall sync.pkg_name' "poolRaceAddr" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_poolCleanup : 
  WpFuncCall sync.pkg_name' "poolCleanup" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_indexLocal : 
  WpFuncCall sync.pkg_name' "indexLocal" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_registerPoolCleanup : 
  WpFuncCall sync.pkg_name' "runtime_registerPoolCleanup" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_procPin : 
  WpFuncCall sync.pkg_name' "runtime_procPin" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_procUnpin : 
  WpFuncCall sync.pkg_name' "runtime_procUnpin" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_LoadAcquintptr : 
  WpFuncCall sync.pkg_name' "runtime_LoadAcquintptr" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_StoreReluintptr : 
  WpFuncCall sync.pkg_name' "runtime_StoreReluintptr" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_Semacquire : 
  WpFuncCall sync.pkg_name' "runtime_Semacquire" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_SemacquireMutex : 
  WpFuncCall sync.pkg_name' "runtime_SemacquireMutex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_SemacquireRWMutexR : 
  WpFuncCall sync.pkg_name' "runtime_SemacquireRWMutexR" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_SemacquireRWMutex : 
  WpFuncCall sync.pkg_name' "runtime_SemacquireRWMutex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_Semrelease : 
  WpFuncCall sync.pkg_name' "runtime_Semrelease" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_notifyListAdd : 
  WpFuncCall sync.pkg_name' "runtime_notifyListAdd" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_notifyListWait : 
  WpFuncCall sync.pkg_name' "runtime_notifyListWait" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_notifyListNotifyAll : 
  WpFuncCall sync.pkg_name' "runtime_notifyListNotifyAll" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_notifyListNotifyOne : 
  WpFuncCall sync.pkg_name' "runtime_notifyListNotifyOne" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_notifyListCheck : 
  WpFuncCall sync.pkg_name' "runtime_notifyListCheck" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_canSpin : 
  WpFuncCall sync.pkg_name' "runtime_canSpin" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_doSpin : 
  WpFuncCall sync.pkg_name' "runtime_doSpin" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runtime_nanotime : 
  WpFuncCall sync.pkg_name' "runtime_nanotime" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_syscall_hasWaitingReaders : 
  WpFuncCall sync.pkg_name' "syscall_hasWaitingReaders" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Cond'ptr_Broadcast : 
  WpMethodCall sync.pkg_name' "Cond'ptr" "Broadcast" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Cond'ptr_Signal : 
  WpMethodCall sync.pkg_name' "Cond'ptr" "Signal" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Cond'ptr_Wait : 
  WpMethodCall sync.pkg_name' "Cond'ptr" "Wait" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_copyChecker'ptr_check : 
  WpMethodCall sync.pkg_name' "copyChecker'ptr" "check" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_noCopy'ptr_Lock : 
  WpMethodCall sync.pkg_name' "noCopy'ptr" "Lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_noCopy'ptr_Unlock : 
  WpMethodCall sync.pkg_name' "noCopy'ptr" "Unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_Clear : 
  WpMethodCall sync.pkg_name' "Map'ptr" "Clear" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_CompareAndDelete : 
  WpMethodCall sync.pkg_name' "Map'ptr" "CompareAndDelete" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_CompareAndSwap : 
  WpMethodCall sync.pkg_name' "Map'ptr" "CompareAndSwap" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_Delete : 
  WpMethodCall sync.pkg_name' "Map'ptr" "Delete" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_Load : 
  WpMethodCall sync.pkg_name' "Map'ptr" "Load" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_LoadAndDelete : 
  WpMethodCall sync.pkg_name' "Map'ptr" "LoadAndDelete" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_LoadOrStore : 
  WpMethodCall sync.pkg_name' "Map'ptr" "LoadOrStore" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_Range : 
  WpMethodCall sync.pkg_name' "Map'ptr" "Range" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_Store : 
  WpMethodCall sync.pkg_name' "Map'ptr" "Store" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_Swap : 
  WpMethodCall sync.pkg_name' "Map'ptr" "Swap" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_dirtyLocked : 
  WpMethodCall sync.pkg_name' "Map'ptr" "dirtyLocked" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_loadReadOnly : 
  WpMethodCall sync.pkg_name' "Map'ptr" "loadReadOnly" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Map'ptr_missLocked : 
  WpMethodCall sync.pkg_name' "Map'ptr" "missLocked" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_delete : 
  WpMethodCall sync.pkg_name' "entry'ptr" "delete" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_load : 
  WpMethodCall sync.pkg_name' "entry'ptr" "load" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_swapLocked : 
  WpMethodCall sync.pkg_name' "entry'ptr" "swapLocked" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_tryCompareAndSwap : 
  WpMethodCall sync.pkg_name' "entry'ptr" "tryCompareAndSwap" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_tryExpungeLocked : 
  WpMethodCall sync.pkg_name' "entry'ptr" "tryExpungeLocked" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_tryLoadOrStore : 
  WpMethodCall sync.pkg_name' "entry'ptr" "tryLoadOrStore" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_trySwap : 
  WpMethodCall sync.pkg_name' "entry'ptr" "trySwap" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_entry'ptr_unexpungeLocked : 
  WpMethodCall sync.pkg_name' "entry'ptr" "unexpungeLocked" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Lock : 
  WpMethodCall sync.pkg_name' "Mutex'ptr" "Lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_TryLock : 
  WpMethodCall sync.pkg_name' "Mutex'ptr" "TryLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Unlock : 
  WpMethodCall sync.pkg_name' "Mutex'ptr" "Unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_lockSlow : 
  WpMethodCall sync.pkg_name' "Mutex'ptr" "lockSlow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_unlockSlow : 
  WpMethodCall sync.pkg_name' "Mutex'ptr" "unlockSlow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Once'ptr_Do : 
  WpMethodCall sync.pkg_name' "Once'ptr" "Do" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Once'ptr_doSlow : 
  WpMethodCall sync.pkg_name' "Once'ptr" "doSlow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Pool'ptr_Get : 
  WpMethodCall sync.pkg_name' "Pool'ptr" "Get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Pool'ptr_Put : 
  WpMethodCall sync.pkg_name' "Pool'ptr" "Put" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Pool'ptr_getSlow : 
  WpMethodCall sync.pkg_name' "Pool'ptr" "getSlow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Pool'ptr_pin : 
  WpMethodCall sync.pkg_name' "Pool'ptr" "pin" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Pool'ptr_pinSlow : 
  WpMethodCall sync.pkg_name' "Pool'ptr" "pinSlow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolDequeue'ptr_pack : 
  WpMethodCall sync.pkg_name' "poolDequeue'ptr" "pack" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolDequeue'ptr_popHead : 
  WpMethodCall sync.pkg_name' "poolDequeue'ptr" "popHead" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolDequeue'ptr_popTail : 
  WpMethodCall sync.pkg_name' "poolDequeue'ptr" "popTail" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolDequeue'ptr_pushHead : 
  WpMethodCall sync.pkg_name' "poolDequeue'ptr" "pushHead" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolDequeue'ptr_unpack : 
  WpMethodCall sync.pkg_name' "poolDequeue'ptr" "unpack" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChain'ptr_popHead : 
  WpMethodCall sync.pkg_name' "poolChain'ptr" "popHead" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChain'ptr_popTail : 
  WpMethodCall sync.pkg_name' "poolChain'ptr" "popTail" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChain'ptr_pushHead : 
  WpMethodCall sync.pkg_name' "poolChain'ptr" "pushHead" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChainElt'ptr_pack : 
  WpMethodCall sync.pkg_name' "poolChainElt'ptr" "pack" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChainElt'ptr_popHead : 
  WpMethodCall sync.pkg_name' "poolChainElt'ptr" "popHead" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChainElt'ptr_popTail : 
  WpMethodCall sync.pkg_name' "poolChainElt'ptr" "popTail" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChainElt'ptr_pushHead : 
  WpMethodCall sync.pkg_name' "poolChainElt'ptr" "pushHead" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_poolChainElt'ptr_unpack : 
  WpMethodCall sync.pkg_name' "poolChainElt'ptr" "unpack" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_Lock : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "Lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_RLock : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "RLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_RLocker : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "RLocker" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_RUnlock : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "RUnlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_TryLock : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "TryLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_TryRLock : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "TryRLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_Unlock : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "Unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_RWMutex'ptr_rUnlockSlow : 
  WpMethodCall sync.pkg_name' "RWMutex'ptr" "rUnlockSlow" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_rlocker'ptr_Lock : 
  WpMethodCall sync.pkg_name' "rlocker'ptr" "Lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_rlocker'ptr_Unlock : 
  WpMethodCall sync.pkg_name' "rlocker'ptr" "Unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_WaitGroup'ptr_Add : 
  WpMethodCall sync.pkg_name' "WaitGroup'ptr" "Add" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_WaitGroup'ptr_Done : 
  WpMethodCall sync.pkg_name' "WaitGroup'ptr" "Done" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_WaitGroup'ptr_Wait : 
  WpMethodCall sync.pkg_name' "WaitGroup'ptr" "Wait" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End sync.
