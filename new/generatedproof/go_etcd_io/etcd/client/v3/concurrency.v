(* autogenerated by goose proofgen (types); do not modify *)
From New.code Require Import go_etcd_io.etcd.client.v3.concurrency.
From New.golang Require Import theory.

Require New.generatedproof.context.
Require New.generatedproof.errors.
Require New.generatedproof.fmt.
Require New.generatedproof.go_etcd_io.etcd.api.v3.etcdserverpb.
Require New.generatedproof.go_etcd_io.etcd.api.v3.mvccpb.
Require New.generatedproof.go_etcd_io.etcd.client.v3.
Require New.generatedproof.strings.
Require New.generatedproof.sync.
Require New.generatedproof.time.
Require New.generatedproof.go_uber_org.zap.
Require New.generatedproof.math.
Axiom falso : False.

Module Election.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  session' : loc;
  keyPrefix' : go_string;
  leaderKey' : go_string;
  leaderRev' : w64;
  leaderSession' : loc;
  hdr' : loc;
}.
End def.
End Election.


Global Instance settable_Election `{ffi_syntax}: Settable _ :=
  settable! Election.mk < Election.session'; Election.keyPrefix'; Election.leaderKey'; Election.leaderRev'; Election.leaderSession'; Election.hdr' >.
Global Instance into_val_Election `{ffi_syntax} : IntoVal Election.t.
Admitted.

Global Instance into_val_typed_Election `{ffi_syntax} : IntoValTyped Election.t concurrency.Election :=
{|
  default_val := Election.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Election_session `{ffi_syntax} : IntoValStructField "session" concurrency.Election Election.session'.
Admitted.

Global Instance into_val_struct_field_Election_keyPrefix `{ffi_syntax} : IntoValStructField "keyPrefix" concurrency.Election Election.keyPrefix'.
Admitted.

Global Instance into_val_struct_field_Election_leaderKey `{ffi_syntax} : IntoValStructField "leaderKey" concurrency.Election Election.leaderKey'.
Admitted.

Global Instance into_val_struct_field_Election_leaderRev `{ffi_syntax} : IntoValStructField "leaderRev" concurrency.Election Election.leaderRev'.
Admitted.

Global Instance into_val_struct_field_Election_leaderSession `{ffi_syntax} : IntoValStructField "leaderSession" concurrency.Election Election.leaderSession'.
Admitted.

Global Instance into_val_struct_field_Election_hdr `{ffi_syntax} : IntoValStructField "hdr" concurrency.Election Election.hdr'.
Admitted.

Instance wp_struct_make_Election `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} session' keyPrefix' leaderKey' leaderRev' leaderSession' hdr':
  PureWp True
    (struct.make concurrency.Election (alist_val [
      "session" ::= #session';
      "keyPrefix" ::= #keyPrefix';
      "leaderKey" ::= #leaderKey';
      "leaderRev" ::= #leaderRev';
      "leaderSession" ::= #leaderSession';
      "hdr" ::= #hdr'
    ]))%V
    #(Election.mk session' keyPrefix' leaderKey' leaderRev' leaderSession' hdr').
Admitted.

Module Mutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  s' : loc;
  pfx' : go_string;
  myKey' : go_string;
  myRev' : w64;
  hdr' : loc;
}.
End def.
End Mutex.


Global Instance settable_Mutex `{ffi_syntax}: Settable _ :=
  settable! Mutex.mk < Mutex.s'; Mutex.pfx'; Mutex.myKey'; Mutex.myRev'; Mutex.hdr' >.
Global Instance into_val_Mutex `{ffi_syntax} : IntoVal Mutex.t.
Admitted.

Global Instance into_val_typed_Mutex `{ffi_syntax} : IntoValTyped Mutex.t concurrency.Mutex :=
{|
  default_val := Mutex.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Mutex_s `{ffi_syntax} : IntoValStructField "s" concurrency.Mutex Mutex.s'.
Admitted.

Global Instance into_val_struct_field_Mutex_pfx `{ffi_syntax} : IntoValStructField "pfx" concurrency.Mutex Mutex.pfx'.
Admitted.

Global Instance into_val_struct_field_Mutex_myKey `{ffi_syntax} : IntoValStructField "myKey" concurrency.Mutex Mutex.myKey'.
Admitted.

Global Instance into_val_struct_field_Mutex_myRev `{ffi_syntax} : IntoValStructField "myRev" concurrency.Mutex Mutex.myRev'.
Admitted.

Global Instance into_val_struct_field_Mutex_hdr `{ffi_syntax} : IntoValStructField "hdr" concurrency.Mutex Mutex.hdr'.
Admitted.

Instance wp_struct_make_Mutex `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} s' pfx' myKey' myRev' hdr':
  PureWp True
    (struct.make concurrency.Mutex (alist_val [
      "s" ::= #s';
      "pfx" ::= #pfx';
      "myKey" ::= #myKey';
      "myRev" ::= #myRev';
      "hdr" ::= #hdr'
    ]))%V
    #(Mutex.mk s' pfx' myKey' myRev' hdr').
Admitted.

Module lockerMutex.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Mutex' : loc;
}.
End def.
End lockerMutex.


Global Instance settable_lockerMutex `{ffi_syntax}: Settable _ :=
  settable! lockerMutex.mk < lockerMutex.Mutex' >.
Global Instance into_val_lockerMutex `{ffi_syntax} : IntoVal lockerMutex.t.
Admitted.

Global Instance into_val_typed_lockerMutex `{ffi_syntax} : IntoValTyped lockerMutex.t concurrency.lockerMutex :=
{|
  default_val := lockerMutex.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_lockerMutex_Mutex `{ffi_syntax} : IntoValStructField "Mutex" concurrency.lockerMutex lockerMutex.Mutex'.
Admitted.

Instance wp_struct_make_lockerMutex `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} Mutex':
  PureWp True
    (struct.make concurrency.lockerMutex (alist_val [
      "Mutex" ::= #Mutex'
    ]))%V
    #(lockerMutex.mk Mutex').
Admitted.

Module Session.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  client' : loc;
  opts' : loc;
  id' : w64;
  ctx' : interface.t;
  cancel' : func.t;
  donec' : loc;
}.
End def.
End Session.


Global Instance settable_Session `{ffi_syntax}: Settable _ :=
  settable! Session.mk < Session.client'; Session.opts'; Session.id'; Session.ctx'; Session.cancel'; Session.donec' >.
Global Instance into_val_Session `{ffi_syntax} : IntoVal Session.t.
Admitted.

Global Instance into_val_typed_Session `{ffi_syntax} : IntoValTyped Session.t concurrency.Session :=
{|
  default_val := Session.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_Session_client `{ffi_syntax} : IntoValStructField "client" concurrency.Session Session.client'.
Admitted.

Global Instance into_val_struct_field_Session_opts `{ffi_syntax} : IntoValStructField "opts" concurrency.Session Session.opts'.
Admitted.

Global Instance into_val_struct_field_Session_id `{ffi_syntax} : IntoValStructField "id" concurrency.Session Session.id'.
Admitted.

Global Instance into_val_struct_field_Session_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.Session Session.ctx'.
Admitted.

Global Instance into_val_struct_field_Session_cancel `{ffi_syntax} : IntoValStructField "cancel" concurrency.Session Session.cancel'.
Admitted.

Global Instance into_val_struct_field_Session_donec `{ffi_syntax} : IntoValStructField "donec" concurrency.Session Session.donec'.
Admitted.

Instance wp_struct_make_Session `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} client' opts' id' ctx' cancel' donec':
  PureWp True
    (struct.make concurrency.Session (alist_val [
      "client" ::= #client';
      "opts" ::= #opts';
      "id" ::= #id';
      "ctx" ::= #ctx';
      "cancel" ::= #cancel';
      "donec" ::= #donec'
    ]))%V
    #(Session.mk client' opts' id' ctx' cancel' donec').
Admitted.

Module sessionOptions.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  ttl' : w64;
  leaseID' : w64;
  ctx' : interface.t;
}.
End def.
End sessionOptions.


Global Instance settable_sessionOptions `{ffi_syntax}: Settable _ :=
  settable! sessionOptions.mk < sessionOptions.ttl'; sessionOptions.leaseID'; sessionOptions.ctx' >.
Global Instance into_val_sessionOptions `{ffi_syntax} : IntoVal sessionOptions.t.
Admitted.

Global Instance into_val_typed_sessionOptions `{ffi_syntax} : IntoValTyped sessionOptions.t concurrency.sessionOptions :=
{|
  default_val := sessionOptions.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_sessionOptions_ttl `{ffi_syntax} : IntoValStructField "ttl" concurrency.sessionOptions sessionOptions.ttl'.
Admitted.

Global Instance into_val_struct_field_sessionOptions_leaseID `{ffi_syntax} : IntoValStructField "leaseID" concurrency.sessionOptions sessionOptions.leaseID'.
Admitted.

Global Instance into_val_struct_field_sessionOptions_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.sessionOptions sessionOptions.ctx'.
Admitted.

Instance wp_struct_make_sessionOptions `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} ttl' leaseID' ctx':
  PureWp True
    (struct.make concurrency.sessionOptions (alist_val [
      "ttl" ::= #ttl';
      "leaseID" ::= #leaseID';
      "ctx" ::= #ctx'
    ]))%V
    #(sessionOptions.mk ttl' leaseID' ctx').
Admitted.

Module SessionOption.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End SessionOption.
Module STM.
Section def.
Context `{ffi_syntax}.
Definition t := interface.t.
End def.
End STM.
Module Isolation.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Isolation.
Module stmError.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  err' : interface.t;
}.
End def.
End stmError.


Global Instance settable_stmError `{ffi_syntax}: Settable _ :=
  settable! stmError.mk < stmError.err' >.
Global Instance into_val_stmError `{ffi_syntax} : IntoVal stmError.t.
Admitted.

Global Instance into_val_typed_stmError `{ffi_syntax} : IntoValTyped stmError.t concurrency.stmError :=
{|
  default_val := stmError.mk (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmError_err `{ffi_syntax} : IntoValStructField "err" concurrency.stmError stmError.err'.
Admitted.

Instance wp_struct_make_stmError `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} err':
  PureWp True
    (struct.make concurrency.stmError (alist_val [
      "err" ::= #err'
    ]))%V
    #(stmError.mk err').
Admitted.

Module stmOptions.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  iso' : w64;
  ctx' : interface.t;
  prefetch' : slice.t;
}.
End def.
End stmOptions.


Global Instance settable_stmOptions `{ffi_syntax}: Settable _ :=
  settable! stmOptions.mk < stmOptions.iso'; stmOptions.ctx'; stmOptions.prefetch' >.
Global Instance into_val_stmOptions `{ffi_syntax} : IntoVal stmOptions.t.
Admitted.

Global Instance into_val_typed_stmOptions `{ffi_syntax} : IntoValTyped stmOptions.t concurrency.stmOptions :=
{|
  default_val := stmOptions.mk (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmOptions_iso `{ffi_syntax} : IntoValStructField "iso" concurrency.stmOptions stmOptions.iso'.
Admitted.

Global Instance into_val_struct_field_stmOptions_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.stmOptions stmOptions.ctx'.
Admitted.

Global Instance into_val_struct_field_stmOptions_prefetch `{ffi_syntax} : IntoValStructField "prefetch" concurrency.stmOptions stmOptions.prefetch'.
Admitted.

Instance wp_struct_make_stmOptions `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} iso' ctx' prefetch':
  PureWp True
    (struct.make concurrency.stmOptions (alist_val [
      "iso" ::= #iso';
      "ctx" ::= #ctx';
      "prefetch" ::= #prefetch'
    ]))%V
    #(stmOptions.mk iso' ctx' prefetch').
Admitted.

Module stmOption.
Section def.
Context `{ffi_syntax}.
Definition t := func.t.
End def.
End stmOption.
Module stmResponse.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  resp' : loc;
  err' : interface.t;
}.
End def.
End stmResponse.


Global Instance settable_stmResponse `{ffi_syntax}: Settable _ :=
  settable! stmResponse.mk < stmResponse.resp'; stmResponse.err' >.
Global Instance into_val_stmResponse `{ffi_syntax} : IntoVal stmResponse.t.
Admitted.

Global Instance into_val_typed_stmResponse `{ffi_syntax} : IntoValTyped stmResponse.t concurrency.stmResponse :=
{|
  default_val := stmResponse.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmResponse_resp `{ffi_syntax} : IntoValStructField "resp" concurrency.stmResponse stmResponse.resp'.
Admitted.

Global Instance into_val_struct_field_stmResponse_err `{ffi_syntax} : IntoValStructField "err" concurrency.stmResponse stmResponse.err'.
Admitted.

Instance wp_struct_make_stmResponse `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} resp' err':
  PureWp True
    (struct.make concurrency.stmResponse (alist_val [
      "resp" ::= #resp';
      "err" ::= #err'
    ]))%V
    #(stmResponse.mk resp' err').
Admitted.

Module stm.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  client' : loc;
  ctx' : interface.t;
  rset' : loc;
  wset' : loc;
  getOpts' : slice.t;
  conflicts' : func.t;
}.
End def.
End stm.


Global Instance settable_stm `{ffi_syntax}: Settable _ :=
  settable! stm.mk < stm.client'; stm.ctx'; stm.rset'; stm.wset'; stm.getOpts'; stm.conflicts' >.
Global Instance into_val_stm `{ffi_syntax} : IntoVal stm.t.
Admitted.

Global Instance into_val_typed_stm `{ffi_syntax} : IntoValTyped stm.t concurrency.stm :=
{|
  default_val := stm.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stm_client `{ffi_syntax} : IntoValStructField "client" concurrency.stm stm.client'.
Admitted.

Global Instance into_val_struct_field_stm_ctx `{ffi_syntax} : IntoValStructField "ctx" concurrency.stm stm.ctx'.
Admitted.

Global Instance into_val_struct_field_stm_rset `{ffi_syntax} : IntoValStructField "rset" concurrency.stm stm.rset'.
Admitted.

Global Instance into_val_struct_field_stm_wset `{ffi_syntax} : IntoValStructField "wset" concurrency.stm stm.wset'.
Admitted.

Global Instance into_val_struct_field_stm_getOpts `{ffi_syntax} : IntoValStructField "getOpts" concurrency.stm stm.getOpts'.
Admitted.

Global Instance into_val_struct_field_stm_conflicts `{ffi_syntax} : IntoValStructField "conflicts" concurrency.stm stm.conflicts'.
Admitted.

Instance wp_struct_make_stm `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} client' ctx' rset' wset' getOpts' conflicts':
  PureWp True
    (struct.make concurrency.stm (alist_val [
      "client" ::= #client';
      "ctx" ::= #ctx';
      "rset" ::= #rset';
      "wset" ::= #wset';
      "getOpts" ::= #getOpts';
      "conflicts" ::= #conflicts'
    ]))%V
    #(stm.mk client' ctx' rset' wset' getOpts' conflicts').
Admitted.

Module stmPut.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  val' : go_string;
  op' : clientv3.Op.t;
}.
End def.
End stmPut.


Global Instance settable_stmPut `{ffi_syntax}: Settable _ :=
  settable! stmPut.mk < stmPut.val'; stmPut.op' >.
Global Instance into_val_stmPut `{ffi_syntax} : IntoVal stmPut.t.
Admitted.

Global Instance into_val_typed_stmPut `{ffi_syntax} : IntoValTyped stmPut.t concurrency.stmPut :=
{|
  default_val := stmPut.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmPut_val `{ffi_syntax} : IntoValStructField "val" concurrency.stmPut stmPut.val'.
Admitted.

Global Instance into_val_struct_field_stmPut_op `{ffi_syntax} : IntoValStructField "op" concurrency.stmPut stmPut.op'.
Admitted.

Instance wp_struct_make_stmPut `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} val' op':
  PureWp True
    (struct.make concurrency.stmPut (alist_val [
      "val" ::= #val';
      "op" ::= #op'
    ]))%V
    #(stmPut.mk val' op').
Admitted.

Module readSet.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End readSet.
Module writeSet.
Section def.
Context `{ffi_syntax}.
Definition t := loc.
End def.
End writeSet.
Module stmSerializable.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  stm' : stm.t;
  prefetch' : loc;
}.
End def.
End stmSerializable.


Global Instance settable_stmSerializable `{ffi_syntax}: Settable _ :=
  settable! stmSerializable.mk < stmSerializable.stm'; stmSerializable.prefetch' >.
Global Instance into_val_stmSerializable `{ffi_syntax} : IntoVal stmSerializable.t.
Admitted.

Global Instance into_val_typed_stmSerializable `{ffi_syntax} : IntoValTyped stmSerializable.t concurrency.stmSerializable :=
{|
  default_val := stmSerializable.mk (default_val _) (default_val _);
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
Global Instance into_val_struct_field_stmSerializable_stm `{ffi_syntax} : IntoValStructField "stm" concurrency.stmSerializable stmSerializable.stm'.
Admitted.

Global Instance into_val_struct_field_stmSerializable_prefetch `{ffi_syntax} : IntoValStructField "prefetch" concurrency.stmSerializable stmSerializable.prefetch'.
Admitted.

Instance wp_struct_make_stmSerializable `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ} stm' prefetch':
  PureWp True
    (struct.make concurrency.stmSerializable (alist_val [
      "stm" ::= #stm';
      "prefetch" ::= #prefetch'
    ]))%V
    #(stmSerializable.mk stm' prefetch').
Admitted.

(* autogenerated by proofgen (names); do not modify *)
Require Import New.code.go_etcd_io.etcd.client.v3.concurrency.
Require Export New.proof.proof_prelude.
Module concurrency.
Section defs.
Class GlobalAddrs :=
{
  ErrElectionNotLeader : loc;
  ErrElectionNoLeader : loc;
  ErrLocked : loc;
  ErrSessionExpired : loc;
  ErrLockReleased : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("ErrElectionNotLeader"%go, ErrElectionNotLeader);
    ("ErrElectionNoLeader"%go, ErrElectionNoLeader);
    ("ErrLocked"%go, ErrLocked);
    ("ErrSessionExpired"%go, ErrSessionExpired);
    ("ErrLockReleased"%go, ErrLockReleased)
  ].

Definition is_defined := is_global_definitions concurrency.pkg_name' var_addrs concurrency.functions' concurrency.msets'.

Definition own_allocated `{!GlobalAddrs} : iProp Σ :=
  "HErrElectionNotLeader" ∷ ErrElectionNotLeader ↦ (default_val interface.t) ∗
  "HErrElectionNoLeader" ∷ ErrElectionNoLeader ↦ (default_val interface.t) ∗
  "HErrLocked" ∷ ErrLocked ↦ (default_val interface.t) ∗
  "HErrSessionExpired" ∷ ErrSessionExpired ↦ (default_val interface.t) ∗
  "HErrLockReleased" ∷ ErrLockReleased ↦ (default_val interface.t).

Global Instance wp_globals_get_ErrElectionNotLeader : 
  WpGlobalsGet concurrency.pkg_name' "ErrElectionNotLeader" ErrElectionNotLeader is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrElectionNoLeader : 
  WpGlobalsGet concurrency.pkg_name' "ErrElectionNoLeader" ErrElectionNoLeader is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrLocked : 
  WpGlobalsGet concurrency.pkg_name' "ErrLocked" ErrLocked is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrSessionExpired : 
  WpGlobalsGet concurrency.pkg_name' "ErrSessionExpired" ErrSessionExpired is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_ErrLockReleased : 
  WpGlobalsGet concurrency.pkg_name' "ErrLockReleased" ErrLockReleased is_defined.
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_func_call_NewElection :
  WpFuncCall concurrency.pkg_name' "NewElection" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_ResumeElection :
  WpFuncCall concurrency.pkg_name' "ResumeElection" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_waitDelete :
  WpFuncCall concurrency.pkg_name' "waitDelete" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_waitDeletes :
  WpFuncCall concurrency.pkg_name' "waitDeletes" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewMutex :
  WpFuncCall concurrency.pkg_name' "NewMutex" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewLocker :
  WpFuncCall concurrency.pkg_name' "NewLocker" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSession :
  WpFuncCall concurrency.pkg_name' "NewSession" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithTTL :
  WpFuncCall concurrency.pkg_name' "WithTTL" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithLease :
  WpFuncCall concurrency.pkg_name' "WithLease" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithContext :
  WpFuncCall concurrency.pkg_name' "WithContext" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithIsolation :
  WpFuncCall concurrency.pkg_name' "WithIsolation" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithAbortContext :
  WpFuncCall concurrency.pkg_name' "WithAbortContext" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_WithPrefetch :
  WpFuncCall concurrency.pkg_name' "WithPrefetch" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTM :
  WpFuncCall concurrency.pkg_name' "NewSTM" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_mkSTM :
  WpFuncCall concurrency.pkg_name' "mkSTM" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_runSTM :
  WpFuncCall concurrency.pkg_name' "runSTM" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_isKeyCurrent :
  WpFuncCall concurrency.pkg_name' "isKeyCurrent" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_respToValue :
  WpFuncCall concurrency.pkg_name' "respToValue" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTMRepeatable :
  WpFuncCall concurrency.pkg_name' "NewSTMRepeatable" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTMSerializable :
  WpFuncCall concurrency.pkg_name' "NewSTMSerializable" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_NewSTMReadCommitted :
  WpFuncCall concurrency.pkg_name' "NewSTMReadCommitted" _ is_defined :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Campaign : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Campaign" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Header : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Header" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Key : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Key" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Leader : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Leader" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Observe : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Observe" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Proclaim : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Proclaim" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Resign : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Resign" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_Rev : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "Rev" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Election'ptr_observe : 
  WpMethodCall concurrency.pkg_name' "Election'ptr" "observe" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Header : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "Header" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_IsOwner : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "IsOwner" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Key : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "Key" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Lock : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "Lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_TryLock : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "TryLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_Unlock : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "Unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Mutex'ptr_tryAcquire : 
  WpMethodCall concurrency.pkg_name' "Mutex'ptr" "tryAcquire" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_Header : 
  WpMethodCall concurrency.pkg_name' "lockerMutex" "Header" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_IsOwner : 
  WpMethodCall concurrency.pkg_name' "lockerMutex" "IsOwner" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_Key : 
  WpMethodCall concurrency.pkg_name' "lockerMutex" "Key" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_TryLock : 
  WpMethodCall concurrency.pkg_name' "lockerMutex" "TryLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex_tryAcquire : 
  WpMethodCall concurrency.pkg_name' "lockerMutex" "tryAcquire" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Header : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "Header" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_IsOwner : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "IsOwner" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Key : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "Key" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Lock : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "Lock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_TryLock : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "TryLock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_Unlock : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "Unlock" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_lockerMutex'ptr_tryAcquire : 
  WpMethodCall concurrency.pkg_name' "lockerMutex'ptr" "tryAcquire" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Client : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Client" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Close : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Close" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Ctx : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Ctx" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Done : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Done" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Expired : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Expired" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Lease : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Lease" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_Session'ptr_Orphan : 
  WpMethodCall concurrency.pkg_name' "Session'ptr" "Orphan" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Del : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "Del" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Get : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "Get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Put : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "Put" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_Rev : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "Rev" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_commit : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "commit" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_fetch : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "fetch" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stm'ptr_reset : 
  WpMethodCall concurrency.pkg_name' "stm'ptr" "reset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet_add : 
  WpMethodCall concurrency.pkg_name' "readSet" "add" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet_cmps : 
  WpMethodCall concurrency.pkg_name' "readSet" "cmps" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet_first : 
  WpMethodCall concurrency.pkg_name' "readSet" "first" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet'ptr_add : 
  WpMethodCall concurrency.pkg_name' "readSet'ptr" "add" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet'ptr_cmps : 
  WpMethodCall concurrency.pkg_name' "readSet'ptr" "cmps" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_readSet'ptr_first : 
  WpMethodCall concurrency.pkg_name' "readSet'ptr" "first" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet_cmps : 
  WpMethodCall concurrency.pkg_name' "writeSet" "cmps" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet_get : 
  WpMethodCall concurrency.pkg_name' "writeSet" "get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet_puts : 
  WpMethodCall concurrency.pkg_name' "writeSet" "puts" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet'ptr_cmps : 
  WpMethodCall concurrency.pkg_name' "writeSet'ptr" "cmps" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet'ptr_get : 
  WpMethodCall concurrency.pkg_name' "writeSet'ptr" "get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_writeSet'ptr_puts : 
  WpMethodCall concurrency.pkg_name' "writeSet'ptr" "puts" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Del : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "Del" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Get : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "Get" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Put : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "Put" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_Rev : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "Rev" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_commit : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "commit" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_fetch : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "fetch" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_gets : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "gets" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_stmSerializable'ptr_reset : 
  WpMethodCall concurrency.pkg_name' "stmSerializable'ptr" "reset" _ is_defined :=
  ltac:(apply wp_method_call'; reflexivity).

End defs.
End concurrency.
