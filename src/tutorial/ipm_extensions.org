#+TITLE: IPM extensions

* Introduction
Perennial is a research project on verified concurrent storage systems.
** Verified concurrency
due to Iris.
** Storage
means crash safety with a new program logic that reasons about intermediate points.
** Systems
means verifying 1000-line programs written in Go.
* Tour of three features
** ~iNamed~ - named propositions
** ~iCache~ - caching sub-proofs
** ~Restore~ - restoring destructed propositions
* iNamed - named propositions [[file:ipm_extensions.v::first extension][Coq demo]]
** "simple" example [[file:../program_proof/wal/sliding_proof.v::is_sliding][sliding abstraction relation]]
** really hairy usage [[file:../program_proof/wal/invariant.v::Definition memLog_linv][wal memLog_linv]]
** examples in Hoare logic [[file:../program_proof/examples/inode_proof.v::wpc_Inode__Append][inode append wpc]], [[file:../program_proof/examples/inode_proof.v::wpc_Write_fupd][applying wpc_Write]]
* iCache - caching subproofs [[file:ipm_extensions.v::second extension][Coq demo]]
** arises in crash safety since crash conditions are repetitive
** simple example [[file:../program_proof/examples/replicated_block_proof.v::wpc_RepBlock__Read][replicated block Read]]
* Restore - destruct and then reconstruct (WIP) [[file:ipm_extensions.v::third extension][Coq demo]]
** often want to read from an abstraction relation
** restoring the persistent parts is annoying
** egregious example [[file:../program_proof/wal/logger_proof.v::iFrame "# % ∗"][iFrame "# % ∗"]]
