(* autogenerated from awol *)
From Perennial.go_lang Require Import prelude.

(* disk FFI *)
From Perennial.go_lang Require Import ffi.disk.
Existing Instances disk_op disk_model disk_ty.
Local Coercion Var' (s: string) := Var s.

(* 10 is completely arbitrary *)
Definition MaxTxnWrites : expr := #10.

Definition logLength : expr := #1 + #2 * "MaxTxnWrites".

Module Log.
  Definition S := struct.new [
    "l"; "cache"; "length"
  ].
  Definition T: ty := (lockRefT * mapT blockT * refT intT)%ht.
  Section fields.
    Context `{ext_ty: ext_types}.
    Definition get := struct.get S.
  End fields.
End Log.

Definition intToBlock: val :=
  λ: "a",
    let: "b" := NewSlice byteT "Disk.BlockSize" in
    UInt64Put "b" "a";;
    "b".

Definition blockToInt: val :=
  λ: "v",
    let: "a" := UInt64Get "v" in
    "a".

(* New initializes a fresh log *)
Definition New: val :=
  λ: <>,
    let: "diskSize" := disk.Size #() in
    if: "diskSize" ≤ "logLength"
    then
      Panic ("disk is too small to host log");;
      #()
    else #();;
    let: "cache" := NewMap blockT in
    let: "header" := intToBlock #0 in
    disk.Write #0 "header";;
    let: "lengthPtr" := ref (zero_val intT) in
    "lengthPtr" <- #0;;
    let: "l" := Data.newLock #() in
    struct.mk Log.S [
      "cache" ::= "cache";
      "length" ::= "lengthPtr";
      "l" ::= "l"
    ].

Definition lock: val :=
  λ: "l",
    Data.lockAcquire Writer (Log.get "l" "l").

Definition unlock: val :=
  λ: "l",
    Data.lockRelease Writer (Log.get "l" "l").

(* BeginTxn allocates space for a new transaction in the log.

   Returns true if the allocation succeeded. *)
Definition BeginTxn: val :=
  λ: "l",
    lock "l";;
    let: "length" := !(Log.get "length" "l") in
    if: "length" = #0
    then
      unlock "l";;
      #true
    else
      unlock "l";;
      #false.

(* Read from the logical disk.

   Reads must go through the log to return committed but un-applied writes. *)
Definition Read: val :=
  λ: "l" "a",
    lock "l";;
    let: ("v", "ok") := MapGet (Log.get "cache" "l") "a" in
    if: "ok"
    then
      unlock "l";;
      "v"
    else
      unlock "l";;
      let: "dv" := disk.Read ("logLength" + "a") in
      "dv".

Definition Size: val :=
  λ: "l",
    let: "sz" := disk.Size #() in
    "sz" - "logLength".

(* Write to the disk through the log. *)
Definition Write: val :=
  λ: "l" "a" "v",
    lock "l";;
    let: "length" := !(Log.get "length" "l") in
    if: "length" ≥ "MaxTxnWrites"
    then
      Panic ("transaction is at capacity");;
      #()
    else #();;
    let: "aBlock" := intToBlock "a" in
    let: "nextAddr" := #1 + #2 * "length" in
    disk.Write "nextAddr" "aBlock";;
    disk.Write ("nextAddr" + #1) "v";;
    MapInsert (Log.get "cache" "l") "a" "v";;
    Log.get "length" "l" <- "length" + #1;;
    unlock "l".

(* Commit the current transaction. *)
Definition Commit: val :=
  λ: "l",
    lock "l";;
    let: "length" := !(Log.get "length" "l") in
    unlock "l";;
    let: "header" := intToBlock "length" in
    disk.Write #0 "header".

Definition getLogEntry: val :=
  λ: "logOffset",
    let: "diskAddr" := #1 + #2 * "logOffset" in
    let: "aBlock" := disk.Read "diskAddr" in
    let: "a" := blockToInt "aBlock" in
    let: "v" := disk.Read ("diskAddr" + #1) in
    ("a", "v").

(* applyLog assumes we are running sequentially *)
Definition applyLog: val :=
  λ: "length",
    let: "i" := ref #0 in
    for: (#true); (Skip) :=
      if: !"i" < "length"
      then
        let: ("a", "v") := getLogEntry !"i" in
        disk.Write ("logLength" + "a") "v";;
        "i" <- !"i" + #1;;
        Continue
      else Break.

Definition clearLog: val :=
  λ: <>,
    let: "header" := intToBlock #0 in
    disk.Write #0 "header".

(* Apply all the committed transactions.

   Frees all the space in the log. *)
Definition Apply: val :=
  λ: "l",
    lock "l";;
    let: "length" := !(Log.get "length" "l") in
    applyLog "length";;
    clearLog #();;
    Log.get "length" "l" <- #0;;
    unlock "l".

(* Open recovers the log following a crash or shutdown *)
Definition Open: val :=
  λ: <>,
    let: "header" := disk.Read #0 in
    let: "length" := blockToInt "header" in
    applyLog "length";;
    clearLog #();;
    let: "cache" := NewMap blockT in
    let: "lengthPtr" := ref (zero_val intT) in
    "lengthPtr" <- #0;;
    let: "l" := Data.newLock #() in
    struct.mk Log.S [
      "cache" ::= "cache";
      "length" ::= "lengthPtr";
      "l" ::= "l"
    ].
