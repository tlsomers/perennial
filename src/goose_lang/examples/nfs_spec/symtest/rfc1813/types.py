# Generated by rpcgen.py from /home/nickolai/proj/go-rpcgen/rfc1813/prot.x on Fri Dec  6 10:47:13 2019
import const
class specdata3:
    # XDR definition:
    # struct specdata3 {
    #     uint32 specdata1;
    #     uint32 specdata2;
    # };
    def __init__(self, specdata1=None, specdata2=None):
        self.specdata1 = specdata1
        self.specdata2 = specdata2

    def __repr__(self):
        out = []
        if self.specdata1 is not None:
            out += ['specdata1=%s' % repr(self.specdata1)]
        if self.specdata2 is not None:
            out += ['specdata2=%s' % repr(self.specdata2)]
        return 'specdata3(%s)' % ', '.join(out)

class nfs_fh3:
    # XDR definition:
    # struct nfs_fh3 {
    #     opaque data<NFS3_FHSIZE>;
    # };
    def __init__(self, data=None):
        self.data = data

    def __repr__(self):
        out = []
        if self.data is not None:
            out += ['data=%s' % repr(self.data)]
        return 'nfs_fh3(%s)' % ', '.join(out)

class nfstime3:
    # XDR definition:
    # struct nfstime3 {
    #     uint32 seconds;
    #     uint32 nseconds;
    # };
    def __init__(self, seconds=None, nseconds=None):
        self.seconds = seconds
        self.nseconds = nseconds

    def __repr__(self):
        out = []
        if self.seconds is not None:
            out += ['seconds=%s' % repr(self.seconds)]
        if self.nseconds is not None:
            out += ['nseconds=%s' % repr(self.nseconds)]
        return 'nfstime3(%s)' % ', '.join(out)

class fattr3:
    # XDR definition:
    # struct fattr3 {
    #     ftype3 ftype;
    #     mode3 mode;
    #     uint32 nlink;
    #     uid3 uid;
    #     gid3 gid;
    #     size3 size;
    #     size3 used;
    #     specdata3 rdev;
    #     uint64 fsid;
    #     fileid3 fileid;
    #     nfstime3 atime;
    #     nfstime3 mtime;
    #     nfstime3 ctime;
    # };
    def __init__(self, ftype=None, mode=None, nlink=None, uid=None, gid=None, size=None, used=None, rdev=None, fsid=None, fileid=None, atime=None, mtime=None, ctime=None):
        self.ftype = ftype
        self.mode = mode
        self.nlink = nlink
        self.uid = uid
        self.gid = gid
        self.size = size
        self.used = used
        self.rdev = rdev
        self.fsid = fsid
        self.fileid = fileid
        self.atime = atime
        self.mtime = mtime
        self.ctime = ctime

    def __repr__(self):
        out = []
        if self.ftype is not None:
            out += ['ftype=%s' % const.ftype3.get(self.ftype, self.ftype)]
        if self.mode is not None:
            out += ['mode=%s' % repr(self.mode)]
        if self.nlink is not None:
            out += ['nlink=%s' % repr(self.nlink)]
        if self.uid is not None:
            out += ['uid=%s' % repr(self.uid)]
        if self.gid is not None:
            out += ['gid=%s' % repr(self.gid)]
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        if self.used is not None:
            out += ['used=%s' % repr(self.used)]
        if self.rdev is not None:
            out += ['rdev=%s' % repr(self.rdev)]
        if self.fsid is not None:
            out += ['fsid=%s' % repr(self.fsid)]
        if self.fileid is not None:
            out += ['fileid=%s' % repr(self.fileid)]
        if self.atime is not None:
            out += ['atime=%s' % repr(self.atime)]
        if self.mtime is not None:
            out += ['mtime=%s' % repr(self.mtime)]
        if self.ctime is not None:
            out += ['ctime=%s' % repr(self.ctime)]
        return 'fattr3(%s)' % ', '.join(out)

class post_op_attr:
    # XDR definition:
    # union post_op_attr switch(bool attributes_follow) {
    #     case TRUE:
    #         fattr3 attributes;
    #     case FALSE:
    #         void;
    # };
    def __init__(self, attributes_follow=None, attributes=None):
        self.attributes_follow = attributes_follow
        self.attributes = attributes

    def __repr__(self):
        out = []
        if self.attributes_follow is not None:
            out += ['attributes_follow=%s' % repr(self.attributes_follow)]
        if self.attributes is not None:
            out += ['attributes=%s' % repr(self.attributes)]
        return 'post_op_attr(%s)' % ', '.join(out)

class wcc_attr:
    # XDR definition:
    # struct wcc_attr {
    #     size3 size;
    #     nfstime3 mtime;
    #     nfstime3 ctime;
    # };
    def __init__(self, size=None, mtime=None, ctime=None):
        self.size = size
        self.mtime = mtime
        self.ctime = ctime

    def __repr__(self):
        out = []
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        if self.mtime is not None:
            out += ['mtime=%s' % repr(self.mtime)]
        if self.ctime is not None:
            out += ['ctime=%s' % repr(self.ctime)]
        return 'wcc_attr(%s)' % ', '.join(out)

class pre_op_attr:
    # XDR definition:
    # union pre_op_attr switch(bool attributes_follow) {
    #     case TRUE:
    #         wcc_attr attributes;
    #     case FALSE:
    #         void;
    # };
    def __init__(self, attributes_follow=None, attributes=None):
        self.attributes_follow = attributes_follow
        self.attributes = attributes

    def __repr__(self):
        out = []
        if self.attributes_follow is not None:
            out += ['attributes_follow=%s' % repr(self.attributes_follow)]
        if self.attributes is not None:
            out += ['attributes=%s' % repr(self.attributes)]
        return 'pre_op_attr(%s)' % ', '.join(out)

class wcc_data:
    # XDR definition:
    # struct wcc_data {
    #     pre_op_attr before;
    #     post_op_attr after;
    # };
    def __init__(self, before=None, after=None):
        self.before = before
        self.after = after

    def __repr__(self):
        out = []
        if self.before is not None:
            out += ['before=%s' % repr(self.before)]
        if self.after is not None:
            out += ['after=%s' % repr(self.after)]
        return 'wcc_data(%s)' % ', '.join(out)

class post_op_fh3:
    # XDR definition:
    # union post_op_fh3 switch(bool handle_follows) {
    #     case TRUE:
    #         nfs_fh3 handle;
    #     case FALSE:
    #         void;
    # };
    def __init__(self, handle_follows=None, handle=None):
        self.handle_follows = handle_follows
        self.handle = handle

    def __repr__(self):
        out = []
        if self.handle_follows is not None:
            out += ['handle_follows=%s' % repr(self.handle_follows)]
        if self.handle is not None:
            out += ['handle=%s' % repr(self.handle)]
        return 'post_op_fh3(%s)' % ', '.join(out)

class set_mode3:
    # XDR definition:
    # union set_mode3 switch(bool set_it) {
    #     case TRUE:
    #         mode3 mode;
    #     default:
    #         void;
    # };
    def __init__(self, set_it=None, mode=None):
        self.set_it = set_it
        self.mode = mode

    def __repr__(self):
        out = []
        if self.set_it is not None:
            out += ['set_it=%s' % repr(self.set_it)]
        if self.mode is not None:
            out += ['mode=%s' % repr(self.mode)]
        return 'set_mode3(%s)' % ', '.join(out)

class set_uid3:
    # XDR definition:
    # union set_uid3 switch(bool set_it) {
    #     case TRUE:
    #         uid3 uid;
    #     default:
    #         void;
    # };
    def __init__(self, set_it=None, uid=None):
        self.set_it = set_it
        self.uid = uid

    def __repr__(self):
        out = []
        if self.set_it is not None:
            out += ['set_it=%s' % repr(self.set_it)]
        if self.uid is not None:
            out += ['uid=%s' % repr(self.uid)]
        return 'set_uid3(%s)' % ', '.join(out)

class set_gid3:
    # XDR definition:
    # union set_gid3 switch(bool set_it) {
    #     case TRUE:
    #         gid3 gid;
    #     default:
    #         void;
    # };
    def __init__(self, set_it=None, gid=None):
        self.set_it = set_it
        self.gid = gid

    def __repr__(self):
        out = []
        if self.set_it is not None:
            out += ['set_it=%s' % repr(self.set_it)]
        if self.gid is not None:
            out += ['gid=%s' % repr(self.gid)]
        return 'set_gid3(%s)' % ', '.join(out)

class set_size3:
    # XDR definition:
    # union set_size3 switch(bool set_it) {
    #     case TRUE:
    #         size3 size;
    #     default:
    #         void;
    # };
    def __init__(self, set_it=None, size=None):
        self.set_it = set_it
        self.size = size

    def __repr__(self):
        out = []
        if self.set_it is not None:
            out += ['set_it=%s' % repr(self.set_it)]
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        return 'set_size3(%s)' % ', '.join(out)

class set_atime:
    # XDR definition:
    # union set_atime switch(time_how set_it) {
    #     case SET_TO_CLIENT_TIME:
    #         nfstime3 atime;
    #     default:
    #         void;
    # };
    def __init__(self, set_it=None, atime=None):
        self.set_it = set_it
        self.atime = atime

    def __repr__(self):
        out = []
        if self.set_it is not None:
            out += ['set_it=%s' % const.time_how.get(self.set_it, self.set_it)]
        if self.atime is not None:
            out += ['atime=%s' % repr(self.atime)]
        return 'set_atime(%s)' % ', '.join(out)

class set_mtime:
    # XDR definition:
    # union set_mtime switch(time_how set_it) {
    #     case SET_TO_CLIENT_TIME:
    #         nfstime3 mtime;
    #     default:
    #         void;
    # };
    def __init__(self, set_it=None, mtime=None):
        self.set_it = set_it
        self.mtime = mtime

    def __repr__(self):
        out = []
        if self.set_it is not None:
            out += ['set_it=%s' % const.time_how.get(self.set_it, self.set_it)]
        if self.mtime is not None:
            out += ['mtime=%s' % repr(self.mtime)]
        return 'set_mtime(%s)' % ', '.join(out)

class sattr3:
    # XDR definition:
    # struct sattr3 {
    #     set_mode3 mode;
    #     set_uid3 uid;
    #     set_gid3 gid;
    #     set_size3 size;
    #     set_atime atime;
    #     set_mtime mtime;
    # };
    def __init__(self, mode=None, uid=None, gid=None, size=None, atime=None, mtime=None):
        self.mode = mode
        self.uid = uid
        self.gid = gid
        self.size = size
        self.atime = atime
        self.mtime = mtime

    def __repr__(self):
        out = []
        if self.mode is not None:
            out += ['mode=%s' % repr(self.mode)]
        if self.uid is not None:
            out += ['uid=%s' % repr(self.uid)]
        if self.gid is not None:
            out += ['gid=%s' % repr(self.gid)]
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        if self.atime is not None:
            out += ['atime=%s' % repr(self.atime)]
        if self.mtime is not None:
            out += ['mtime=%s' % repr(self.mtime)]
        return 'sattr3(%s)' % ', '.join(out)

class diropargs3:
    # XDR definition:
    # struct diropargs3 {
    #     nfs_fh3 dir;
    #     filename3 name;
    # };
    def __init__(self, dir=None, name=None):
        self.dir = dir
        self.name = name

    def __repr__(self):
        out = []
        if self.dir is not None:
            out += ['dir=%s' % repr(self.dir)]
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        return 'diropargs3(%s)' % ', '.join(out)

class GETATTR3args:
    # XDR definition:
    # struct GETATTR3args {
    #     nfs_fh3 object;
    # };
    def __init__(self, object=None):
        self.object = object

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        return 'GETATTR3args(%s)' % ', '.join(out)

class GETATTR3resok:
    # XDR definition:
    # struct GETATTR3resok {
    #     fattr3 obj_attributes;
    # };
    def __init__(self, obj_attributes=None):
        self.obj_attributes = obj_attributes

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        return 'GETATTR3resok(%s)' % ', '.join(out)

class GETATTR3res:
    # XDR definition:
    # union GETATTR3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         GETATTR3resok resok;
    #     default:
    #         void;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'GETATTR3res(%s)' % ', '.join(out)

class sattrguard3:
    # XDR definition:
    # union sattrguard3 switch(bool check) {
    #     case TRUE:
    #         nfstime3 obj_ctime;
    #     case FALSE:
    #         void;
    # };
    def __init__(self, check=None, obj_ctime=None):
        self.check = check
        self.obj_ctime = obj_ctime

    def __repr__(self):
        out = []
        if self.check is not None:
            out += ['check=%s' % repr(self.check)]
        if self.obj_ctime is not None:
            out += ['obj_ctime=%s' % repr(self.obj_ctime)]
        return 'sattrguard3(%s)' % ', '.join(out)

class SETATTR3args:
    # XDR definition:
    # struct SETATTR3args {
    #     nfs_fh3 object;
    #     sattr3 new_attributes;
    #     sattrguard3 guard;
    # };
    def __init__(self, object=None, new_attributes=None, guard=None):
        self.object = object
        self.new_attributes = new_attributes
        self.guard = guard

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        if self.new_attributes is not None:
            out += ['new_attributes=%s' % repr(self.new_attributes)]
        if self.guard is not None:
            out += ['guard=%s' % repr(self.guard)]
        return 'SETATTR3args(%s)' % ', '.join(out)

class SETATTR3resok:
    # XDR definition:
    # struct SETATTR3resok {
    #     wcc_data obj_wcc;
    # };
    def __init__(self, obj_wcc=None):
        self.obj_wcc = obj_wcc

    def __repr__(self):
        out = []
        if self.obj_wcc is not None:
            out += ['obj_wcc=%s' % repr(self.obj_wcc)]
        return 'SETATTR3resok(%s)' % ', '.join(out)

class SETATTR3resfail:
    # XDR definition:
    # struct SETATTR3resfail {
    #     wcc_data obj_wcc;
    # };
    def __init__(self, obj_wcc=None):
        self.obj_wcc = obj_wcc

    def __repr__(self):
        out = []
        if self.obj_wcc is not None:
            out += ['obj_wcc=%s' % repr(self.obj_wcc)]
        return 'SETATTR3resfail(%s)' % ', '.join(out)

class SETATTR3res:
    # XDR definition:
    # union SETATTR3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         SETATTR3resok resok;
    #     default:
    #         SETATTR3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'SETATTR3res(%s)' % ', '.join(out)

class LOOKUP3args:
    # XDR definition:
    # struct LOOKUP3args {
    #     diropargs3 what;
    # };
    def __init__(self, what=None):
        self.what = what

    def __repr__(self):
        out = []
        if self.what is not None:
            out += ['what=%s' % repr(self.what)]
        return 'LOOKUP3args(%s)' % ', '.join(out)

class LOOKUP3resok:
    # XDR definition:
    # struct LOOKUP3resok {
    #     nfs_fh3 object;
    #     post_op_attr obj_attributes;
    #     post_op_attr dir_attributes;
    # };
    def __init__(self, object=None, obj_attributes=None, dir_attributes=None):
        self.object = object
        self.obj_attributes = obj_attributes
        self.dir_attributes = dir_attributes

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.dir_attributes is not None:
            out += ['dir_attributes=%s' % repr(self.dir_attributes)]
        return 'LOOKUP3resok(%s)' % ', '.join(out)

class LOOKUP3resfail:
    # XDR definition:
    # struct LOOKUP3resfail {
    #     post_op_attr dir_attributes;
    # };
    def __init__(self, dir_attributes=None):
        self.dir_attributes = dir_attributes

    def __repr__(self):
        out = []
        if self.dir_attributes is not None:
            out += ['dir_attributes=%s' % repr(self.dir_attributes)]
        return 'LOOKUP3resfail(%s)' % ', '.join(out)

class LOOKUP3res:
    # XDR definition:
    # union LOOKUP3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         LOOKUP3resok resok;
    #     default:
    #         LOOKUP3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'LOOKUP3res(%s)' % ', '.join(out)

class ACCESS3args:
    # XDR definition:
    # struct ACCESS3args {
    #     nfs_fh3 object;
    #     uint32 access;
    # };
    def __init__(self, object=None, access=None):
        self.object = object
        self.access = access

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        if self.access is not None:
            out += ['access=%s' % repr(self.access)]
        return 'ACCESS3args(%s)' % ', '.join(out)

class ACCESS3resok:
    # XDR definition:
    # struct ACCESS3resok {
    #     post_op_attr obj_attributes;
    #     uint32 access;
    # };
    def __init__(self, obj_attributes=None, access=None):
        self.obj_attributes = obj_attributes
        self.access = access

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.access is not None:
            out += ['access=%s' % repr(self.access)]
        return 'ACCESS3resok(%s)' % ', '.join(out)

class ACCESS3resfail:
    # XDR definition:
    # struct ACCESS3resfail {
    #     post_op_attr obj_attributes;
    # };
    def __init__(self, obj_attributes=None):
        self.obj_attributes = obj_attributes

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        return 'ACCESS3resfail(%s)' % ', '.join(out)

class ACCESS3res:
    # XDR definition:
    # union ACCESS3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         ACCESS3resok resok;
    #     default:
    #         ACCESS3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'ACCESS3res(%s)' % ', '.join(out)

class READLINK3args:
    # XDR definition:
    # struct READLINK3args {
    #     nfs_fh3 symlink;
    # };
    def __init__(self, symlink=None):
        self.symlink = symlink

    def __repr__(self):
        out = []
        if self.symlink is not None:
            out += ['symlink=%s' % repr(self.symlink)]
        return 'READLINK3args(%s)' % ', '.join(out)

class READLINK3resok:
    # XDR definition:
    # struct READLINK3resok {
    #     post_op_attr symlink_attributes;
    #     nfspath3 data;
    # };
    def __init__(self, symlink_attributes=None, data=None):
        self.symlink_attributes = symlink_attributes
        self.data = data

    def __repr__(self):
        out = []
        if self.symlink_attributes is not None:
            out += ['symlink_attributes=%s' % repr(self.symlink_attributes)]
        if self.data is not None:
            out += ['data=%s' % repr(self.data)]
        return 'READLINK3resok(%s)' % ', '.join(out)

class READLINK3resfail:
    # XDR definition:
    # struct READLINK3resfail {
    #     post_op_attr symlink_attributes;
    # };
    def __init__(self, symlink_attributes=None):
        self.symlink_attributes = symlink_attributes

    def __repr__(self):
        out = []
        if self.symlink_attributes is not None:
            out += ['symlink_attributes=%s' % repr(self.symlink_attributes)]
        return 'READLINK3resfail(%s)' % ', '.join(out)

class READLINK3res:
    # XDR definition:
    # union READLINK3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         READLINK3resok resok;
    #     default:
    #         READLINK3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'READLINK3res(%s)' % ', '.join(out)

class READ3args:
    # XDR definition:
    # struct READ3args {
    #     nfs_fh3 file;
    #     offset3 offset;
    #     count3 count;
    # };
    def __init__(self, file=None, offset=None, count=None):
        self.file = file
        self.offset = offset
        self.count = count

    def __repr__(self):
        out = []
        if self.file is not None:
            out += ['file=%s' % repr(self.file)]
        if self.offset is not None:
            out += ['offset=%s' % repr(self.offset)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        return 'READ3args(%s)' % ', '.join(out)

class READ3resok:
    # XDR definition:
    # struct READ3resok {
    #     post_op_attr file_attributes;
    #     count3 count;
    #     bool eof;
    #     opaque data<>;
    # };
    def __init__(self, file_attributes=None, count=None, eof=None, data=None):
        self.file_attributes = file_attributes
        self.count = count
        self.eof = eof
        self.data = data

    def __repr__(self):
        out = []
        if self.file_attributes is not None:
            out += ['file_attributes=%s' % repr(self.file_attributes)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        if self.eof is not None:
            out += ['eof=%s' % repr(self.eof)]
        if self.data is not None:
            out += ['data=%s' % repr(self.data)]
        return 'READ3resok(%s)' % ', '.join(out)

class READ3resfail:
    # XDR definition:
    # struct READ3resfail {
    #     post_op_attr file_attributes;
    # };
    def __init__(self, file_attributes=None):
        self.file_attributes = file_attributes

    def __repr__(self):
        out = []
        if self.file_attributes is not None:
            out += ['file_attributes=%s' % repr(self.file_attributes)]
        return 'READ3resfail(%s)' % ', '.join(out)

class READ3res:
    # XDR definition:
    # union READ3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         READ3resok resok;
    #     default:
    #         READ3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'READ3res(%s)' % ', '.join(out)

class WRITE3args:
    # XDR definition:
    # struct WRITE3args {
    #     nfs_fh3 file;
    #     offset3 offset;
    #     count3 count;
    #     stable_how stable;
    #     opaque data<>;
    # };
    def __init__(self, file=None, offset=None, count=None, stable=None, data=None):
        self.file = file
        self.offset = offset
        self.count = count
        self.stable = stable
        self.data = data

    def __repr__(self):
        out = []
        if self.file is not None:
            out += ['file=%s' % repr(self.file)]
        if self.offset is not None:
            out += ['offset=%s' % repr(self.offset)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        if self.stable is not None:
            out += ['stable=%s' % const.stable_how.get(self.stable, self.stable)]
        if self.data is not None:
            out += ['data=%s' % repr(self.data)]
        return 'WRITE3args(%s)' % ', '.join(out)

class WRITE3resok:
    # XDR definition:
    # struct WRITE3resok {
    #     wcc_data file_wcc;
    #     count3 count;
    #     stable_how committed;
    #     writeverf3 verf;
    # };
    def __init__(self, file_wcc=None, count=None, committed=None, verf=None):
        self.file_wcc = file_wcc
        self.count = count
        self.committed = committed
        self.verf = verf

    def __repr__(self):
        out = []
        if self.file_wcc is not None:
            out += ['file_wcc=%s' % repr(self.file_wcc)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        if self.committed is not None:
            out += ['committed=%s' % const.stable_how.get(self.committed, self.committed)]
        if self.verf is not None:
            out += ['verf=%s' % repr(self.verf)]
        return 'WRITE3resok(%s)' % ', '.join(out)

class WRITE3resfail:
    # XDR definition:
    # struct WRITE3resfail {
    #     wcc_data file_wcc;
    # };
    def __init__(self, file_wcc=None):
        self.file_wcc = file_wcc

    def __repr__(self):
        out = []
        if self.file_wcc is not None:
            out += ['file_wcc=%s' % repr(self.file_wcc)]
        return 'WRITE3resfail(%s)' % ', '.join(out)

class WRITE3res:
    # XDR definition:
    # union WRITE3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         WRITE3resok resok;
    #     default:
    #         WRITE3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'WRITE3res(%s)' % ', '.join(out)

class createhow3:
    # XDR definition:
    # union createhow3 switch(createmode3 mode) {
    #     case UNCHECKED:
    #     case GUARDED:
    #         sattr3 obj_attributes;
    #     case EXCLUSIVE:
    #         createverf3 verf;
    # };
    def __init__(self, mode=None, obj_attributes=None, verf=None):
        self.mode = mode
        self.obj_attributes = obj_attributes
        self.verf = verf

    def __repr__(self):
        out = []
        if self.mode is not None:
            out += ['mode=%s' % const.createmode3.get(self.mode, self.mode)]
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.verf is not None:
            out += ['verf=%s' % repr(self.verf)]
        return 'createhow3(%s)' % ', '.join(out)

class CREATE3args:
    # XDR definition:
    # struct CREATE3args {
    #     diropargs3 where;
    #     createhow3 how;
    # };
    def __init__(self, where=None, how=None):
        self.where = where
        self.how = how

    def __repr__(self):
        out = []
        if self.where is not None:
            out += ['where=%s' % repr(self.where)]
        if self.how is not None:
            out += ['how=%s' % repr(self.how)]
        return 'CREATE3args(%s)' % ', '.join(out)

class CREATE3resok:
    # XDR definition:
    # struct CREATE3resok {
    #     post_op_fh3 obj;
    #     post_op_attr obj_attributes;
    #     wcc_data dir_wcc;
    # };
    def __init__(self, obj=None, obj_attributes=None, dir_wcc=None):
        self.obj = obj
        self.obj_attributes = obj_attributes
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.obj is not None:
            out += ['obj=%s' % repr(self.obj)]
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'CREATE3resok(%s)' % ', '.join(out)

class CREATE3resfail:
    # XDR definition:
    # struct CREATE3resfail {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'CREATE3resfail(%s)' % ', '.join(out)

class CREATE3res:
    # XDR definition:
    # union CREATE3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         CREATE3resok resok;
    #     default:
    #         CREATE3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'CREATE3res(%s)' % ', '.join(out)

class MKDIR3args:
    # XDR definition:
    # struct MKDIR3args {
    #     diropargs3 where;
    #     sattr3 attributes;
    # };
    def __init__(self, where=None, attributes=None):
        self.where = where
        self.attributes = attributes

    def __repr__(self):
        out = []
        if self.where is not None:
            out += ['where=%s' % repr(self.where)]
        if self.attributes is not None:
            out += ['attributes=%s' % repr(self.attributes)]
        return 'MKDIR3args(%s)' % ', '.join(out)

class MKDIR3resok:
    # XDR definition:
    # struct MKDIR3resok {
    #     post_op_fh3 obj;
    #     post_op_attr obj_attributes;
    #     wcc_data dir_wcc;
    # };
    def __init__(self, obj=None, obj_attributes=None, dir_wcc=None):
        self.obj = obj
        self.obj_attributes = obj_attributes
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.obj is not None:
            out += ['obj=%s' % repr(self.obj)]
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'MKDIR3resok(%s)' % ', '.join(out)

class MKDIR3resfail:
    # XDR definition:
    # struct MKDIR3resfail {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'MKDIR3resfail(%s)' % ', '.join(out)

class MKDIR3res:
    # XDR definition:
    # union MKDIR3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         MKDIR3resok resok;
    #     default:
    #         MKDIR3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'MKDIR3res(%s)' % ', '.join(out)

class symlinkdata3:
    # XDR definition:
    # struct symlinkdata3 {
    #     sattr3 symlink_attributes;
    #     nfspath3 symlink_data;
    # };
    def __init__(self, symlink_attributes=None, symlink_data=None):
        self.symlink_attributes = symlink_attributes
        self.symlink_data = symlink_data

    def __repr__(self):
        out = []
        if self.symlink_attributes is not None:
            out += ['symlink_attributes=%s' % repr(self.symlink_attributes)]
        if self.symlink_data is not None:
            out += ['symlink_data=%s' % repr(self.symlink_data)]
        return 'symlinkdata3(%s)' % ', '.join(out)

class SYMLINK3args:
    # XDR definition:
    # struct SYMLINK3args {
    #     diropargs3 where;
    #     symlinkdata3 symlink;
    # };
    def __init__(self, where=None, symlink=None):
        self.where = where
        self.symlink = symlink

    def __repr__(self):
        out = []
        if self.where is not None:
            out += ['where=%s' % repr(self.where)]
        if self.symlink is not None:
            out += ['symlink=%s' % repr(self.symlink)]
        return 'SYMLINK3args(%s)' % ', '.join(out)

class SYMLINK3resok:
    # XDR definition:
    # struct SYMLINK3resok {
    #     post_op_fh3 obj;
    #     post_op_attr obj_attributes;
    #     wcc_data dir_wcc;
    # };
    def __init__(self, obj=None, obj_attributes=None, dir_wcc=None):
        self.obj = obj
        self.obj_attributes = obj_attributes
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.obj is not None:
            out += ['obj=%s' % repr(self.obj)]
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'SYMLINK3resok(%s)' % ', '.join(out)

class SYMLINK3resfail:
    # XDR definition:
    # struct SYMLINK3resfail {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'SYMLINK3resfail(%s)' % ', '.join(out)

class SYMLINK3res:
    # XDR definition:
    # union SYMLINK3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         SYMLINK3resok resok;
    #     default:
    #         SYMLINK3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'SYMLINK3res(%s)' % ', '.join(out)

class devicedata3:
    # XDR definition:
    # struct devicedata3 {
    #     sattr3 dev_attributes;
    #     specdata3 spec;
    # };
    def __init__(self, dev_attributes=None, spec=None):
        self.dev_attributes = dev_attributes
        self.spec = spec

    def __repr__(self):
        out = []
        if self.dev_attributes is not None:
            out += ['dev_attributes=%s' % repr(self.dev_attributes)]
        if self.spec is not None:
            out += ['spec=%s' % repr(self.spec)]
        return 'devicedata3(%s)' % ', '.join(out)

class mknoddata3:
    # XDR definition:
    # union mknoddata3 switch(ftype3 ftype) {
    #     case NF3CHR:
    #     case NF3BLK:
    #         devicedata3 device;
    #     case NF3SOCK:
    #     case NF3FIFO:
    #         sattr3 pipe_attributes;
    #     default:
    #         void;
    # };
    def __init__(self, ftype=None, device=None, pipe_attributes=None):
        self.ftype = ftype
        self.device = device
        self.pipe_attributes = pipe_attributes

    def __repr__(self):
        out = []
        if self.ftype is not None:
            out += ['ftype=%s' % const.ftype3.get(self.ftype, self.ftype)]
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        if self.pipe_attributes is not None:
            out += ['pipe_attributes=%s' % repr(self.pipe_attributes)]
        return 'mknoddata3(%s)' % ', '.join(out)

class MKNOD3args:
    # XDR definition:
    # struct MKNOD3args {
    #     diropargs3 where;
    #     mknoddata3 what;
    # };
    def __init__(self, where=None, what=None):
        self.where = where
        self.what = what

    def __repr__(self):
        out = []
        if self.where is not None:
            out += ['where=%s' % repr(self.where)]
        if self.what is not None:
            out += ['what=%s' % repr(self.what)]
        return 'MKNOD3args(%s)' % ', '.join(out)

class MKNOD3resok:
    # XDR definition:
    # struct MKNOD3resok {
    #     post_op_fh3 obj;
    #     post_op_attr obj_attributes;
    #     wcc_data dir_wcc;
    # };
    def __init__(self, obj=None, obj_attributes=None, dir_wcc=None):
        self.obj = obj
        self.obj_attributes = obj_attributes
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.obj is not None:
            out += ['obj=%s' % repr(self.obj)]
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'MKNOD3resok(%s)' % ', '.join(out)

class MKNOD3resfail:
    # XDR definition:
    # struct MKNOD3resfail {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'MKNOD3resfail(%s)' % ', '.join(out)

class MKNOD3res:
    # XDR definition:
    # union MKNOD3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         MKNOD3resok resok;
    #     default:
    #         MKNOD3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'MKNOD3res(%s)' % ', '.join(out)

class REMOVE3args:
    # XDR definition:
    # struct REMOVE3args {
    #     diropargs3 object;
    # };
    def __init__(self, object=None):
        self.object = object

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        return 'REMOVE3args(%s)' % ', '.join(out)

class REMOVE3resok:
    # XDR definition:
    # struct REMOVE3resok {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'REMOVE3resok(%s)' % ', '.join(out)

class REMOVE3resfail:
    # XDR definition:
    # struct REMOVE3resfail {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'REMOVE3resfail(%s)' % ', '.join(out)

class REMOVE3res:
    # XDR definition:
    # union REMOVE3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         REMOVE3resok resok;
    #     default:
    #         REMOVE3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'REMOVE3res(%s)' % ', '.join(out)

class RMDIR3args:
    # XDR definition:
    # struct RMDIR3args {
    #     diropargs3 object;
    # };
    def __init__(self, object=None):
        self.object = object

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        return 'RMDIR3args(%s)' % ', '.join(out)

class RMDIR3resok:
    # XDR definition:
    # struct RMDIR3resok {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'RMDIR3resok(%s)' % ', '.join(out)

class RMDIR3resfail:
    # XDR definition:
    # struct RMDIR3resfail {
    #     wcc_data dir_wcc;
    # };
    def __init__(self, dir_wcc=None):
        self.dir_wcc = dir_wcc

    def __repr__(self):
        out = []
        if self.dir_wcc is not None:
            out += ['dir_wcc=%s' % repr(self.dir_wcc)]
        return 'RMDIR3resfail(%s)' % ', '.join(out)

class RMDIR3res:
    # XDR definition:
    # union RMDIR3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         RMDIR3resok resok;
    #     default:
    #         RMDIR3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'RMDIR3res(%s)' % ', '.join(out)

class RENAME3args:
    # XDR definition:
    # struct RENAME3args {
    #     diropargs3 from;
    #     diropargs3 to;
    # };
    def __init__(self, xfrom=None, xto=None):
        self.xfrom = xfrom
        self.xto = xto

    def __repr__(self):
        out = []
        if self.xfrom is not None:
            out += ['from=%s' % repr(self.xfrom)]
        if self.xto is not None:
            out += ['to=%s' % repr(self.xto)]
        return 'RENAME3args(%s)' % ', '.join(out)

class RENAME3resok:
    # XDR definition:
    # struct RENAME3resok {
    #     wcc_data fromdir_wcc;
    #     wcc_data todir_wcc;
    # };
    def __init__(self, fromdir_wcc=None, todir_wcc=None):
        self.fromdir_wcc = fromdir_wcc
        self.todir_wcc = todir_wcc

    def __repr__(self):
        out = []
        if self.fromdir_wcc is not None:
            out += ['fromdir_wcc=%s' % repr(self.fromdir_wcc)]
        if self.todir_wcc is not None:
            out += ['todir_wcc=%s' % repr(self.todir_wcc)]
        return 'RENAME3resok(%s)' % ', '.join(out)

class RENAME3resfail:
    # XDR definition:
    # struct RENAME3resfail {
    #     wcc_data fromdir_wcc;
    #     wcc_data todir_wcc;
    # };
    def __init__(self, fromdir_wcc=None, todir_wcc=None):
        self.fromdir_wcc = fromdir_wcc
        self.todir_wcc = todir_wcc

    def __repr__(self):
        out = []
        if self.fromdir_wcc is not None:
            out += ['fromdir_wcc=%s' % repr(self.fromdir_wcc)]
        if self.todir_wcc is not None:
            out += ['todir_wcc=%s' % repr(self.todir_wcc)]
        return 'RENAME3resfail(%s)' % ', '.join(out)

class RENAME3res:
    # XDR definition:
    # union RENAME3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         RENAME3resok resok;
    #     default:
    #         RENAME3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'RENAME3res(%s)' % ', '.join(out)

class LINK3args:
    # XDR definition:
    # struct LINK3args {
    #     nfs_fh3 file;
    #     diropargs3 link;
    # };
    def __init__(self, file=None, link=None):
        self.file = file
        self.link = link

    def __repr__(self):
        out = []
        if self.file is not None:
            out += ['file=%s' % repr(self.file)]
        if self.link is not None:
            out += ['link=%s' % repr(self.link)]
        return 'LINK3args(%s)' % ', '.join(out)

class LINK3resok:
    # XDR definition:
    # struct LINK3resok {
    #     post_op_attr file_attributes;
    #     wcc_data linkdir_wcc;
    # };
    def __init__(self, file_attributes=None, linkdir_wcc=None):
        self.file_attributes = file_attributes
        self.linkdir_wcc = linkdir_wcc

    def __repr__(self):
        out = []
        if self.file_attributes is not None:
            out += ['file_attributes=%s' % repr(self.file_attributes)]
        if self.linkdir_wcc is not None:
            out += ['linkdir_wcc=%s' % repr(self.linkdir_wcc)]
        return 'LINK3resok(%s)' % ', '.join(out)

class LINK3resfail:
    # XDR definition:
    # struct LINK3resfail {
    #     post_op_attr file_attributes;
    #     wcc_data linkdir_wcc;
    # };
    def __init__(self, file_attributes=None, linkdir_wcc=None):
        self.file_attributes = file_attributes
        self.linkdir_wcc = linkdir_wcc

    def __repr__(self):
        out = []
        if self.file_attributes is not None:
            out += ['file_attributes=%s' % repr(self.file_attributes)]
        if self.linkdir_wcc is not None:
            out += ['linkdir_wcc=%s' % repr(self.linkdir_wcc)]
        return 'LINK3resfail(%s)' % ', '.join(out)

class LINK3res:
    # XDR definition:
    # union LINK3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         LINK3resok resok;
    #     default:
    #         LINK3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'LINK3res(%s)' % ', '.join(out)

class READDIR3args:
    # XDR definition:
    # struct READDIR3args {
    #     nfs_fh3 dir;
    #     cookie3 cookie;
    #     cookieverf3 cookieverf;
    #     count3 count;
    # };
    def __init__(self, dir=None, cookie=None, cookieverf=None, count=None):
        self.dir = dir
        self.cookie = cookie
        self.cookieverf = cookieverf
        self.count = count

    def __repr__(self):
        out = []
        if self.dir is not None:
            out += ['dir=%s' % repr(self.dir)]
        if self.cookie is not None:
            out += ['cookie=%s' % repr(self.cookie)]
        if self.cookieverf is not None:
            out += ['cookieverf=%s' % repr(self.cookieverf)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        return 'READDIR3args(%s)' % ', '.join(out)

class entry3:
    # XDR definition:
    # struct entry3 {
    #     fileid3 fileid;
    #     filename3 name;
    #     cookie3 cookie;
    #     entry3 nextentry<1>;
    # };
    def __init__(self, fileid=None, name=None, cookie=None, nextentry=None):
        self.fileid = fileid
        self.name = name
        self.cookie = cookie
        self.nextentry = nextentry

    def __repr__(self):
        out = []
        if self.fileid is not None:
            out += ['fileid=%s' % repr(self.fileid)]
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.cookie is not None:
            out += ['cookie=%s' % repr(self.cookie)]
        if self.nextentry is not None:
            out += ['nextentry=%s' % repr(self.nextentry)]
        return 'entry3(%s)' % ', '.join(out)

class dirlist3:
    # XDR definition:
    # struct dirlist3 {
    #     entry3 entries<1>;
    #     bool eof;
    # };
    def __init__(self, entries=None, eof=None):
        self.entries = entries
        self.eof = eof

    def __repr__(self):
        out = []
        if self.entries is not None:
            out += ['entries=%s' % repr(self.entries)]
        if self.eof is not None:
            out += ['eof=%s' % repr(self.eof)]
        return 'dirlist3(%s)' % ', '.join(out)

class READDIR3resok:
    # XDR definition:
    # struct READDIR3resok {
    #     post_op_attr dir_attributes;
    #     cookieverf3 cookieverf;
    #     dirlist3 reply;
    # };
    def __init__(self, dir_attributes=None, cookieverf=None, reply=None):
        self.dir_attributes = dir_attributes
        self.cookieverf = cookieverf
        self.reply = reply

    def __repr__(self):
        out = []
        if self.dir_attributes is not None:
            out += ['dir_attributes=%s' % repr(self.dir_attributes)]
        if self.cookieverf is not None:
            out += ['cookieverf=%s' % repr(self.cookieverf)]
        if self.reply is not None:
            out += ['reply=%s' % repr(self.reply)]
        return 'READDIR3resok(%s)' % ', '.join(out)

class READDIR3resfail:
    # XDR definition:
    # struct READDIR3resfail {
    #     post_op_attr dir_attributes;
    # };
    def __init__(self, dir_attributes=None):
        self.dir_attributes = dir_attributes

    def __repr__(self):
        out = []
        if self.dir_attributes is not None:
            out += ['dir_attributes=%s' % repr(self.dir_attributes)]
        return 'READDIR3resfail(%s)' % ', '.join(out)

class READDIR3res:
    # XDR definition:
    # union READDIR3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         READDIR3resok resok;
    #     default:
    #         READDIR3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'READDIR3res(%s)' % ', '.join(out)

class READDIRPLUS3args:
    # XDR definition:
    # struct READDIRPLUS3args {
    #     nfs_fh3 dir;
    #     cookie3 cookie;
    #     cookieverf3 cookieverf;
    #     count3 dircount;
    #     count3 maxcount;
    # };
    def __init__(self, dir=None, cookie=None, cookieverf=None, dircount=None, maxcount=None):
        self.dir = dir
        self.cookie = cookie
        self.cookieverf = cookieverf
        self.dircount = dircount
        self.maxcount = maxcount

    def __repr__(self):
        out = []
        if self.dir is not None:
            out += ['dir=%s' % repr(self.dir)]
        if self.cookie is not None:
            out += ['cookie=%s' % repr(self.cookie)]
        if self.cookieverf is not None:
            out += ['cookieverf=%s' % repr(self.cookieverf)]
        if self.dircount is not None:
            out += ['dircount=%s' % repr(self.dircount)]
        if self.maxcount is not None:
            out += ['maxcount=%s' % repr(self.maxcount)]
        return 'READDIRPLUS3args(%s)' % ', '.join(out)

class entryplus3:
    # XDR definition:
    # struct entryplus3 {
    #     fileid3 fileid;
    #     filename3 name;
    #     cookie3 cookie;
    #     post_op_attr name_attributes;
    #     post_op_fh3 name_handle;
    #     entryplus3 nextentry<1>;
    # };
    def __init__(self, fileid=None, name=None, cookie=None, name_attributes=None, name_handle=None, nextentry=None):
        self.fileid = fileid
        self.name = name
        self.cookie = cookie
        self.name_attributes = name_attributes
        self.name_handle = name_handle
        self.nextentry = nextentry

    def __repr__(self):
        out = []
        if self.fileid is not None:
            out += ['fileid=%s' % repr(self.fileid)]
        if self.name is not None:
            out += ['name=%s' % repr(self.name)]
        if self.cookie is not None:
            out += ['cookie=%s' % repr(self.cookie)]
        if self.name_attributes is not None:
            out += ['name_attributes=%s' % repr(self.name_attributes)]
        if self.name_handle is not None:
            out += ['name_handle=%s' % repr(self.name_handle)]
        if self.nextentry is not None:
            out += ['nextentry=%s' % repr(self.nextentry)]
        return 'entryplus3(%s)' % ', '.join(out)

class dirlistplus3:
    # XDR definition:
    # struct dirlistplus3 {
    #     entryplus3 entries<1>;
    #     bool eof;
    # };
    def __init__(self, entries=None, eof=None):
        self.entries = entries
        self.eof = eof

    def __repr__(self):
        out = []
        if self.entries is not None:
            out += ['entries=%s' % repr(self.entries)]
        if self.eof is not None:
            out += ['eof=%s' % repr(self.eof)]
        return 'dirlistplus3(%s)' % ', '.join(out)

class READDIRPLUS3resok:
    # XDR definition:
    # struct READDIRPLUS3resok {
    #     post_op_attr dir_attributes;
    #     cookieverf3 cookieverf;
    #     dirlistplus3 reply;
    # };
    def __init__(self, dir_attributes=None, cookieverf=None, reply=None):
        self.dir_attributes = dir_attributes
        self.cookieverf = cookieverf
        self.reply = reply

    def __repr__(self):
        out = []
        if self.dir_attributes is not None:
            out += ['dir_attributes=%s' % repr(self.dir_attributes)]
        if self.cookieverf is not None:
            out += ['cookieverf=%s' % repr(self.cookieverf)]
        if self.reply is not None:
            out += ['reply=%s' % repr(self.reply)]
        return 'READDIRPLUS3resok(%s)' % ', '.join(out)

class READDIRPLUS3resfail:
    # XDR definition:
    # struct READDIRPLUS3resfail {
    #     post_op_attr dir_attributes;
    # };
    def __init__(self, dir_attributes=None):
        self.dir_attributes = dir_attributes

    def __repr__(self):
        out = []
        if self.dir_attributes is not None:
            out += ['dir_attributes=%s' % repr(self.dir_attributes)]
        return 'READDIRPLUS3resfail(%s)' % ', '.join(out)

class READDIRPLUS3res:
    # XDR definition:
    # union READDIRPLUS3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         READDIRPLUS3resok resok;
    #     default:
    #         READDIRPLUS3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'READDIRPLUS3res(%s)' % ', '.join(out)

class FSSTAT3args:
    # XDR definition:
    # struct FSSTAT3args {
    #     nfs_fh3 fsroot;
    # };
    def __init__(self, fsroot=None):
        self.fsroot = fsroot

    def __repr__(self):
        out = []
        if self.fsroot is not None:
            out += ['fsroot=%s' % repr(self.fsroot)]
        return 'FSSTAT3args(%s)' % ', '.join(out)

class FSSTAT3resok:
    # XDR definition:
    # struct FSSTAT3resok {
    #     post_op_attr obj_attributes;
    #     size3 tbytes;
    #     size3 fbytes;
    #     size3 abytes;
    #     size3 tfiles;
    #     size3 ffiles;
    #     size3 afiles;
    #     uint32 invarsec;
    # };
    def __init__(self, obj_attributes=None, tbytes=None, fbytes=None, abytes=None, tfiles=None, ffiles=None, afiles=None, invarsec=None):
        self.obj_attributes = obj_attributes
        self.tbytes = tbytes
        self.fbytes = fbytes
        self.abytes = abytes
        self.tfiles = tfiles
        self.ffiles = ffiles
        self.afiles = afiles
        self.invarsec = invarsec

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.tbytes is not None:
            out += ['tbytes=%s' % repr(self.tbytes)]
        if self.fbytes is not None:
            out += ['fbytes=%s' % repr(self.fbytes)]
        if self.abytes is not None:
            out += ['abytes=%s' % repr(self.abytes)]
        if self.tfiles is not None:
            out += ['tfiles=%s' % repr(self.tfiles)]
        if self.ffiles is not None:
            out += ['ffiles=%s' % repr(self.ffiles)]
        if self.afiles is not None:
            out += ['afiles=%s' % repr(self.afiles)]
        if self.invarsec is not None:
            out += ['invarsec=%s' % repr(self.invarsec)]
        return 'FSSTAT3resok(%s)' % ', '.join(out)

class FSSTAT3resfail:
    # XDR definition:
    # struct FSSTAT3resfail {
    #     post_op_attr obj_attributes;
    # };
    def __init__(self, obj_attributes=None):
        self.obj_attributes = obj_attributes

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        return 'FSSTAT3resfail(%s)' % ', '.join(out)

class FSSTAT3res:
    # XDR definition:
    # union FSSTAT3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         FSSTAT3resok resok;
    #     default:
    #         FSSTAT3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'FSSTAT3res(%s)' % ', '.join(out)

class FSINFO3args:
    # XDR definition:
    # struct FSINFO3args {
    #     nfs_fh3 fsroot;
    # };
    def __init__(self, fsroot=None):
        self.fsroot = fsroot

    def __repr__(self):
        out = []
        if self.fsroot is not None:
            out += ['fsroot=%s' % repr(self.fsroot)]
        return 'FSINFO3args(%s)' % ', '.join(out)

class FSINFO3resok:
    # XDR definition:
    # struct FSINFO3resok {
    #     post_op_attr obj_attributes;
    #     uint32 rtmax;
    #     uint32 rtpref;
    #     uint32 rtmult;
    #     uint32 wtmax;
    #     uint32 wtpref;
    #     uint32 wtmult;
    #     uint32 dtpref;
    #     size3 maxfilesize;
    #     nfstime3 time_delta;
    #     uint32 properties;
    # };
    def __init__(self, obj_attributes=None, rtmax=None, rtpref=None, rtmult=None, wtmax=None, wtpref=None, wtmult=None, dtpref=None, maxfilesize=None, time_delta=None, properties=None):
        self.obj_attributes = obj_attributes
        self.rtmax = rtmax
        self.rtpref = rtpref
        self.rtmult = rtmult
        self.wtmax = wtmax
        self.wtpref = wtpref
        self.wtmult = wtmult
        self.dtpref = dtpref
        self.maxfilesize = maxfilesize
        self.time_delta = time_delta
        self.properties = properties

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.rtmax is not None:
            out += ['rtmax=%s' % repr(self.rtmax)]
        if self.rtpref is not None:
            out += ['rtpref=%s' % repr(self.rtpref)]
        if self.rtmult is not None:
            out += ['rtmult=%s' % repr(self.rtmult)]
        if self.wtmax is not None:
            out += ['wtmax=%s' % repr(self.wtmax)]
        if self.wtpref is not None:
            out += ['wtpref=%s' % repr(self.wtpref)]
        if self.wtmult is not None:
            out += ['wtmult=%s' % repr(self.wtmult)]
        if self.dtpref is not None:
            out += ['dtpref=%s' % repr(self.dtpref)]
        if self.maxfilesize is not None:
            out += ['maxfilesize=%s' % repr(self.maxfilesize)]
        if self.time_delta is not None:
            out += ['time_delta=%s' % repr(self.time_delta)]
        if self.properties is not None:
            out += ['properties=%s' % repr(self.properties)]
        return 'FSINFO3resok(%s)' % ', '.join(out)

class FSINFO3resfail:
    # XDR definition:
    # struct FSINFO3resfail {
    #     post_op_attr obj_attributes;
    # };
    def __init__(self, obj_attributes=None):
        self.obj_attributes = obj_attributes

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        return 'FSINFO3resfail(%s)' % ', '.join(out)

class FSINFO3res:
    # XDR definition:
    # union FSINFO3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         FSINFO3resok resok;
    #     default:
    #         FSINFO3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'FSINFO3res(%s)' % ', '.join(out)

class PATHCONF3args:
    # XDR definition:
    # struct PATHCONF3args {
    #     nfs_fh3 object;
    # };
    def __init__(self, object=None):
        self.object = object

    def __repr__(self):
        out = []
        if self.object is not None:
            out += ['object=%s' % repr(self.object)]
        return 'PATHCONF3args(%s)' % ', '.join(out)

class PATHCONF3resok:
    # XDR definition:
    # struct PATHCONF3resok {
    #     post_op_attr obj_attributes;
    #     uint32 linkmax;
    #     uint32 name_max;
    #     bool no_trunc;
    #     bool chown_restricted;
    #     bool case_insensitive;
    #     bool case_preserving;
    # };
    def __init__(self, obj_attributes=None, linkmax=None, name_max=None, no_trunc=None, chown_restricted=None, case_insensitive=None, case_preserving=None):
        self.obj_attributes = obj_attributes
        self.linkmax = linkmax
        self.name_max = name_max
        self.no_trunc = no_trunc
        self.chown_restricted = chown_restricted
        self.case_insensitive = case_insensitive
        self.case_preserving = case_preserving

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        if self.linkmax is not None:
            out += ['linkmax=%s' % repr(self.linkmax)]
        if self.name_max is not None:
            out += ['name_max=%s' % repr(self.name_max)]
        if self.no_trunc is not None:
            out += ['no_trunc=%s' % repr(self.no_trunc)]
        if self.chown_restricted is not None:
            out += ['chown_restricted=%s' % repr(self.chown_restricted)]
        if self.case_insensitive is not None:
            out += ['case_insensitive=%s' % repr(self.case_insensitive)]
        if self.case_preserving is not None:
            out += ['case_preserving=%s' % repr(self.case_preserving)]
        return 'PATHCONF3resok(%s)' % ', '.join(out)

class PATHCONF3resfail:
    # XDR definition:
    # struct PATHCONF3resfail {
    #     post_op_attr obj_attributes;
    # };
    def __init__(self, obj_attributes=None):
        self.obj_attributes = obj_attributes

    def __repr__(self):
        out = []
        if self.obj_attributes is not None:
            out += ['obj_attributes=%s' % repr(self.obj_attributes)]
        return 'PATHCONF3resfail(%s)' % ', '.join(out)

class PATHCONF3res:
    # XDR definition:
    # union PATHCONF3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         PATHCONF3resok resok;
    #     default:
    #         PATHCONF3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'PATHCONF3res(%s)' % ', '.join(out)

class COMMIT3args:
    # XDR definition:
    # struct COMMIT3args {
    #     nfs_fh3 file;
    #     offset3 offset;
    #     count3 count;
    # };
    def __init__(self, file=None, offset=None, count=None):
        self.file = file
        self.offset = offset
        self.count = count

    def __repr__(self):
        out = []
        if self.file is not None:
            out += ['file=%s' % repr(self.file)]
        if self.offset is not None:
            out += ['offset=%s' % repr(self.offset)]
        if self.count is not None:
            out += ['count=%s' % repr(self.count)]
        return 'COMMIT3args(%s)' % ', '.join(out)

class COMMIT3resok:
    # XDR definition:
    # struct COMMIT3resok {
    #     wcc_data file_wcc;
    #     writeverf3 verf;
    # };
    def __init__(self, file_wcc=None, verf=None):
        self.file_wcc = file_wcc
        self.verf = verf

    def __repr__(self):
        out = []
        if self.file_wcc is not None:
            out += ['file_wcc=%s' % repr(self.file_wcc)]
        if self.verf is not None:
            out += ['verf=%s' % repr(self.verf)]
        return 'COMMIT3resok(%s)' % ', '.join(out)

class COMMIT3resfail:
    # XDR definition:
    # struct COMMIT3resfail {
    #     wcc_data file_wcc;
    # };
    def __init__(self, file_wcc=None):
        self.file_wcc = file_wcc

    def __repr__(self):
        out = []
        if self.file_wcc is not None:
            out += ['file_wcc=%s' % repr(self.file_wcc)]
        return 'COMMIT3resfail(%s)' % ', '.join(out)

class COMMIT3res:
    # XDR definition:
    # union COMMIT3res switch(nfsstat3 status) {
    #     case NFS3_OK:
    #         COMMIT3resok resok;
    #     default:
    #         COMMIT3resfail resfail;
    # };
    def __init__(self, status=None, resok=None):
        self.status = status
        self.resok = resok

    def __repr__(self):
        out = []
        if self.status is not None:
            out += ['status=%s' % const.nfsstat3.get(self.status, self.status)]
        if self.resok is not None:
            out += ['resok=%s' % repr(self.resok)]
        return 'COMMIT3res(%s)' % ', '.join(out)

class mountres3_ok:
    # XDR definition:
    # struct mountres3_ok {
    #     fhandle3 fhandle;
    #     uint auth_flavors<>;
    # };
    def __init__(self, fhandle=None, auth_flavors=None):
        self.fhandle = fhandle
        self.auth_flavors = auth_flavors

    def __repr__(self):
        out = []
        if self.fhandle is not None:
            out += ['fhandle=%s' % repr(self.fhandle)]
        if self.auth_flavors is not None:
            out += ['auth_flavors=%s' % repr(self.auth_flavors)]
        return 'mountres3_ok(%s)' % ', '.join(out)

class mountres3:
    # XDR definition:
    # union mountres3 switch(mountstat3 fhs_status) {
    #     case MNT3_OK:
    #         mountres3_ok mountinfo;
    #     default:
    #         void;
    # };
    def __init__(self, fhs_status=None, mountinfo=None):
        self.fhs_status = fhs_status
        self.mountinfo = mountinfo

    def __repr__(self):
        out = []
        if self.fhs_status is not None:
            out += ['fhs_status=%s' % const.mountstat3.get(self.fhs_status, self.fhs_status)]
        if self.mountinfo is not None:
            out += ['mountinfo=%s' % repr(self.mountinfo)]
        return 'mountres3(%s)' % ', '.join(out)

class mount3:
    # XDR definition:
    # struct mount3 {
    #     name3 ml_hostname;
    #     dirpath3 ml_directory;
    #     mount3 ml_next<1>;
    # };
    def __init__(self, ml_hostname=None, ml_directory=None, ml_next=None):
        self.ml_hostname = ml_hostname
        self.ml_directory = ml_directory
        self.ml_next = ml_next

    def __repr__(self):
        out = []
        if self.ml_hostname is not None:
            out += ['ml_hostname=%s' % repr(self.ml_hostname)]
        if self.ml_directory is not None:
            out += ['ml_directory=%s' % repr(self.ml_directory)]
        if self.ml_next is not None:
            out += ['ml_next=%s' % repr(self.ml_next)]
        return 'mount3(%s)' % ', '.join(out)

class groups3:
    # XDR definition:
    # struct groups3 {
    #     name3 gr_name;
    #     groups3 gr_next<1>;
    # };
    def __init__(self, gr_name=None, gr_next=None):
        self.gr_name = gr_name
        self.gr_next = gr_next

    def __repr__(self):
        out = []
        if self.gr_name is not None:
            out += ['gr_name=%s' % repr(self.gr_name)]
        if self.gr_next is not None:
            out += ['gr_next=%s' % repr(self.gr_next)]
        return 'groups3(%s)' % ', '.join(out)

class exports3:
    # XDR definition:
    # struct exports3 {
    #     dirpath3 ex_dir;
    #     groups3 ex_groups<1>;
    #     exports3 ex_next<1>;
    # };
    def __init__(self, ex_dir=None, ex_groups=None, ex_next=None):
        self.ex_dir = ex_dir
        self.ex_groups = ex_groups
        self.ex_next = ex_next

    def __repr__(self):
        out = []
        if self.ex_dir is not None:
            out += ['ex_dir=%s' % repr(self.ex_dir)]
        if self.ex_groups is not None:
            out += ['ex_groups=%s' % repr(self.ex_groups)]
        if self.ex_next is not None:
            out += ['ex_next=%s' % repr(self.ex_next)]
        return 'exports3(%s)' % ', '.join(out)

