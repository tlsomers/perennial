# Generated by rpcgen.py from /home/nickolai/proj/go-rpcgen/rfc1813/prot.x on Fri Dec  6 10:47:13 2019
import rpc
import const
import pack
from rpc.rpc_const import *

class NFS_PROGRAM(object):
    class TCPNFS_V3(rpc.TCPServer):
        def __init__(self, host, port, **kwargs):
            if 'prog' in kwargs or 'vers' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.TCPServer.__init__(self, prog=const.NFS_PROGRAM, vers=const.NFS_V3, host=host, port=port, **kwargs)

        # void NFSPROC3_NULL(void)
        def handle_0(self, packeddata):
            res = self.NFSPROC3_NULL()
            return (MSG_ACCEPTED, '')

        # GETATTR3res NFSPROC3_GETATTR(GETATTR3args)
        def handle_1(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_GETATTR3args()
            unpacker.done()
            res = self.NFSPROC3_GETATTR(p0)
            packer = pack.protPacker()
            packer.pack_GETATTR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # SETATTR3res NFSPROC3_SETATTR(SETATTR3args)
        def handle_2(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_SETATTR3args()
            unpacker.done()
            res = self.NFSPROC3_SETATTR(p0)
            packer = pack.protPacker()
            packer.pack_SETATTR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # LOOKUP3res NFSPROC3_LOOKUP(LOOKUP3args)
        def handle_3(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_LOOKUP3args()
            unpacker.done()
            res = self.NFSPROC3_LOOKUP(p0)
            packer = pack.protPacker()
            packer.pack_LOOKUP3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # ACCESS3res NFSPROC3_ACCESS(ACCESS3args)
        def handle_4(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_ACCESS3args()
            unpacker.done()
            res = self.NFSPROC3_ACCESS(p0)
            packer = pack.protPacker()
            packer.pack_ACCESS3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READLINK3res NFSPROC3_READLINK(READLINK3args)
        def handle_5(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READLINK3args()
            unpacker.done()
            res = self.NFSPROC3_READLINK(p0)
            packer = pack.protPacker()
            packer.pack_READLINK3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READ3res NFSPROC3_READ(READ3args)
        def handle_6(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READ3args()
            unpacker.done()
            res = self.NFSPROC3_READ(p0)
            packer = pack.protPacker()
            packer.pack_READ3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # WRITE3res NFSPROC3_WRITE(WRITE3args)
        def handle_7(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_WRITE3args()
            unpacker.done()
            res = self.NFSPROC3_WRITE(p0)
            packer = pack.protPacker()
            packer.pack_WRITE3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # CREATE3res NFSPROC3_CREATE(CREATE3args)
        def handle_8(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_CREATE3args()
            unpacker.done()
            res = self.NFSPROC3_CREATE(p0)
            packer = pack.protPacker()
            packer.pack_CREATE3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # MKDIR3res NFSPROC3_MKDIR(MKDIR3args)
        def handle_9(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_MKDIR3args()
            unpacker.done()
            res = self.NFSPROC3_MKDIR(p0)
            packer = pack.protPacker()
            packer.pack_MKDIR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # SYMLINK3res NFSPROC3_SYMLINK(SYMLINK3args)
        def handle_10(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_SYMLINK3args()
            unpacker.done()
            res = self.NFSPROC3_SYMLINK(p0)
            packer = pack.protPacker()
            packer.pack_SYMLINK3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # MKNOD3res NFSPROC3_MKNOD(MKNOD3args)
        def handle_11(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_MKNOD3args()
            unpacker.done()
            res = self.NFSPROC3_MKNOD(p0)
            packer = pack.protPacker()
            packer.pack_MKNOD3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # REMOVE3res NFSPROC3_REMOVE(REMOVE3args)
        def handle_12(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_REMOVE3args()
            unpacker.done()
            res = self.NFSPROC3_REMOVE(p0)
            packer = pack.protPacker()
            packer.pack_REMOVE3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # RMDIR3res NFSPROC3_RMDIR(RMDIR3args)
        def handle_13(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_RMDIR3args()
            unpacker.done()
            res = self.NFSPROC3_RMDIR(p0)
            packer = pack.protPacker()
            packer.pack_RMDIR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # RENAME3res NFSPROC3_RENAME(RENAME3args)
        def handle_14(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_RENAME3args()
            unpacker.done()
            res = self.NFSPROC3_RENAME(p0)
            packer = pack.protPacker()
            packer.pack_RENAME3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # LINK3res NFSPROC3_LINK(LINK3args)
        def handle_15(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_LINK3args()
            unpacker.done()
            res = self.NFSPROC3_LINK(p0)
            packer = pack.protPacker()
            packer.pack_LINK3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READDIR3res NFSPROC3_READDIR(READDIR3args)
        def handle_16(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READDIR3args()
            unpacker.done()
            res = self.NFSPROC3_READDIR(p0)
            packer = pack.protPacker()
            packer.pack_READDIR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READDIRPLUS3res NFSPROC3_READDIRPLUS(READDIRPLUS3args)
        def handle_17(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READDIRPLUS3args()
            unpacker.done()
            res = self.NFSPROC3_READDIRPLUS(p0)
            packer = pack.protPacker()
            packer.pack_READDIRPLUS3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # FSSTAT3res NFSPROC3_FSSTAT(FSSTAT3args)
        def handle_18(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_FSSTAT3args()
            unpacker.done()
            res = self.NFSPROC3_FSSTAT(p0)
            packer = pack.protPacker()
            packer.pack_FSSTAT3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # FSINFO3res NFSPROC3_FSINFO(FSINFO3args)
        def handle_19(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_FSINFO3args()
            unpacker.done()
            res = self.NFSPROC3_FSINFO(p0)
            packer = pack.protPacker()
            packer.pack_FSINFO3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # PATHCONF3res NFSPROC3_PATHCONF(PATHCONF3args)
        def handle_20(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_PATHCONF3args()
            unpacker.done()
            res = self.NFSPROC3_PATHCONF(p0)
            packer = pack.protPacker()
            packer.pack_PATHCONF3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # COMMIT3res NFSPROC3_COMMIT(COMMIT3args)
        def handle_21(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_COMMIT3args()
            unpacker.done()
            res = self.NFSPROC3_COMMIT(p0)
            packer = pack.protPacker()
            packer.pack_COMMIT3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

    class UDPNFS_V3(rpc.UDPServer):
        def __init__(self, host, port, **kwargs):
            if 'prog' in kwargs or 'vers' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.UDPServer.__init__(self, prog=const.NFS_PROGRAM, vers=const.NFS_V3, host=host, port=port, **kwargs)

        # void NFSPROC3_NULL(void)
        def handle_0(self, packeddata):
            res = self.NFSPROC3_NULL()
            return (MSG_ACCEPTED, '')

        # GETATTR3res NFSPROC3_GETATTR(GETATTR3args)
        def handle_1(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_GETATTR3args()
            unpacker.done()
            res = self.NFSPROC3_GETATTR(p0)
            packer = pack.protPacker()
            packer.pack_GETATTR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # SETATTR3res NFSPROC3_SETATTR(SETATTR3args)
        def handle_2(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_SETATTR3args()
            unpacker.done()
            res = self.NFSPROC3_SETATTR(p0)
            packer = pack.protPacker()
            packer.pack_SETATTR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # LOOKUP3res NFSPROC3_LOOKUP(LOOKUP3args)
        def handle_3(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_LOOKUP3args()
            unpacker.done()
            res = self.NFSPROC3_LOOKUP(p0)
            packer = pack.protPacker()
            packer.pack_LOOKUP3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # ACCESS3res NFSPROC3_ACCESS(ACCESS3args)
        def handle_4(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_ACCESS3args()
            unpacker.done()
            res = self.NFSPROC3_ACCESS(p0)
            packer = pack.protPacker()
            packer.pack_ACCESS3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READLINK3res NFSPROC3_READLINK(READLINK3args)
        def handle_5(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READLINK3args()
            unpacker.done()
            res = self.NFSPROC3_READLINK(p0)
            packer = pack.protPacker()
            packer.pack_READLINK3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READ3res NFSPROC3_READ(READ3args)
        def handle_6(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READ3args()
            unpacker.done()
            res = self.NFSPROC3_READ(p0)
            packer = pack.protPacker()
            packer.pack_READ3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # WRITE3res NFSPROC3_WRITE(WRITE3args)
        def handle_7(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_WRITE3args()
            unpacker.done()
            res = self.NFSPROC3_WRITE(p0)
            packer = pack.protPacker()
            packer.pack_WRITE3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # CREATE3res NFSPROC3_CREATE(CREATE3args)
        def handle_8(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_CREATE3args()
            unpacker.done()
            res = self.NFSPROC3_CREATE(p0)
            packer = pack.protPacker()
            packer.pack_CREATE3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # MKDIR3res NFSPROC3_MKDIR(MKDIR3args)
        def handle_9(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_MKDIR3args()
            unpacker.done()
            res = self.NFSPROC3_MKDIR(p0)
            packer = pack.protPacker()
            packer.pack_MKDIR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # SYMLINK3res NFSPROC3_SYMLINK(SYMLINK3args)
        def handle_10(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_SYMLINK3args()
            unpacker.done()
            res = self.NFSPROC3_SYMLINK(p0)
            packer = pack.protPacker()
            packer.pack_SYMLINK3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # MKNOD3res NFSPROC3_MKNOD(MKNOD3args)
        def handle_11(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_MKNOD3args()
            unpacker.done()
            res = self.NFSPROC3_MKNOD(p0)
            packer = pack.protPacker()
            packer.pack_MKNOD3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # REMOVE3res NFSPROC3_REMOVE(REMOVE3args)
        def handle_12(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_REMOVE3args()
            unpacker.done()
            res = self.NFSPROC3_REMOVE(p0)
            packer = pack.protPacker()
            packer.pack_REMOVE3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # RMDIR3res NFSPROC3_RMDIR(RMDIR3args)
        def handle_13(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_RMDIR3args()
            unpacker.done()
            res = self.NFSPROC3_RMDIR(p0)
            packer = pack.protPacker()
            packer.pack_RMDIR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # RENAME3res NFSPROC3_RENAME(RENAME3args)
        def handle_14(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_RENAME3args()
            unpacker.done()
            res = self.NFSPROC3_RENAME(p0)
            packer = pack.protPacker()
            packer.pack_RENAME3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # LINK3res NFSPROC3_LINK(LINK3args)
        def handle_15(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_LINK3args()
            unpacker.done()
            res = self.NFSPROC3_LINK(p0)
            packer = pack.protPacker()
            packer.pack_LINK3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READDIR3res NFSPROC3_READDIR(READDIR3args)
        def handle_16(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READDIR3args()
            unpacker.done()
            res = self.NFSPROC3_READDIR(p0)
            packer = pack.protPacker()
            packer.pack_READDIR3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # READDIRPLUS3res NFSPROC3_READDIRPLUS(READDIRPLUS3args)
        def handle_17(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_READDIRPLUS3args()
            unpacker.done()
            res = self.NFSPROC3_READDIRPLUS(p0)
            packer = pack.protPacker()
            packer.pack_READDIRPLUS3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # FSSTAT3res NFSPROC3_FSSTAT(FSSTAT3args)
        def handle_18(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_FSSTAT3args()
            unpacker.done()
            res = self.NFSPROC3_FSSTAT(p0)
            packer = pack.protPacker()
            packer.pack_FSSTAT3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # FSINFO3res NFSPROC3_FSINFO(FSINFO3args)
        def handle_19(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_FSINFO3args()
            unpacker.done()
            res = self.NFSPROC3_FSINFO(p0)
            packer = pack.protPacker()
            packer.pack_FSINFO3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # PATHCONF3res NFSPROC3_PATHCONF(PATHCONF3args)
        def handle_20(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_PATHCONF3args()
            unpacker.done()
            res = self.NFSPROC3_PATHCONF(p0)
            packer = pack.protPacker()
            packer.pack_PATHCONF3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # COMMIT3res NFSPROC3_COMMIT(COMMIT3args)
        def handle_21(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_COMMIT3args()
            unpacker.done()
            res = self.NFSPROC3_COMMIT(p0)
            packer = pack.protPacker()
            packer.pack_COMMIT3res(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

    def __getitem__(self, key):
        d = {
              const.TCPNFS_V3 : 'TCPNFS_V3',
              const.UDPNFS_V3 : 'UDPNFS_V3'
            }
        return getattr(self, d[key])

NFS_PROGRAM = NFS_PROGRAM()

class MOUNT_PROGRAM(object):
    class TCPMOUNT_V3(rpc.TCPServer):
        def __init__(self, host, port, **kwargs):
            if 'prog' in kwargs or 'vers' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.TCPServer.__init__(self, prog=const.MOUNT_PROGRAM, vers=const.MOUNT_V3, host=host, port=port, **kwargs)

        # void MOUNTPROC3_NULL(void)
        def handle_0(self, packeddata):
            res = self.MOUNTPROC3_NULL()
            return (MSG_ACCEPTED, '')

        # mountres3 MOUNTPROC3_MNT(dirpath3)
        def handle_1(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_dirpath3()
            unpacker.done()
            res = self.MOUNTPROC3_MNT(p0)
            packer = pack.protPacker()
            packer.pack_mountres3(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # mountopt3 MOUNTPROC3_DUMP(void)
        def handle_2(self, packeddata):
            res = self.MOUNTPROC3_DUMP()
            packer = pack.protPacker()
            packer.pack_mountopt3(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # void MOUNTPROC3_UMNT(dirpath3)
        def handle_3(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_dirpath3()
            unpacker.done()
            res = self.MOUNTPROC3_UMNT(p0)
            return (MSG_ACCEPTED, '')

        # void MOUNTPROC3_UMNTALL(void)
        def handle_4(self, packeddata):
            res = self.MOUNTPROC3_UMNTALL()
            return (MSG_ACCEPTED, '')

        # exportsopt3 MOUNTPROC3_EXPORT(void)
        def handle_5(self, packeddata):
            res = self.MOUNTPROC3_EXPORT()
            packer = pack.protPacker()
            packer.pack_exportsopt3(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

    class UDPMOUNT_V3(rpc.UDPServer):
        def __init__(self, host, port, **kwargs):
            if 'prog' in kwargs or 'vers' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.UDPServer.__init__(self, prog=const.MOUNT_PROGRAM, vers=const.MOUNT_V3, host=host, port=port, **kwargs)

        # void MOUNTPROC3_NULL(void)
        def handle_0(self, packeddata):
            res = self.MOUNTPROC3_NULL()
            return (MSG_ACCEPTED, '')

        # mountres3 MOUNTPROC3_MNT(dirpath3)
        def handle_1(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_dirpath3()
            unpacker.done()
            res = self.MOUNTPROC3_MNT(p0)
            packer = pack.protPacker()
            packer.pack_mountres3(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # mountopt3 MOUNTPROC3_DUMP(void)
        def handle_2(self, packeddata):
            res = self.MOUNTPROC3_DUMP()
            packer = pack.protPacker()
            packer.pack_mountopt3(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # void MOUNTPROC3_UMNT(dirpath3)
        def handle_3(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_dirpath3()
            unpacker.done()
            res = self.MOUNTPROC3_UMNT(p0)
            return (MSG_ACCEPTED, '')

        # void MOUNTPROC3_UMNTALL(void)
        def handle_4(self, packeddata):
            res = self.MOUNTPROC3_UMNTALL()
            return (MSG_ACCEPTED, '')

        # exportsopt3 MOUNTPROC3_EXPORT(void)
        def handle_5(self, packeddata):
            res = self.MOUNTPROC3_EXPORT()
            packer = pack.protPacker()
            packer.pack_exportsopt3(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

    def __getitem__(self, key):
        d = {
              const.TCPMOUNT_V3 : 'TCPMOUNT_V3',
              const.UDPMOUNT_V3 : 'UDPMOUNT_V3'
            }
        return getattr(self, d[key])

MOUNT_PROGRAM = MOUNT_PROGRAM()

