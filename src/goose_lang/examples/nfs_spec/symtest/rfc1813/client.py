# Generated by rpcgen.py from /home/nickolai/proj/go-rpcgen/rfc1813/prot.x on Fri Dec  6 10:47:13 2019
import rpc
import const
import pack

class NFS_PROGRAM(object):
    class RawTCPNFS_V3(rpc.RawTCPClient):
        def __init__(self, host, port, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.RawTCPClient.__init__(self, host, port, program=const.NFS_PROGRAM, version=const.NFS_V3, **kwargs)

        # void NFSPROC3_NULL(void)
        def NFSPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # GETATTR3res NFSPROC3_GETATTR(GETATTR3args)
        def NFSPROC3_GETATTR(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_GETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_GETATTR3res()
            unpacker.done()
            return res

        # SETATTR3res NFSPROC3_SETATTR(SETATTR3args)
        def NFSPROC3_SETATTR(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_SETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SETATTR3res()
            unpacker.done()
            return res

        # LOOKUP3res NFSPROC3_LOOKUP(LOOKUP3args)
        def NFSPROC3_LOOKUP(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_LOOKUP3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LOOKUP3res()
            unpacker.done()
            return res

        # ACCESS3res NFSPROC3_ACCESS(ACCESS3args)
        def NFSPROC3_ACCESS(self, p0):
            procedure_id = 4
            packer = pack.protPacker()
            packer.pack_ACCESS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_ACCESS3res()
            unpacker.done()
            return res

        # READLINK3res NFSPROC3_READLINK(READLINK3args)
        def NFSPROC3_READLINK(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_READLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READLINK3res()
            unpacker.done()
            return res

        # READ3res NFSPROC3_READ(READ3args)
        def NFSPROC3_READ(self, p0):
            procedure_id = 6
            packer = pack.protPacker()
            packer.pack_READ3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READ3res()
            unpacker.done()
            return res

        # WRITE3res NFSPROC3_WRITE(WRITE3args)
        def NFSPROC3_WRITE(self, p0):
            procedure_id = 7
            packer = pack.protPacker()
            packer.pack_WRITE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_WRITE3res()
            unpacker.done()
            return res

        # CREATE3res NFSPROC3_CREATE(CREATE3args)
        def NFSPROC3_CREATE(self, p0):
            procedure_id = 8
            packer = pack.protPacker()
            packer.pack_CREATE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_CREATE3res()
            unpacker.done()
            return res

        # MKDIR3res NFSPROC3_MKDIR(MKDIR3args)
        def NFSPROC3_MKDIR(self, p0):
            procedure_id = 9
            packer = pack.protPacker()
            packer.pack_MKDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKDIR3res()
            unpacker.done()
            return res

        # SYMLINK3res NFSPROC3_SYMLINK(SYMLINK3args)
        def NFSPROC3_SYMLINK(self, p0):
            procedure_id = 10
            packer = pack.protPacker()
            packer.pack_SYMLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SYMLINK3res()
            unpacker.done()
            return res

        # MKNOD3res NFSPROC3_MKNOD(MKNOD3args)
        def NFSPROC3_MKNOD(self, p0):
            procedure_id = 11
            packer = pack.protPacker()
            packer.pack_MKNOD3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKNOD3res()
            unpacker.done()
            return res

        # REMOVE3res NFSPROC3_REMOVE(REMOVE3args)
        def NFSPROC3_REMOVE(self, p0):
            procedure_id = 12
            packer = pack.protPacker()
            packer.pack_REMOVE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_REMOVE3res()
            unpacker.done()
            return res

        # RMDIR3res NFSPROC3_RMDIR(RMDIR3args)
        def NFSPROC3_RMDIR(self, p0):
            procedure_id = 13
            packer = pack.protPacker()
            packer.pack_RMDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RMDIR3res()
            unpacker.done()
            return res

        # RENAME3res NFSPROC3_RENAME(RENAME3args)
        def NFSPROC3_RENAME(self, p0):
            procedure_id = 14
            packer = pack.protPacker()
            packer.pack_RENAME3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RENAME3res()
            unpacker.done()
            return res

        # LINK3res NFSPROC3_LINK(LINK3args)
        def NFSPROC3_LINK(self, p0):
            procedure_id = 15
            packer = pack.protPacker()
            packer.pack_LINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LINK3res()
            unpacker.done()
            return res

        # READDIR3res NFSPROC3_READDIR(READDIR3args)
        def NFSPROC3_READDIR(self, p0):
            procedure_id = 16
            packer = pack.protPacker()
            packer.pack_READDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIR3res()
            unpacker.done()
            return res

        # READDIRPLUS3res NFSPROC3_READDIRPLUS(READDIRPLUS3args)
        def NFSPROC3_READDIRPLUS(self, p0):
            procedure_id = 17
            packer = pack.protPacker()
            packer.pack_READDIRPLUS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIRPLUS3res()
            unpacker.done()
            return res

        # FSSTAT3res NFSPROC3_FSSTAT(FSSTAT3args)
        def NFSPROC3_FSSTAT(self, p0):
            procedure_id = 18
            packer = pack.protPacker()
            packer.pack_FSSTAT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSSTAT3res()
            unpacker.done()
            return res

        # FSINFO3res NFSPROC3_FSINFO(FSINFO3args)
        def NFSPROC3_FSINFO(self, p0):
            procedure_id = 19
            packer = pack.protPacker()
            packer.pack_FSINFO3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSINFO3res()
            unpacker.done()
            return res

        # PATHCONF3res NFSPROC3_PATHCONF(PATHCONF3args)
        def NFSPROC3_PATHCONF(self, p0):
            procedure_id = 20
            packer = pack.protPacker()
            packer.pack_PATHCONF3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_PATHCONF3res()
            unpacker.done()
            return res

        # COMMIT3res NFSPROC3_COMMIT(COMMIT3args)
        def NFSPROC3_COMMIT(self, p0):
            procedure_id = 21
            packer = pack.protPacker()
            packer.pack_COMMIT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_COMMIT3res()
            unpacker.done()
            return res

    class TCPNFS_V3(rpc.TCPClient):
        def __init__(self, host, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.TCPClient.__init__(self, host, program=const.NFS_PROGRAM, version=const.NFS_V3, **kwargs)

        # void NFSPROC3_NULL(void)
        def NFSPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # GETATTR3res NFSPROC3_GETATTR(GETATTR3args)
        def NFSPROC3_GETATTR(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_GETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_GETATTR3res()
            unpacker.done()
            return res

        # SETATTR3res NFSPROC3_SETATTR(SETATTR3args)
        def NFSPROC3_SETATTR(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_SETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SETATTR3res()
            unpacker.done()
            return res

        # LOOKUP3res NFSPROC3_LOOKUP(LOOKUP3args)
        def NFSPROC3_LOOKUP(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_LOOKUP3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LOOKUP3res()
            unpacker.done()
            return res

        # ACCESS3res NFSPROC3_ACCESS(ACCESS3args)
        def NFSPROC3_ACCESS(self, p0):
            procedure_id = 4
            packer = pack.protPacker()
            packer.pack_ACCESS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_ACCESS3res()
            unpacker.done()
            return res

        # READLINK3res NFSPROC3_READLINK(READLINK3args)
        def NFSPROC3_READLINK(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_READLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READLINK3res()
            unpacker.done()
            return res

        # READ3res NFSPROC3_READ(READ3args)
        def NFSPROC3_READ(self, p0):
            procedure_id = 6
            packer = pack.protPacker()
            packer.pack_READ3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READ3res()
            unpacker.done()
            return res

        # WRITE3res NFSPROC3_WRITE(WRITE3args)
        def NFSPROC3_WRITE(self, p0):
            procedure_id = 7
            packer = pack.protPacker()
            packer.pack_WRITE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_WRITE3res()
            unpacker.done()
            return res

        # CREATE3res NFSPROC3_CREATE(CREATE3args)
        def NFSPROC3_CREATE(self, p0):
            procedure_id = 8
            packer = pack.protPacker()
            packer.pack_CREATE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_CREATE3res()
            unpacker.done()
            return res

        # MKDIR3res NFSPROC3_MKDIR(MKDIR3args)
        def NFSPROC3_MKDIR(self, p0):
            procedure_id = 9
            packer = pack.protPacker()
            packer.pack_MKDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKDIR3res()
            unpacker.done()
            return res

        # SYMLINK3res NFSPROC3_SYMLINK(SYMLINK3args)
        def NFSPROC3_SYMLINK(self, p0):
            procedure_id = 10
            packer = pack.protPacker()
            packer.pack_SYMLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SYMLINK3res()
            unpacker.done()
            return res

        # MKNOD3res NFSPROC3_MKNOD(MKNOD3args)
        def NFSPROC3_MKNOD(self, p0):
            procedure_id = 11
            packer = pack.protPacker()
            packer.pack_MKNOD3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKNOD3res()
            unpacker.done()
            return res

        # REMOVE3res NFSPROC3_REMOVE(REMOVE3args)
        def NFSPROC3_REMOVE(self, p0):
            procedure_id = 12
            packer = pack.protPacker()
            packer.pack_REMOVE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_REMOVE3res()
            unpacker.done()
            return res

        # RMDIR3res NFSPROC3_RMDIR(RMDIR3args)
        def NFSPROC3_RMDIR(self, p0):
            procedure_id = 13
            packer = pack.protPacker()
            packer.pack_RMDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RMDIR3res()
            unpacker.done()
            return res

        # RENAME3res NFSPROC3_RENAME(RENAME3args)
        def NFSPROC3_RENAME(self, p0):
            procedure_id = 14
            packer = pack.protPacker()
            packer.pack_RENAME3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RENAME3res()
            unpacker.done()
            return res

        # LINK3res NFSPROC3_LINK(LINK3args)
        def NFSPROC3_LINK(self, p0):
            procedure_id = 15
            packer = pack.protPacker()
            packer.pack_LINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LINK3res()
            unpacker.done()
            return res

        # READDIR3res NFSPROC3_READDIR(READDIR3args)
        def NFSPROC3_READDIR(self, p0):
            procedure_id = 16
            packer = pack.protPacker()
            packer.pack_READDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIR3res()
            unpacker.done()
            return res

        # READDIRPLUS3res NFSPROC3_READDIRPLUS(READDIRPLUS3args)
        def NFSPROC3_READDIRPLUS(self, p0):
            procedure_id = 17
            packer = pack.protPacker()
            packer.pack_READDIRPLUS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIRPLUS3res()
            unpacker.done()
            return res

        # FSSTAT3res NFSPROC3_FSSTAT(FSSTAT3args)
        def NFSPROC3_FSSTAT(self, p0):
            procedure_id = 18
            packer = pack.protPacker()
            packer.pack_FSSTAT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSSTAT3res()
            unpacker.done()
            return res

        # FSINFO3res NFSPROC3_FSINFO(FSINFO3args)
        def NFSPROC3_FSINFO(self, p0):
            procedure_id = 19
            packer = pack.protPacker()
            packer.pack_FSINFO3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSINFO3res()
            unpacker.done()
            return res

        # PATHCONF3res NFSPROC3_PATHCONF(PATHCONF3args)
        def NFSPROC3_PATHCONF(self, p0):
            procedure_id = 20
            packer = pack.protPacker()
            packer.pack_PATHCONF3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_PATHCONF3res()
            unpacker.done()
            return res

        # COMMIT3res NFSPROC3_COMMIT(COMMIT3args)
        def NFSPROC3_COMMIT(self, p0):
            procedure_id = 21
            packer = pack.protPacker()
            packer.pack_COMMIT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_COMMIT3res()
            unpacker.done()
            return res

    class RawUDPNFS_V3(rpc.RawUDPClient):
        def __init__(self, host, port, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.RawUDPClient.__init__(self, host, port, program=const.NFS_PROGRAM, version=const.NFS_V3, **kwargs)

        # void NFSPROC3_NULL(void)
        def NFSPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # GETATTR3res NFSPROC3_GETATTR(GETATTR3args)
        def NFSPROC3_GETATTR(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_GETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_GETATTR3res()
            unpacker.done()
            return res

        # SETATTR3res NFSPROC3_SETATTR(SETATTR3args)
        def NFSPROC3_SETATTR(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_SETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SETATTR3res()
            unpacker.done()
            return res

        # LOOKUP3res NFSPROC3_LOOKUP(LOOKUP3args)
        def NFSPROC3_LOOKUP(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_LOOKUP3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LOOKUP3res()
            unpacker.done()
            return res

        # ACCESS3res NFSPROC3_ACCESS(ACCESS3args)
        def NFSPROC3_ACCESS(self, p0):
            procedure_id = 4
            packer = pack.protPacker()
            packer.pack_ACCESS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_ACCESS3res()
            unpacker.done()
            return res

        # READLINK3res NFSPROC3_READLINK(READLINK3args)
        def NFSPROC3_READLINK(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_READLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READLINK3res()
            unpacker.done()
            return res

        # READ3res NFSPROC3_READ(READ3args)
        def NFSPROC3_READ(self, p0):
            procedure_id = 6
            packer = pack.protPacker()
            packer.pack_READ3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READ3res()
            unpacker.done()
            return res

        # WRITE3res NFSPROC3_WRITE(WRITE3args)
        def NFSPROC3_WRITE(self, p0):
            procedure_id = 7
            packer = pack.protPacker()
            packer.pack_WRITE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_WRITE3res()
            unpacker.done()
            return res

        # CREATE3res NFSPROC3_CREATE(CREATE3args)
        def NFSPROC3_CREATE(self, p0):
            procedure_id = 8
            packer = pack.protPacker()
            packer.pack_CREATE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_CREATE3res()
            unpacker.done()
            return res

        # MKDIR3res NFSPROC3_MKDIR(MKDIR3args)
        def NFSPROC3_MKDIR(self, p0):
            procedure_id = 9
            packer = pack.protPacker()
            packer.pack_MKDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKDIR3res()
            unpacker.done()
            return res

        # SYMLINK3res NFSPROC3_SYMLINK(SYMLINK3args)
        def NFSPROC3_SYMLINK(self, p0):
            procedure_id = 10
            packer = pack.protPacker()
            packer.pack_SYMLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SYMLINK3res()
            unpacker.done()
            return res

        # MKNOD3res NFSPROC3_MKNOD(MKNOD3args)
        def NFSPROC3_MKNOD(self, p0):
            procedure_id = 11
            packer = pack.protPacker()
            packer.pack_MKNOD3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKNOD3res()
            unpacker.done()
            return res

        # REMOVE3res NFSPROC3_REMOVE(REMOVE3args)
        def NFSPROC3_REMOVE(self, p0):
            procedure_id = 12
            packer = pack.protPacker()
            packer.pack_REMOVE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_REMOVE3res()
            unpacker.done()
            return res

        # RMDIR3res NFSPROC3_RMDIR(RMDIR3args)
        def NFSPROC3_RMDIR(self, p0):
            procedure_id = 13
            packer = pack.protPacker()
            packer.pack_RMDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RMDIR3res()
            unpacker.done()
            return res

        # RENAME3res NFSPROC3_RENAME(RENAME3args)
        def NFSPROC3_RENAME(self, p0):
            procedure_id = 14
            packer = pack.protPacker()
            packer.pack_RENAME3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RENAME3res()
            unpacker.done()
            return res

        # LINK3res NFSPROC3_LINK(LINK3args)
        def NFSPROC3_LINK(self, p0):
            procedure_id = 15
            packer = pack.protPacker()
            packer.pack_LINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LINK3res()
            unpacker.done()
            return res

        # READDIR3res NFSPROC3_READDIR(READDIR3args)
        def NFSPROC3_READDIR(self, p0):
            procedure_id = 16
            packer = pack.protPacker()
            packer.pack_READDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIR3res()
            unpacker.done()
            return res

        # READDIRPLUS3res NFSPROC3_READDIRPLUS(READDIRPLUS3args)
        def NFSPROC3_READDIRPLUS(self, p0):
            procedure_id = 17
            packer = pack.protPacker()
            packer.pack_READDIRPLUS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIRPLUS3res()
            unpacker.done()
            return res

        # FSSTAT3res NFSPROC3_FSSTAT(FSSTAT3args)
        def NFSPROC3_FSSTAT(self, p0):
            procedure_id = 18
            packer = pack.protPacker()
            packer.pack_FSSTAT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSSTAT3res()
            unpacker.done()
            return res

        # FSINFO3res NFSPROC3_FSINFO(FSINFO3args)
        def NFSPROC3_FSINFO(self, p0):
            procedure_id = 19
            packer = pack.protPacker()
            packer.pack_FSINFO3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSINFO3res()
            unpacker.done()
            return res

        # PATHCONF3res NFSPROC3_PATHCONF(PATHCONF3args)
        def NFSPROC3_PATHCONF(self, p0):
            procedure_id = 20
            packer = pack.protPacker()
            packer.pack_PATHCONF3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_PATHCONF3res()
            unpacker.done()
            return res

        # COMMIT3res NFSPROC3_COMMIT(COMMIT3args)
        def NFSPROC3_COMMIT(self, p0):
            procedure_id = 21
            packer = pack.protPacker()
            packer.pack_COMMIT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_COMMIT3res()
            unpacker.done()
            return res

    class UDPNFS_V3(rpc.UDPClient):
        def __init__(self, host, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.UDPClient.__init__(self, host, program=const.NFS_PROGRAM, version=const.NFS_V3, **kwargs)

        # void NFSPROC3_NULL(void)
        def NFSPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # GETATTR3res NFSPROC3_GETATTR(GETATTR3args)
        def NFSPROC3_GETATTR(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_GETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_GETATTR3res()
            unpacker.done()
            return res

        # SETATTR3res NFSPROC3_SETATTR(SETATTR3args)
        def NFSPROC3_SETATTR(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_SETATTR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SETATTR3res()
            unpacker.done()
            return res

        # LOOKUP3res NFSPROC3_LOOKUP(LOOKUP3args)
        def NFSPROC3_LOOKUP(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_LOOKUP3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LOOKUP3res()
            unpacker.done()
            return res

        # ACCESS3res NFSPROC3_ACCESS(ACCESS3args)
        def NFSPROC3_ACCESS(self, p0):
            procedure_id = 4
            packer = pack.protPacker()
            packer.pack_ACCESS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_ACCESS3res()
            unpacker.done()
            return res

        # READLINK3res NFSPROC3_READLINK(READLINK3args)
        def NFSPROC3_READLINK(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_READLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READLINK3res()
            unpacker.done()
            return res

        # READ3res NFSPROC3_READ(READ3args)
        def NFSPROC3_READ(self, p0):
            procedure_id = 6
            packer = pack.protPacker()
            packer.pack_READ3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READ3res()
            unpacker.done()
            return res

        # WRITE3res NFSPROC3_WRITE(WRITE3args)
        def NFSPROC3_WRITE(self, p0):
            procedure_id = 7
            packer = pack.protPacker()
            packer.pack_WRITE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_WRITE3res()
            unpacker.done()
            return res

        # CREATE3res NFSPROC3_CREATE(CREATE3args)
        def NFSPROC3_CREATE(self, p0):
            procedure_id = 8
            packer = pack.protPacker()
            packer.pack_CREATE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_CREATE3res()
            unpacker.done()
            return res

        # MKDIR3res NFSPROC3_MKDIR(MKDIR3args)
        def NFSPROC3_MKDIR(self, p0):
            procedure_id = 9
            packer = pack.protPacker()
            packer.pack_MKDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKDIR3res()
            unpacker.done()
            return res

        # SYMLINK3res NFSPROC3_SYMLINK(SYMLINK3args)
        def NFSPROC3_SYMLINK(self, p0):
            procedure_id = 10
            packer = pack.protPacker()
            packer.pack_SYMLINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_SYMLINK3res()
            unpacker.done()
            return res

        # MKNOD3res NFSPROC3_MKNOD(MKNOD3args)
        def NFSPROC3_MKNOD(self, p0):
            procedure_id = 11
            packer = pack.protPacker()
            packer.pack_MKNOD3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_MKNOD3res()
            unpacker.done()
            return res

        # REMOVE3res NFSPROC3_REMOVE(REMOVE3args)
        def NFSPROC3_REMOVE(self, p0):
            procedure_id = 12
            packer = pack.protPacker()
            packer.pack_REMOVE3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_REMOVE3res()
            unpacker.done()
            return res

        # RMDIR3res NFSPROC3_RMDIR(RMDIR3args)
        def NFSPROC3_RMDIR(self, p0):
            procedure_id = 13
            packer = pack.protPacker()
            packer.pack_RMDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RMDIR3res()
            unpacker.done()
            return res

        # RENAME3res NFSPROC3_RENAME(RENAME3args)
        def NFSPROC3_RENAME(self, p0):
            procedure_id = 14
            packer = pack.protPacker()
            packer.pack_RENAME3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_RENAME3res()
            unpacker.done()
            return res

        # LINK3res NFSPROC3_LINK(LINK3args)
        def NFSPROC3_LINK(self, p0):
            procedure_id = 15
            packer = pack.protPacker()
            packer.pack_LINK3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_LINK3res()
            unpacker.done()
            return res

        # READDIR3res NFSPROC3_READDIR(READDIR3args)
        def NFSPROC3_READDIR(self, p0):
            procedure_id = 16
            packer = pack.protPacker()
            packer.pack_READDIR3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIR3res()
            unpacker.done()
            return res

        # READDIRPLUS3res NFSPROC3_READDIRPLUS(READDIRPLUS3args)
        def NFSPROC3_READDIRPLUS(self, p0):
            procedure_id = 17
            packer = pack.protPacker()
            packer.pack_READDIRPLUS3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_READDIRPLUS3res()
            unpacker.done()
            return res

        # FSSTAT3res NFSPROC3_FSSTAT(FSSTAT3args)
        def NFSPROC3_FSSTAT(self, p0):
            procedure_id = 18
            packer = pack.protPacker()
            packer.pack_FSSTAT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSSTAT3res()
            unpacker.done()
            return res

        # FSINFO3res NFSPROC3_FSINFO(FSINFO3args)
        def NFSPROC3_FSINFO(self, p0):
            procedure_id = 19
            packer = pack.protPacker()
            packer.pack_FSINFO3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_FSINFO3res()
            unpacker.done()
            return res

        # PATHCONF3res NFSPROC3_PATHCONF(PATHCONF3args)
        def NFSPROC3_PATHCONF(self, p0):
            procedure_id = 20
            packer = pack.protPacker()
            packer.pack_PATHCONF3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_PATHCONF3res()
            unpacker.done()
            return res

        # COMMIT3res NFSPROC3_COMMIT(COMMIT3args)
        def NFSPROC3_COMMIT(self, p0):
            procedure_id = 21
            packer = pack.protPacker()
            packer.pack_COMMIT3args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_COMMIT3res()
            unpacker.done()
            return res

    def __getitem__(self, key):
        d = {
              const.RawTCPNFS_V3 : 'RawTCPNFS_V3',
              const.TCPNFS_V3 : 'TCPNFS_V3',
              const.RawUDPNFS_V3 : 'RawUDPNFS_V3',
              const.UDPNFS_V3 : 'UDPNFS_V3'
            }
        return getattr(self, d[key])

NFS_PROGRAM = NFS_PROGRAM()

class MOUNT_PROGRAM(object):
    class RawTCPMOUNT_V3(rpc.RawTCPClient):
        def __init__(self, host, port, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.RawTCPClient.__init__(self, host, port, program=const.MOUNT_PROGRAM, version=const.MOUNT_V3, **kwargs)

        # void MOUNTPROC3_NULL(void)
        def MOUNTPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # mountres3 MOUNTPROC3_MNT(dirpath3)
        def MOUNTPROC3_MNT(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountres3()
            unpacker.done()
            return res

        # mountopt3 MOUNTPROC3_DUMP(void)
        def MOUNTPROC3_DUMP(self):
            procedure_id = 2
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountopt3()
            unpacker.done()
            return res

        # void MOUNTPROC3_UMNT(dirpath3)
        def MOUNTPROC3_UMNT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            self.call(procedure_id, packer.get_buffer())
            return None

        # void MOUNTPROC3_UMNTALL(void)
        def MOUNTPROC3_UMNTALL(self):
            procedure_id = 4
            self.call(procedure_id, '')
            return None

        # exportsopt3 MOUNTPROC3_EXPORT(void)
        def MOUNTPROC3_EXPORT(self):
            procedure_id = 5
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_exportsopt3()
            unpacker.done()
            return res

    class TCPMOUNT_V3(rpc.TCPClient):
        def __init__(self, host, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.TCPClient.__init__(self, host, program=const.MOUNT_PROGRAM, version=const.MOUNT_V3, **kwargs)

        # void MOUNTPROC3_NULL(void)
        def MOUNTPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # mountres3 MOUNTPROC3_MNT(dirpath3)
        def MOUNTPROC3_MNT(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountres3()
            unpacker.done()
            return res

        # mountopt3 MOUNTPROC3_DUMP(void)
        def MOUNTPROC3_DUMP(self):
            procedure_id = 2
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountopt3()
            unpacker.done()
            return res

        # void MOUNTPROC3_UMNT(dirpath3)
        def MOUNTPROC3_UMNT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            self.call(procedure_id, packer.get_buffer())
            return None

        # void MOUNTPROC3_UMNTALL(void)
        def MOUNTPROC3_UMNTALL(self):
            procedure_id = 4
            self.call(procedure_id, '')
            return None

        # exportsopt3 MOUNTPROC3_EXPORT(void)
        def MOUNTPROC3_EXPORT(self):
            procedure_id = 5
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_exportsopt3()
            unpacker.done()
            return res

    class RawUDPMOUNT_V3(rpc.RawUDPClient):
        def __init__(self, host, port, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.RawUDPClient.__init__(self, host, port, program=const.MOUNT_PROGRAM, version=const.MOUNT_V3, **kwargs)

        # void MOUNTPROC3_NULL(void)
        def MOUNTPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # mountres3 MOUNTPROC3_MNT(dirpath3)
        def MOUNTPROC3_MNT(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountres3()
            unpacker.done()
            return res

        # mountopt3 MOUNTPROC3_DUMP(void)
        def MOUNTPROC3_DUMP(self):
            procedure_id = 2
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountopt3()
            unpacker.done()
            return res

        # void MOUNTPROC3_UMNT(dirpath3)
        def MOUNTPROC3_UMNT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            self.call(procedure_id, packer.get_buffer())
            return None

        # void MOUNTPROC3_UMNTALL(void)
        def MOUNTPROC3_UMNTALL(self):
            procedure_id = 4
            self.call(procedure_id, '')
            return None

        # exportsopt3 MOUNTPROC3_EXPORT(void)
        def MOUNTPROC3_EXPORT(self):
            procedure_id = 5
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_exportsopt3()
            unpacker.done()
            return res

    class UDPMOUNT_V3(rpc.UDPClient):
        def __init__(self, host, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.UDPClient.__init__(self, host, program=const.MOUNT_PROGRAM, version=const.MOUNT_V3, **kwargs)

        # void MOUNTPROC3_NULL(void)
        def MOUNTPROC3_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # mountres3 MOUNTPROC3_MNT(dirpath3)
        def MOUNTPROC3_MNT(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountres3()
            unpacker.done()
            return res

        # mountopt3 MOUNTPROC3_DUMP(void)
        def MOUNTPROC3_DUMP(self):
            procedure_id = 2
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_mountopt3()
            unpacker.done()
            return res

        # void MOUNTPROC3_UMNT(dirpath3)
        def MOUNTPROC3_UMNT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_dirpath3(p0)
            self.call(procedure_id, packer.get_buffer())
            return None

        # void MOUNTPROC3_UMNTALL(void)
        def MOUNTPROC3_UMNTALL(self):
            procedure_id = 4
            self.call(procedure_id, '')
            return None

        # exportsopt3 MOUNTPROC3_EXPORT(void)
        def MOUNTPROC3_EXPORT(self):
            procedure_id = 5
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_exportsopt3()
            unpacker.done()
            return res

    def __getitem__(self, key):
        d = {
              const.RawTCPMOUNT_V3 : 'RawTCPMOUNT_V3',
              const.TCPMOUNT_V3 : 'TCPMOUNT_V3',
              const.RawUDPMOUNT_V3 : 'RawUDPMOUNT_V3',
              const.UDPMOUNT_V3 : 'UDPMOUNT_V3'
            }
        return getattr(self, d[key])

MOUNT_PROGRAM = MOUNT_PROGRAM()

