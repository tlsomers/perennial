# Generated by rpcgen.py from /home/nickolai/proj/go-rpcgen/rfc1057/prot.x on Fri Dec  6 10:47:00 2019
import rpc
import const
import pack
from rpc.rpc_const import *

class PMAP_PROG(object):
    class TCPPMAP_VERS(rpc.TCPServer):
        def __init__(self, host, port, **kwargs):
            if 'prog' in kwargs or 'vers' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.TCPServer.__init__(self, prog=const.PMAP_PROG, vers=const.PMAP_VERS, host=host, port=port, **kwargs)

        # void PMAPPROC_NULL(void)
        def handle_0(self, packeddata):
            res = self.PMAPPROC_NULL()
            return (MSG_ACCEPTED, '')

        # xbool PMAPPROC_SET(mapping)
        def handle_1(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_mapping()
            unpacker.done()
            res = self.PMAPPROC_SET(p0)
            packer = pack.protPacker()
            packer.pack_xbool(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # xbool PMAPPROC_UNSET(mapping)
        def handle_2(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_mapping()
            unpacker.done()
            res = self.PMAPPROC_UNSET(p0)
            packer = pack.protPacker()
            packer.pack_xbool(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # uint32 PMAPPROC_GETPORT(mapping)
        def handle_3(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_mapping()
            unpacker.done()
            res = self.PMAPPROC_GETPORT(p0)
            packer = pack.protPacker()
            packer.pack_uint32(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # pmaplist PMAPPROC_DUMP(void)
        def handle_4(self, packeddata):
            res = self.PMAPPROC_DUMP()
            packer = pack.protPacker()
            packer.pack_pmaplist(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # call_result PMAPPROC_CALLIT(call_args)
        def handle_5(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_call_args()
            unpacker.done()
            res = self.PMAPPROC_CALLIT(p0)
            packer = pack.protPacker()
            packer.pack_call_result(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

    class UDPPMAP_VERS(rpc.UDPServer):
        def __init__(self, host, port, **kwargs):
            if 'prog' in kwargs or 'vers' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.UDPServer.__init__(self, prog=const.PMAP_PROG, vers=const.PMAP_VERS, host=host, port=port, **kwargs)

        # void PMAPPROC_NULL(void)
        def handle_0(self, packeddata):
            res = self.PMAPPROC_NULL()
            return (MSG_ACCEPTED, '')

        # xbool PMAPPROC_SET(mapping)
        def handle_1(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_mapping()
            unpacker.done()
            res = self.PMAPPROC_SET(p0)
            packer = pack.protPacker()
            packer.pack_xbool(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # xbool PMAPPROC_UNSET(mapping)
        def handle_2(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_mapping()
            unpacker.done()
            res = self.PMAPPROC_UNSET(p0)
            packer = pack.protPacker()
            packer.pack_xbool(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # uint32 PMAPPROC_GETPORT(mapping)
        def handle_3(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_mapping()
            unpacker.done()
            res = self.PMAPPROC_GETPORT(p0)
            packer = pack.protPacker()
            packer.pack_uint32(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # pmaplist PMAPPROC_DUMP(void)
        def handle_4(self, packeddata):
            res = self.PMAPPROC_DUMP()
            packer = pack.protPacker()
            packer.pack_pmaplist(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

        # call_result PMAPPROC_CALLIT(call_args)
        def handle_5(self, packeddata):
            unpacker = pack.protUnpacker(packeddata)
            p0 = unpacker.unpack_call_args()
            unpacker.done()
            res = self.PMAPPROC_CALLIT(p0)
            packer = pack.protPacker()
            packer.pack_call_result(res)
            res = packer.get_buffer()
            return (MSG_ACCEPTED, res)

    def __getitem__(self, key):
        d = {
              const.TCPPMAP_VERS : 'TCPPMAP_VERS',
              const.UDPPMAP_VERS : 'UDPPMAP_VERS'
            }
        return getattr(self, d[key])

PMAP_PROG = PMAP_PROG()

