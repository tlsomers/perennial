# Generated by rpcgen.py from /home/nickolai/proj/go-rpcgen/rfc1057/prot.x on Fri Dec  6 10:47:00 2019
import const
class opaque_auth:
    # XDR definition:
    # struct opaque_auth {
    #     auth_flavor flavor;
    #     opaque body<400>;
    # };
    def __init__(self, flavor=None, body=None):
        self.flavor = flavor
        self.body = body

    def __repr__(self):
        out = []
        if self.flavor is not None:
            out += ['flavor=%s' % const.auth_flavor.get(self.flavor, self.flavor)]
        if self.body is not None:
            out += ['body=%s' % repr(self.body)]
        return 'opaque_auth(%s)' % ', '.join(out)

class rpc_msg:
    # XDR definition:
    # struct rpc_msg {
    #     uint xid;
    #     union switch(msg_type mtype) {
    #         case CALL:
    #             call_body cbody;
    #         case REPLY:
    #             reply_body rbody;
    #     } body;
    # };
    def __init__(self, xid=None, body=None):
        self.xid = xid
        self.body = body

    def __repr__(self):
        out = []
        if self.xid is not None:
            out += ['xid=%s' % repr(self.xid)]
        if self.body is not None:
            out += ['body=%s' % repr(self.body)]
        return 'rpc_msg(%s)' % ', '.join(out)

class call_body:
    # XDR definition:
    # struct call_body {
    #     uint rpcvers;
    #     uint prog;
    #     uint vers;
    #     uint proc;
    #     opaque_auth cred;
    #     opaque_auth verf;
    # };
    def __init__(self, rpcvers=None, prog=None, vers=None, proc=None, cred=None, verf=None):
        self.rpcvers = rpcvers
        self.prog = prog
        self.vers = vers
        self.proc = proc
        self.cred = cred
        self.verf = verf

    def __repr__(self):
        out = []
        if self.rpcvers is not None:
            out += ['rpcvers=%s' % repr(self.rpcvers)]
        if self.prog is not None:
            out += ['prog=%s' % repr(self.prog)]
        if self.vers is not None:
            out += ['vers=%s' % repr(self.vers)]
        if self.proc is not None:
            out += ['proc=%s' % repr(self.proc)]
        if self.cred is not None:
            out += ['cred=%s' % repr(self.cred)]
        if self.verf is not None:
            out += ['verf=%s' % repr(self.verf)]
        return 'call_body(%s)' % ', '.join(out)

class reply_body:
    # XDR definition:
    # union reply_body switch(reply_stat stat) {
    #     case MSG_ACCEPTED:
    #         accepted_reply areply;
    #     case MSG_DENIED:
    #         rejected_reply rreply;
    # };
    def __init__(self, stat=None, areply=None, rreply=None):
        self.stat = stat
        self.areply = areply
        self.rreply = rreply

    def __repr__(self):
        out = []
        if self.stat is not None:
            out += ['stat=%s' % const.reply_stat.get(self.stat, self.stat)]
        if self.areply is not None:
            out += ['areply=%s' % repr(self.areply)]
        if self.rreply is not None:
            out += ['rreply=%s' % repr(self.rreply)]
        return 'reply_body(%s)' % ', '.join(out)

class accepted_reply:
    # XDR definition:
    # struct accepted_reply {
    #     opaque_auth verf;
    #     union switch(accept_stat stat) {
    #         case SUCCESS:
    #             opaque results[0];
    #         case PROG_MISMATCH:
    #             struct {
    #                 uint low;
    #                 uint high;
    #             } mismatch_info;
    #         default:
    #             void;
    #     } reply_data;
    # };
    def __init__(self, verf=None, reply_data=None):
        self.verf = verf
        self.reply_data = reply_data

    def __repr__(self):
        out = []
        if self.verf is not None:
            out += ['verf=%s' % repr(self.verf)]
        if self.reply_data is not None:
            out += ['reply_data=%s' % repr(self.reply_data)]
        return 'accepted_reply(%s)' % ', '.join(out)

class rejected_reply:
    # XDR definition:
    # union rejected_reply switch(reject_stat stat) {
    #     case RPC_MISMATCH:
    #         struct {
    #             uint low;
    #             uint high;
    #         } mismatch_info;
    #     case AUTH_ERROR:
    #         auth_stat astat;
    # };
    def __init__(self, stat=None, mismatch_info=None, astat=None):
        self.stat = stat
        self.mismatch_info = mismatch_info
        self.astat = astat

    def __repr__(self):
        out = []
        if self.stat is not None:
            out += ['stat=%s' % const.reject_stat.get(self.stat, self.stat)]
        if self.mismatch_info is not None:
            out += ['mismatch_info=%s' % repr(self.mismatch_info)]
        if self.astat is not None:
            out += ['astat=%s' % const.auth_stat.get(self.astat, self.astat)]
        return 'rejected_reply(%s)' % ', '.join(out)

class auth_unix:
    # XDR definition:
    # struct auth_unix {
    #     uint stamp;
    #     string machinename<255>;
    #     uint uid;
    #     uint gid;
    #     uint gids<16>;
    # };
    def __init__(self, stamp=None, machinename=None, uid=None, gid=None, gids=None):
        self.stamp = stamp
        self.machinename = machinename
        self.uid = uid
        self.gid = gid
        self.gids = gids

    def __repr__(self):
        out = []
        if self.stamp is not None:
            out += ['stamp=%s' % repr(self.stamp)]
        if self.machinename is not None:
            out += ['machinename=%s' % repr(self.machinename)]
        if self.uid is not None:
            out += ['uid=%s' % repr(self.uid)]
        if self.gid is not None:
            out += ['gid=%s' % repr(self.gid)]
        if self.gids is not None:
            out += ['gids=%s' % repr(self.gids)]
        return 'auth_unix(%s)' % ', '.join(out)

class mapping:
    # XDR definition:
    # struct mapping {
    #     uint prog;
    #     uint vers;
    #     uint prot;
    #     uint port;
    # };
    def __init__(self, prog=None, vers=None, prot=None, port=None):
        self.prog = prog
        self.vers = vers
        self.prot = prot
        self.port = port

    def __repr__(self):
        out = []
        if self.prog is not None:
            out += ['prog=%s' % repr(self.prog)]
        if self.vers is not None:
            out += ['vers=%s' % repr(self.vers)]
        if self.prot is not None:
            out += ['prot=%s' % repr(self.prot)]
        if self.port is not None:
            out += ['port=%s' % repr(self.port)]
        return 'mapping(%s)' % ', '.join(out)

class pmaplistelem:
    # XDR definition:
    # struct pmaplistelem {
    #     mapping map;
    #     pmaplist next;
    # };
    def __init__(self, map=None, next=None):
        self.map = map
        self.next = next

    def __repr__(self):
        out = []
        if self.map is not None:
            out += ['map=%s' % repr(self.map)]
        if self.next is not None:
            out += ['next=%s' % repr(self.next)]
        return 'pmaplistelem(%s)' % ', '.join(out)

class call_args:
    # XDR definition:
    # struct call_args {
    #     uint prog;
    #     uint vers;
    #     uint proc;
    #     opaque args<>;
    # };
    def __init__(self, prog=None, vers=None, proc=None, args=None):
        self.prog = prog
        self.vers = vers
        self.proc = proc
        self.args = args

    def __repr__(self):
        out = []
        if self.prog is not None:
            out += ['prog=%s' % repr(self.prog)]
        if self.vers is not None:
            out += ['vers=%s' % repr(self.vers)]
        if self.proc is not None:
            out += ['proc=%s' % repr(self.proc)]
        if self.args is not None:
            out += ['args=%s' % repr(self.args)]
        return 'call_args(%s)' % ', '.join(out)

class call_result:
    # XDR definition:
    # struct call_result {
    #     uint port;
    #     opaque res<>;
    # };
    def __init__(self, port=None, res=None):
        self.port = port
        self.res = res

    def __repr__(self):
        out = []
        if self.port is not None:
            out += ['port=%s' % repr(self.port)]
        if self.res is not None:
            out += ['res=%s' % repr(self.res)]
        return 'call_result(%s)' % ', '.join(out)

