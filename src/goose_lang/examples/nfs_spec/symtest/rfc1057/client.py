# Generated by rpcgen.py from /home/nickolai/proj/go-rpcgen/rfc1057/prot.x on Fri Dec  6 10:47:00 2019
import rpc
import const
import pack

class PMAP_PROG(object):
    class RawTCPPMAP_VERS(rpc.RawTCPClient):
        def __init__(self, host, port, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.RawTCPClient.__init__(self, host, port, program=const.PMAP_PROG, version=const.PMAP_VERS, **kwargs)

        # void PMAPPROC_NULL(void)
        def PMAPPROC_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # xbool PMAPPROC_SET(mapping)
        def PMAPPROC_SET(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # xbool PMAPPROC_UNSET(mapping)
        def PMAPPROC_UNSET(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # uint32 PMAPPROC_GETPORT(mapping)
        def PMAPPROC_GETPORT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_uint32()
            unpacker.done()
            return res

        # pmaplist PMAPPROC_DUMP(void)
        def PMAPPROC_DUMP(self):
            procedure_id = 4
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_pmaplist()
            unpacker.done()
            return res

        # call_result PMAPPROC_CALLIT(call_args)
        def PMAPPROC_CALLIT(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_call_args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_call_result()
            unpacker.done()
            return res

    class TCPPMAP_VERS(rpc.TCPClient):
        def __init__(self, host, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.TCPClient.__init__(self, host, program=const.PMAP_PROG, version=const.PMAP_VERS, **kwargs)

        # void PMAPPROC_NULL(void)
        def PMAPPROC_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # xbool PMAPPROC_SET(mapping)
        def PMAPPROC_SET(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # xbool PMAPPROC_UNSET(mapping)
        def PMAPPROC_UNSET(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # uint32 PMAPPROC_GETPORT(mapping)
        def PMAPPROC_GETPORT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_uint32()
            unpacker.done()
            return res

        # pmaplist PMAPPROC_DUMP(void)
        def PMAPPROC_DUMP(self):
            procedure_id = 4
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_pmaplist()
            unpacker.done()
            return res

        # call_result PMAPPROC_CALLIT(call_args)
        def PMAPPROC_CALLIT(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_call_args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_call_result()
            unpacker.done()
            return res

    class RawUDPPMAP_VERS(rpc.RawUDPClient):
        def __init__(self, host, port, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.RawUDPClient.__init__(self, host, port, program=const.PMAP_PROG, version=const.PMAP_VERS, **kwargs)

        # void PMAPPROC_NULL(void)
        def PMAPPROC_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # xbool PMAPPROC_SET(mapping)
        def PMAPPROC_SET(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # xbool PMAPPROC_UNSET(mapping)
        def PMAPPROC_UNSET(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # uint32 PMAPPROC_GETPORT(mapping)
        def PMAPPROC_GETPORT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_uint32()
            unpacker.done()
            return res

        # pmaplist PMAPPROC_DUMP(void)
        def PMAPPROC_DUMP(self):
            procedure_id = 4
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_pmaplist()
            unpacker.done()
            return res

        # call_result PMAPPROC_CALLIT(call_args)
        def PMAPPROC_CALLIT(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_call_args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_call_result()
            unpacker.done()
            return res

    class UDPPMAP_VERS(rpc.UDPClient):
        def __init__(self, host, **kwargs):
            if 'program' in kwargs or 'version' in kwargs:
                raise TypeError('Unexpected keyword argument')
            rpc.UDPClient.__init__(self, host, program=const.PMAP_PROG, version=const.PMAP_VERS, **kwargs)

        # void PMAPPROC_NULL(void)
        def PMAPPROC_NULL(self):
            procedure_id = 0
            self.call(procedure_id, '')
            return None

        # xbool PMAPPROC_SET(mapping)
        def PMAPPROC_SET(self, p0):
            procedure_id = 1
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # xbool PMAPPROC_UNSET(mapping)
        def PMAPPROC_UNSET(self, p0):
            procedure_id = 2
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_xbool()
            unpacker.done()
            return res

        # uint32 PMAPPROC_GETPORT(mapping)
        def PMAPPROC_GETPORT(self, p0):
            procedure_id = 3
            packer = pack.protPacker()
            packer.pack_mapping(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_uint32()
            unpacker.done()
            return res

        # pmaplist PMAPPROC_DUMP(void)
        def PMAPPROC_DUMP(self):
            procedure_id = 4
            res = self.call(procedure_id, '')
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_pmaplist()
            unpacker.done()
            return res

        # call_result PMAPPROC_CALLIT(call_args)
        def PMAPPROC_CALLIT(self, p0):
            procedure_id = 5
            packer = pack.protPacker()
            packer.pack_call_args(p0)
            res = self.call(procedure_id, packer.get_buffer())
            unpacker = pack.protUnpacker(res)
            res = unpacker.unpack_call_result()
            unpacker.done()
            return res

    def __getitem__(self, key):
        d = {
              const.RawTCPPMAP_VERS : 'RawTCPPMAP_VERS',
              const.TCPPMAP_VERS : 'TCPPMAP_VERS',
              const.RawUDPPMAP_VERS : 'RawUDPPMAP_VERS',
              const.UDPPMAP_VERS : 'UDPPMAP_VERS'
            }
        return getattr(self, d[key])

PMAP_PROG = PMAP_PROG()

