= Idea behind epoch ctr server
There's a normal spec for a kv server, with Put/Get ops.
That spec involves the client having owning part of the kv pairs, and being able
to do whatever they want with it.

The per-epoch key-value pair is owned by some front-end server.
For as long as that epoch is the latest for that key, the front-end server can
do whatever it wants as though it's a client of a normal ctr server.

Here are the differences:
at the beginning of an epoch, we don't know what the kv pair's value is. At the
beginning of time in a normal ctr server, we might know the value is some
default (e.g. 0).

We might have wanted to say "if the server's current epoch number is e, then the
epoch points-to for e is equal to the real points-to". If a client gets an epoch
points-to from the config server, this can't work. Instead, we need to
distinguish "the client owns epoch e" and "the client owns epoch e, and knows
the kv pair as of epoch e has value v".

=
Two logical cases of epoch-based ctr.Get():
1. want to do a Get() for a client, and want to match up end-user half points-to
   with server half points-to.
2. want to do a Get() just to get the latest value (as long as epoch is not
   expired).

There's a kv_ptsto_epoch and there's a kv_ptsto.
When doing a Get(), sometimes I might just want to only use the kv_ptsto_epoch.
Other times, I might want to also fire a fupd against the kv_ptsto.

That means I'm gonna have two different specs.... Feels a bit odd.

= 2022-03-24 notes
My planned specs for ctr involve both epoch kv points-tos *and* the
client-facing kv points-to.

An alternative would be for the ctr server to *only* know about the per-epoch kv
points-to, and leave it to the user to relate it to something else. We'll return
to that plan later.

Here was the chain of reasoning that led to my plan.
Initially, I wanted a non-logically-atomic spec for the ctr server.
The pre and postcondition for ctr.put/get would have `kv_epoch_ptsto`.

The linearization point for the end client's put/get is when the ctr server does
its put/get. That would mean the ctr server would also have to be aware of the
`kv_ptsto`. I later decided logical atomicity realized logical atomicity was
important for the `kv_ptsto`. That led to my confusion about having multiple
specs for the different things you might do with the ctr server (e.g. are you
doing a read with only `kv_epoch_ptsto`, or do you also have `kv_ptsto`?)

But, if we're going for logical atomicity, we can just make the ctr server
unaware of the `kv_ptsto`. The ctr server can provide TaDa-style logically
atomic spec `kv_epoch_ptsto`, which means that a user-chosen ghost callback will
be run at linearization point, so the user can access the kv_ptsto in the
callback.
